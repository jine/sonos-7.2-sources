cscope 15 $HOME/mytree/depot/sw/branches/LSDK/mips-linux-2.4.25/drivers/mtd/chips               0000366009
	@amd_flash.c

14 
	~<löux/moduÀ.h
>

15 
	~<löux/ty≥s.h
>

16 
	~<löux/kî√l.h
>

17 
	~<löux/sched.h
>

18 
	~<löux/î∫o.h
>

19 
	~<löux/¶ab.h
>

20 
	~<löux/dñay.h
>

21 
	~<löux/öãºu±.h
>

22 
	~<löux/mtd/m≠.h
>

23 
	~<löux/mtd/mtd.h
>

24 
	~<löux/mtd/Êashchù.h
>

27 
	#MAX_AMD_CHIPS
 8

	)

29 
	#DEVICE_TYPE_X8
 (8 / 8)

	)

30 
	#DEVICE_TYPE_X16
 (16 / 8)

	)

31 
	#DEVICE_TYPE_X32
 (32 / 8)

	)

34 
	#ADDR_MANUFACTURER
 0x0000

	)

35 
	#ADDR_DEVICE_ID
 0x0001

	)

36 
	#ADDR_SECTOR_LOCK
 0x0002

	)

37 
	#ADDR_HANDSHAKE
 0x0003

	)

38 
	#ADDR_UNLOCK_1
 0x0555

	)

39 
	#ADDR_UNLOCK_2
 0x02AA

	)

42 
	#CMD_UNLOCK_DATA_1
 0x00AA

	)

43 
	#CMD_UNLOCK_DATA_2
 0x0055

	)

44 
	#CMD_MANUFACTURER_UNLOCK_DATA
 0x0090

	)

45 
	#CMD_UNLOCK_BYPASS_MODE
 0x0020

	)

46 
	#CMD_PROGRAM_UNLOCK_DATA
 0x00A0

	)

47 
	#CMD_RESET_DATA
 0x00F0

	)

48 
	#CMD_SECTOR_ERASE_UNLOCK_DATA
 0x0080

	)

49 
	#CMD_SECTOR_ERASE_UNLOCK_DATA_2
 0x0030

	)

51 
	#CMD_UNLOCK_SECTOR
 0x0060

	)

54 
	#MANUFACTURER_AMD
 0x0001

	)

55 
	#MANUFACTURER_ATMEL
 0x001F

	)

56 
	#MANUFACTURER_FUJITSU
 0x0004

	)

57 
	#MANUFACTURER_ST
 0x0020

	)

58 
	#MANUFACTURER_SST
 0x00BF

	)

59 
	#MANUFACTURER_TOSHIBA
 0x0098

	)

62 
	#AM29F800BB
 0x2258

	)

63 
	#AM29F800BT
 0x22D6

	)

64 
	#AM29LV800BB
 0x225B

	)

65 
	#AM29LV800BT
 0x22DA

	)

66 
	#AM29LV160DT
 0x22C4

	)

67 
	#AM29LV160DB
 0x2249

	)

68 
	#AM29BDS323D
 0x22D1

	)

69 
	#AM29BDS643D
 0x227E

	)

72 
	#AT49xV16x
 0x00C0

	)

73 
	#AT49xV16xT
 0x00C2

	)

76 
	#MBM29LV160TE
 0x22C4

	)

77 
	#MBM29LV160BE
 0x2249

	)

78 
	#MBM29LV800BB
 0x225B

	)

81 
	#M29W800T
 0x00D7

	)

82 
	#M29W160DT
 0x22C4

	)

83 
	#M29W160DB
 0x2249

	)

86 
	#SST39LF800
 0x2781

	)

87 
	#SST39LF160
 0x2782

	)

90 
	#TC58FVT160
 0x00C2

	)

91 
	#TC58FVB160
 0x0043

	)

93 
	#D6_MASK
 0x40

	)

95 
	samd_Êash_¥iv©e
 {

96 
	mdevi˚_ty≥
;

97 
	möãæóve
;

98 
	mnumchùs
;

99 
	mchùshi·
;

101 
Êchù
 
	mchùs
[0];

104 
	samd_Êash_öfo
 {

105 c⁄° 
__u16
 
	mm‰_id
;

106 c⁄° 
__u16
 
	mdev_id
;

107 c⁄° *
	m«me
;

108 c⁄° 
u_l⁄g
 
	msize
;

109 c⁄° 
	mnumîa£ªgi⁄s
;

110 c⁄° 
mtd_îa£_ªgi⁄_öfo
 
	mªgi⁄s
[4];

115 
amd_Êash_ªad
(
mtd_öfo
 *, 
loff_t
, 
size_t
, size_t *,

116 
u_ch¨
 *);

117 
amd_Êash_wrôe
(
mtd_öfo
 *, 
loff_t
, 
size_t
, size_t *,

118 c⁄° 
u_ch¨
 *);

119 
amd_Êash_îa£
(
mtd_öfo
 *, 
îa£_öfo
 *);

120 
amd_Êash_sync
(
mtd_öfo
 *);

121 
amd_Êash_su•íd
(
mtd_öfo
 *);

122 
amd_Êash_ªsume
(
mtd_öfo
 *);

123 
amd_Êash_de°roy
(
mtd_öfo
 *);

124 
mtd_öfo
 *
amd_Êash_¥obe
(
m≠_öfo
 *
m≠
);

127 
mtd_chù_drivî
 
	gamd_Êash_chùdrv
 = {

128 
¥obe
: 
amd_Êash_¥obe
,

129 
de°roy
: 
amd_Êash_de°roy
,

130 
«me
: "amd_flash",

131 
moduÀ
: 
THIS_MODULE


136 c⁄° 
	gim_«me
[] = "amd_flash";

140 
ölöe
 
__u32
 
	$wide_ªad
(
m≠_öfo
 *
m≠
, 
__u32
 
addr
)

142 i‡(
m≠
->
buswidth
 == 1) {

143  
m≠
->
	`ªad8
(m≠, 
addr
);

144 } i‡(
m≠
->
buswidth
 == 2) {

145  
m≠
->
	`ªad16
(m≠, 
addr
);

146 } i‡(
m≠
->
buswidth
 == 4) {

147  
m≠
->
	`ªad32
(m≠, 
addr
);

151 
	}
}

153 
ölöe
 
	$wide_wrôe
(
m≠_öfo
 *
m≠
, 
__u32
 
vÆ
, __u32 
addr
)

155 i‡(
m≠
->
buswidth
 == 1) {

156 
m≠
->
	`wrôe8
(m≠, 
vÆ
, 
addr
);

157 } i‡(
m≠
->
buswidth
 == 2) {

158 
m≠
->
	`wrôe16
(m≠, 
vÆ
, 
addr
);

159 } i‡(
m≠
->
buswidth
 == 4) {

160 
m≠
->
	`wrôe32
(m≠, 
vÆ
, 
addr
);

162 
	}
}

164 
ölöe
 
__u32
 
	$make_cmd
(
m≠_öfo
 *
m≠
, 
__u32
 
cmd
)

166 c⁄° 
amd_Êash_¥iv©e
 *
¥iv©e
 = 
m≠
->
Êdrv_¥iv
;

167 i‡((
¥iv©e
->
öãæóve
 == 2) &&

168 (
¥iv©e
->
devi˚_ty≥
 =
DEVICE_TYPE_X16
)) {

169 
cmd
 |= (cmd << 16);

172  
cmd
;

173 
	}
}

175 
ölöe
 
	$£nd_u∆ock
(
m≠_öfo
 *
m≠
, 
ba£
)

177 
	`wide_wrôe
(
m≠
, (
CMD_UNLOCK_DATA_1
 << 16) | CMD_UNLOCK_DATA_1,

178 
ba£
 + (
m≠
->
buswidth
 * 
ADDR_UNLOCK_1
));

179 
	`wide_wrôe
(
m≠
, (
CMD_UNLOCK_DATA_2
 << 16) | CMD_UNLOCK_DATA_2,

180 
ba£
 + (
m≠
->
buswidth
 * 
ADDR_UNLOCK_2
));

181 
	}
}

183 
ölöe
 
	$£nd_cmd
(
m≠_öfo
 *
m≠
, 
ba£
, 
__u32
 
cmd
)

185 
	`£nd_u∆ock
(
m≠
, 
ba£
);

186 
	`wide_wrôe
(
m≠
, 
	`make_cmd
(m≠, 
cmd
),

187 
ba£
 + (
m≠
->
buswidth
 * 
ADDR_UNLOCK_1
));

188 
	}
}

190 
ölöe
 
	$£nd_cmd_to_addr
(
m≠_öfo
 *
m≠
, 
ba£
,

191 
__u32
 
cmd
, 
addr
)

193 
	`£nd_u∆ock
(
m≠
, 
ba£
);

194 
	`wide_wrôe
(
m≠
, 
	`make_cmd
(m≠, 
cmd
), 
addr
);

195 
	}
}

197 
ölöe
 
	$Êash_is_busy
(
m≠_öfo
 *
m≠
, 
addr
,

198 
öãæóve
)

201 i‡((
öãæóve
 =2Ë&& (
m≠
->
buswidth
 == 4)) {

202 
__u32
 
ªad1
, 
ªad2
;

204 
ªad1
 = 
	`wide_ªad
(
m≠
, 
addr
);

205 
ªad2
 = 
	`wide_ªad
(
m≠
, 
addr
);

207  (((
ªad1
 >> 16Ë& 
D6_MASK
) !=

208 ((
ªad2
 >> 16Ë& 
D6_MASK
)) ||

209 (((
ªad1
 & 0xffffË& 
D6_MASK
) !=

210 ((
ªad2
 & 0xffffË& 
D6_MASK
));

213  ((
	`wide_ªad
(
m≠
, 
addr
Ë& 
D6_MASK
) !=

214 (
	`wide_ªad
(
m≠
, 
addr
Ë& 
D6_MASK
));

215 
	}
}

217 
ölöe
 
	$u∆ock_£˘‹
(
m≠_öfo
 *
m≠
, 
£˘_addr
,

218 
u∆ock
)

221 
SLA
 = 
u∆ock
 ?

222 (
£˘_addr
 | (0x40 * 
m≠
->
buswidth
)) :

223 (
£˘_addr
 & ~(0x40 * 
m≠
->
buswidth
)) ;

225 
__u32
 
cmd
 = 
	`make_cmd
(
m≠
, 
CMD_UNLOCK_SECTOR
);

227 
	`wide_wrôe
(
m≠
, 
	`make_cmd
(m≠, 
CMD_RESET_DATA
), 0);

228 
	`wide_wrôe
(
m≠
, 
cmd
, 
SLA
);

229 
	`wide_wrôe
(
m≠
, 
cmd
, 
SLA
);

230 
	`wide_wrôe
(
m≠
, 
cmd
, 
SLA
);

231 
	}
}

233 
ölöe
 
	$is_£˘‹_locked
(
m≠_öfo
 *
m≠
,

234 
£˘_addr
)

236 
°©us
;

238 
	`wide_wrôe
(
m≠
, 
CMD_RESET_DATA
, 0);

239 
	`£nd_cmd
(
m≠
, 
£˘_addr
, 
CMD_MANUFACTURER_UNLOCK_DATA
);

242 
°©us
 = 
	`wide_ªad
(
m≠
, 
£˘_addr
 + (m≠->
buswidth
 * 
ADDR_SECTOR_LOCK
));

243 
	`wide_wrôe
(
m≠
, 
CMD_RESET_DATA
, 0);

244  
°©us
;

245 
	}
}

247 
	$amd_Êash_do_u∆ock
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
, 
size_t
 
Àn
,

248 
is_u∆ock
)

250 
m≠_öfo
 *
m≠
;

251 
mtd_îa£_ªgi⁄_öfo
 *
mîù
;

252 
îa£off£t
, 
îa£size
, 
îa£blocks
;

253 
i
;

254 
ªtvÆ
 = 0;

255 
lock_°©us
;

257 
m≠
 = 
mtd
->
¥iv
;

261 
i
 = 0; i < 
mtd
->
numîa£ªgi⁄s
; i++) {

262 
mîù
 = &
mtd
->
îa£ªgi⁄s
[
i
];

264 
îa£off£t
 = 
mîù
->
off£t
;

265 
îa£size
 = 
mîù
->erasesize;

266 
îa£blocks
 = 
mîù
->
numblocks
;

268 i‡(
ofs
 > 
îa£off£t
 + 
îa£size
)

271 
îa£blocks
 > 0) {

272 i‡(
ofs
 < 
îa£off£t
 + 
îa£size
 && of†+ 
Àn
 >Éraseoffset) {

273 
	`u∆ock_£˘‹
(
m≠
, 
îa£off£t
, 
is_u∆ock
);

275 
lock_°©us
 = 
	`is_£˘‹_locked
(
m≠
, 
îa£off£t
);

277 i‡(
is_u∆ock
 && 
lock_°©us
) {

278 
	`¥ötk
("Cannot unlock sectorátáddress %xÜength %xx\n",

279 
îa£off£t
, 
mîù
->
îa£size
);

280 
ªtvÆ
 = -1;

281 } i‡(!
is_u∆ock
 && !
lock_°©us
) {

282 
	`¥ötk
("CannotÜock sectorátáddress %xÜength %x\n",

283 
îa£off£t
, 
mîù
->
îa£size
);

284 
ªtvÆ
 = -1;

287 
îa£off£t
 +
îa£size
;

288 
îa£blocks
 --;

291  
ªtvÆ
;

292 
	}
}

294 
	$amd_Êash_u∆ock
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
, 
size_t
 
Àn
)

296  
	`amd_Êash_do_u∆ock
(
mtd
, 
ofs
, 
Àn
, 1);

297 
	}
}

299 
	$amd_Êash_lock
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
, 
size_t
 
Àn
)

301  
	`amd_Êash_do_u∆ock
(
mtd
, 
ofs
, 
Àn
, 0);

302 
	}
}

309 
	$¥obe_√w_chù
(
mtd_öfo
 *
mtd
, 
__u32
 
ba£
,

310 
Êchù
 *
chùs
,

311 
amd_Êash_¥iv©e
 *
¥iv©e
,

312 c⁄° 
amd_Êash_öfo
 *
èbÀ
, 
èbÀ_size
)

314 
__u32
 
m‰_id
;

315 
__u32
 
dev_id
;

316 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

317 
amd_Êash_¥iv©e
 
ãmp
;

318 
i
;

320 
ãmp
.
devi˚_ty≥
 = 
DEVICE_TYPE_X16
;

321 
ãmp
.
öãæóve
 = 2;

322 
m≠
->
Êdrv_¥iv
 = &
ãmp
;

325 
	`£nd_cmd
(
m≠
, 
ba£
, 
CMD_RESET_DATA
);

326 
	`£nd_cmd
(
m≠
, 
ba£
, 
CMD_MANUFACTURER_UNLOCK_DATA
);

328 
m‰_id
 = 
	`wide_ªad
(
m≠
, 
ba£
 + (m≠->
buswidth
 * 
ADDR_MANUFACTURER
));

329 
dev_id
 = 
	`wide_ªad
(
m≠
, 
ba£
 + (m≠->
buswidth
 * 
ADDR_DEVICE_ID
));

331 i‡((
m≠
->
buswidth
 =4Ë&& ((
m‰_id
 >> 16) == (mfr_id & 0xffff)) &&

332 ((
dev_id
 >> 16) == (dev_id & 0xffff))) {

333 
m‰_id
 &= 0xffff;

334 
dev_id
 &= 0xffff;

336 
ãmp
.
öãæóve
 = 1;

339 
i
 = 0; i < 
èbÀ_size
; i++) {

340 i‡((
m‰_id
 =
èbÀ
[
i
].mfr_id) &&

341 (
dev_id
 =
èbÀ
[
i
].dev_id)) {

342 i‡(
chùs
) {

343 
j
;

349 
j
 = 0; j < 
¥iv©e
->
numchùs
; j++) {

350 
__u32
 
m‰_id_Ÿhî
;

351 
__u32
 
dev_id_Ÿhî
;

353 
m‰_id_Ÿhî
 =

354 
	`wide_ªad
(
m≠
, 
chùs
[
j
].
°¨t
 +

355 (
m≠
->
buswidth
 *

356 
ADDR_MANUFACTURER


358 
dev_id_Ÿhî
 =

359 
	`wide_ªad
(
m≠
, 
chùs
[
j
].
°¨t
 +

360 (
m≠
->
buswidth
 *

361 
ADDR_DEVICE_ID
));

362 i‡(
ãmp
.
öãæóve
 == 2) {

363 
m‰_id_Ÿhî
 &= 0xffff;

364 
dev_id_Ÿhî
 &= 0xffff;

366 i‡((
m‰_id_Ÿhî
 =
m‰_id
) &&

367 (
dev_id_Ÿhî
 =
dev_id
)) {

370 
	`£nd_cmd
(
m≠
, 
ba£
,

371 
CMD_RESET_DATA
);

377 i‡(
¥iv©e
->
numchùs
 =
MAX_AMD_CHIPS
) {

378 
	`¥ötk
(
KERN_WARNING


382 
m≠
->
«me
, 
MAX_AMD_CHIPS
);

387 
chùs
[
¥iv©e
->
numchùs
].
°¨t
 = 
ba£
;

388 
chùs
[
¥iv©e
->
numchùs
].
°©e
 = 
FL_READY
;

389 
chùs
[
¥iv©e
->
numchùs
].
muãx
 =

390 &
chùs
[
¥iv©e
->
numchùs
].
_•ölock
;

391 
¥iv©e
->
numchùs
++;

394 
	`¥ötk
("%s: Found %d x %ldMiB %†© 0x%x\n", 
m≠
->
«me
,

395 
ãmp
.
öãæóve
, (
èbÀ
[
i
].
size
)/(1024*1024),

396 
èbÀ
[
i
].
«me
, 
ba£
);

398 
mtd
->
size
 +
èbÀ
[
i
].sizê* 
ãmp
.
öãæóve
;

399 
mtd
->
numîa£ªgi⁄s
 +
èbÀ
[
i
].numeraseregions;

406 
	`£nd_cmd
(
m≠
, 
ba£
, 
CMD_RESET_DATA
);

408 i‡(
i
 =
èbÀ_size
) {

409 
	`¥ötk
(
KERN_DEBUG
 "%s: unknown flash deviceát 0x%x, "

410 "m‰ id 0x%x, dev id 0x%x\n", 
m≠
->
«me
,

411 
ba£
, 
m‰_id
, 
dev_id
);

412 
m≠
->
Êdrv_¥iv
 = 
NULL
;

417 
¥iv©e
->
devi˚_ty≥
 = 
ãmp
.device_type;

418 
¥iv©e
->
öãæóve
 = 
ãmp
.interleave;

420  
i
;

421 
	}
}

425 
mtd_öfo
 *
	$amd_Êash_¥obe
(
m≠_öfo
 *
m≠
)

430 c⁄° 
amd_Êash_öfo
 
èbÀ
[] = {

432 
m‰_id
: 
MANUFACTURER_AMD
,

433 
dev_id
: 
AM29LV160DT
,

434 
«me
: "AMD AM29LV160DT",

435 
size
: 0x00200000,

436 
numîa£ªgi⁄s
: 4,

437 
ªgi⁄s
: {

438 { 
off£t
: 0x000000, 
îa£size
: 0x10000, 
numblocks
: 31 },

439 { 
off£t
: 0x1F0000, 
îa£size
: 0x08000, 
numblocks
: 1 },

440 { 
off£t
: 0x1F8000, 
îa£size
: 0x02000, 
numblocks
: 2 },

441 { 
off£t
: 0x1FC000, 
îa£size
: 0x04000, 
numblocks
: 1 }

444 
m‰_id
: 
MANUFACTURER_AMD
,

445 
dev_id
: 
AM29LV160DB
,

446 
«me
: "AMD AM29LV160DB",

447 
size
: 0x00200000,

448 
numîa£ªgi⁄s
: 4,

449 
ªgi⁄s
: {

450 { 
off£t
: 0x000000, 
îa£size
: 0x04000, 
numblocks
: 1 },

451 { 
off£t
: 0x004000, 
îa£size
: 0x02000, 
numblocks
: 2 },

452 { 
off£t
: 0x008000, 
îa£size
: 0x08000, 
numblocks
: 1 },

453 { 
off£t
: 0x010000, 
îa£size
: 0x10000, 
numblocks
: 31 }

456 
m‰_id
: 
MANUFACTURER_TOSHIBA
,

457 
dev_id
: 
TC58FVT160
,

458 
«me
: "Toshiba TC58FVT160",

459 
size
: 0x00200000,

460 
numîa£ªgi⁄s
: 4,

461 
ªgi⁄s
: {

462 { 
off£t
: 0x000000, 
îa£size
: 0x10000, 
numblocks
: 31 },

463 { 
off£t
: 0x1F0000, 
îa£size
: 0x08000, 
numblocks
: 1 },

464 { 
off£t
: 0x1F8000, 
îa£size
: 0x02000, 
numblocks
: 2 },

465 { 
off£t
: 0x1FC000, 
îa£size
: 0x04000, 
numblocks
: 1 }

468 
m‰_id
: 
MANUFACTURER_FUJITSU
,

469 
dev_id
: 
MBM29LV160TE
,

470 
«me
: "Fujitsu MBM29LV160TE",

471 
size
: 0x00200000,

472 
numîa£ªgi⁄s
: 4,

473 
ªgi⁄s
: {

474 { 
off£t
: 0x000000, 
îa£size
: 0x10000, 
numblocks
: 31 },

475 { 
off£t
: 0x1F0000, 
îa£size
: 0x08000, 
numblocks
: 1 },

476 { 
off£t
: 0x1F8000, 
îa£size
: 0x02000, 
numblocks
: 2 },

477 { 
off£t
: 0x1FC000, 
îa£size
: 0x04000, 
numblocks
: 1 }

480 
m‰_id
: 
MANUFACTURER_TOSHIBA
,

481 
dev_id
: 
TC58FVB160
,

482 
«me
: "Toshiba TC58FVB160",

483 
size
: 0x00200000,

484 
numîa£ªgi⁄s
: 4,

485 
ªgi⁄s
: {

486 { 
off£t
: 0x000000, 
îa£size
: 0x04000, 
numblocks
: 1 },

487 { 
off£t
: 0x004000, 
îa£size
: 0x02000, 
numblocks
: 2 },

488 { 
off£t
: 0x008000, 
îa£size
: 0x08000, 
numblocks
: 1 },

489 { 
off£t
: 0x010000, 
îa£size
: 0x10000, 
numblocks
: 31 }

492 
m‰_id
: 
MANUFACTURER_FUJITSU
,

493 
dev_id
: 
MBM29LV160BE
,

494 
«me
: "Fujitsu MBM29LV160BE",

495 
size
: 0x00200000,

496 
numîa£ªgi⁄s
: 4,

497 
ªgi⁄s
: {

498 { 
off£t
: 0x000000, 
îa£size
: 0x04000, 
numblocks
: 1 },

499 { 
off£t
: 0x004000, 
îa£size
: 0x02000, 
numblocks
: 2 },

500 { 
off£t
: 0x008000, 
îa£size
: 0x08000, 
numblocks
: 1 },

501 { 
off£t
: 0x010000, 
îa£size
: 0x10000, 
numblocks
: 31 }

504 
m‰_id
: 
MANUFACTURER_AMD
,

505 
dev_id
: 
AM29LV800BB
,

506 
«me
: "AMD AM29LV800BB",

507 
size
: 0x00100000,

508 
numîa£ªgi⁄s
: 4,

509 
ªgi⁄s
: {

510 { 
off£t
: 0x000000, 
îa£size
: 0x04000, 
numblocks
: 1 },

511 { 
off£t
: 0x004000, 
îa£size
: 0x02000, 
numblocks
: 2 },

512 { 
off£t
: 0x008000, 
îa£size
: 0x08000, 
numblocks
: 1 },

513 { 
off£t
: 0x010000, 
îa£size
: 0x10000, 
numblocks
: 15 }

516 
m‰_id
: 
MANUFACTURER_AMD
,

517 
dev_id
: 
AM29F800BB
,

518 
«me
: "AMD AM29F800BB",

519 
size
: 0x00100000,

520 
numîa£ªgi⁄s
: 4,

521 
ªgi⁄s
: {

522 { 
off£t
: 0x000000, 
îa£size
: 0x04000, 
numblocks
: 1 },

523 { 
off£t
: 0x004000, 
îa£size
: 0x02000, 
numblocks
: 2 },

524 { 
off£t
: 0x008000, 
îa£size
: 0x08000, 
numblocks
: 1 },

525 { 
off£t
: 0x010000, 
îa£size
: 0x10000, 
numblocks
: 15 }

528 
m‰_id
: 
MANUFACTURER_AMD
,

529 
dev_id
: 
AM29LV800BT
,

530 
«me
: "AMD AM29LV800BT",

531 
size
: 0x00100000,

532 
numîa£ªgi⁄s
: 4,

533 
ªgi⁄s
: {

534 { 
off£t
: 0x000000, 
îa£size
: 0x10000, 
numblocks
: 15 },

535 { 
off£t
: 0x0F0000, 
îa£size
: 0x08000, 
numblocks
: 1 },

536 { 
off£t
: 0x0F8000, 
îa£size
: 0x02000, 
numblocks
: 2 },

537 { 
off£t
: 0x0FC000, 
îa£size
: 0x04000, 
numblocks
: 1 }

540 
m‰_id
: 
MANUFACTURER_AMD
,

541 
dev_id
: 
AM29F800BT
,

542 
«me
: "AMD AM29F800BT",

543 
size
: 0x00100000,

544 
numîa£ªgi⁄s
: 4,

545 
ªgi⁄s
: {

546 { 
off£t
: 0x000000, 
îa£size
: 0x10000, 
numblocks
: 15 },

547 { 
off£t
: 0x0F0000, 
îa£size
: 0x08000, 
numblocks
: 1 },

548 { 
off£t
: 0x0F8000, 
îa£size
: 0x02000, 
numblocks
: 2 },

549 { 
off£t
: 0x0FC000, 
îa£size
: 0x04000, 
numblocks
: 1 }

552 
m‰_id
: 
MANUFACTURER_AMD
,

553 
dev_id
: 
AM29LV800BB
,

554 
«me
: "AMD AM29LV800BB",

555 
size
: 0x00100000,

556 
numîa£ªgi⁄s
: 4,

557 
ªgi⁄s
: {

558 { 
off£t
: 0x000000, 
îa£size
: 0x10000, 
numblocks
: 15 },

559 { 
off£t
: 0x0F0000, 
îa£size
: 0x08000, 
numblocks
: 1 },

560 { 
off£t
: 0x0F8000, 
îa£size
: 0x02000, 
numblocks
: 2 },

561 { 
off£t
: 0x0FC000, 
îa£size
: 0x04000, 
numblocks
: 1 }

564 
m‰_id
: 
MANUFACTURER_FUJITSU
,

565 
dev_id
: 
MBM29LV800BB
,

566 
«me
: "Fujitsu MBM29LV800BB",

567 
size
: 0x00100000,

568 
numîa£ªgi⁄s
: 4,

569 
ªgi⁄s
: {

570 { 
off£t
: 0x000000, 
îa£size
: 0x04000, 
numblocks
: 1 },

571 { 
off£t
: 0x004000, 
îa£size
: 0x02000, 
numblocks
: 2 },

572 { 
off£t
: 0x008000, 
îa£size
: 0x08000, 
numblocks
: 1 },

573 { 
off£t
: 0x010000, 
îa£size
: 0x10000, 
numblocks
: 15 }

576 
m‰_id
: 
MANUFACTURER_ST
,

577 
dev_id
: 
M29W800T
,

578 
«me
: "ST M29W800T",

579 
size
: 0x00100000,

580 
numîa£ªgi⁄s
: 4,

581 
ªgi⁄s
: {

582 { 
off£t
: 0x000000, 
îa£size
: 0x10000, 
numblocks
: 15 },

583 { 
off£t
: 0x0F0000, 
îa£size
: 0x08000, 
numblocks
: 1 },

584 { 
off£t
: 0x0F8000, 
îa£size
: 0x02000, 
numblocks
: 2 },

585 { 
off£t
: 0x0FC000, 
îa£size
: 0x04000, 
numblocks
: 1 }

588 
m‰_id
: 
MANUFACTURER_ST
,

589 
dev_id
: 
M29W160DT
,

590 
«me
: "ST M29W160DT",

591 
size
: 0x00200000,

592 
numîa£ªgi⁄s
: 4,

593 
ªgi⁄s
: {

594 { 
off£t
: 0x000000, 
îa£size
: 0x10000, 
numblocks
: 31 },

595 { 
off£t
: 0x1F0000, 
îa£size
: 0x08000, 
numblocks
: 1 },

596 { 
off£t
: 0x1F8000, 
îa£size
: 0x02000, 
numblocks
: 2 },

597 { 
off£t
: 0x1FC000, 
îa£size
: 0x04000, 
numblocks
: 1 }

600 
m‰_id
: 
MANUFACTURER_ST
,

601 
dev_id
: 
M29W160DB
,

602 
«me
: "ST M29W160DB",

603 
size
: 0x00200000,

604 
numîa£ªgi⁄s
: 4,

605 
ªgi⁄s
: {

606 { 
off£t
: 0x000000, 
îa£size
: 0x04000, 
numblocks
: 1 },

607 { 
off£t
: 0x004000, 
îa£size
: 0x02000, 
numblocks
: 2 },

608 { 
off£t
: 0x008000, 
îa£size
: 0x08000, 
numblocks
: 1 },

609 { 
off£t
: 0x010000, 
îa£size
: 0x10000, 
numblocks
: 31 }

612 
m‰_id
: 
MANUFACTURER_AMD
,

613 
dev_id
: 
AM29BDS323D
,

614 
«me
: "AMD AM29BDS323D",

615 
size
: 0x00400000,

616 
numîa£ªgi⁄s
: 3,

617 
ªgi⁄s
: {

618 { 
off£t
: 0x000000, 
îa£size
: 0x10000, 
numblocks
: 48 },

619 { 
off£t
: 0x300000, 
îa£size
: 0x10000, 
numblocks
: 15 },

620 { 
off£t
: 0x3f0000, 
îa£size
: 0x02000, 
numblocks
: 8 },

623 
m‰_id
: 
MANUFACTURER_AMD
,

624 
dev_id
: 
AM29BDS643D
,

625 
«me
: "AMD AM29BDS643D",

626 
size
: 0x00800000,

627 
numîa£ªgi⁄s
: 3,

628 
ªgi⁄s
: {

629 { 
off£t
: 0x000000, 
îa£size
: 0x10000, 
numblocks
: 96 },

630 { 
off£t
: 0x600000, 
îa£size
: 0x10000, 
numblocks
: 31 },

631 { 
off£t
: 0x7f0000, 
îa£size
: 0x02000, 
numblocks
: 8 },

634 
m‰_id
: 
MANUFACTURER_ATMEL
,

635 
dev_id
: 
AT49xV16x
,

636 
«me
: "Atmel AT49xV16x",

637 
size
: 0x00200000,

638 
numîa£ªgi⁄s
: 2,

639 
ªgi⁄s
: {

640 { 
off£t
: 0x000000, 
îa£size
: 0x02000, 
numblocks
: 8 },

641 { 
off£t
: 0x010000, 
îa£size
: 0x10000, 
numblocks
: 31 }

644 
m‰_id
: 
MANUFACTURER_ATMEL
,

645 
dev_id
: 
AT49xV16xT
,

646 
«me
: "Atmel AT49xV16xT",

647 
size
: 0x00200000,

648 
numîa£ªgi⁄s
: 2,

649 
ªgi⁄s
: {

650 { 
off£t
: 0x000000, 
îa£size
: 0x10000, 
numblocks
: 31 },

651 { 
off£t
: 0x1F0000, 
îa£size
: 0x02000, 
numblocks
: 8 }

656 
mtd_öfo
 *
mtd
;

657 
Êchù
 
chùs
[
MAX_AMD_CHIPS
];

658 
èbÀ_pos
[
MAX_AMD_CHIPS
];

659 
amd_Êash_¥iv©e
 
ãmp
;

660 
amd_Êash_¥iv©e
 *
¥iv©e
;

661 
u_l⁄g
 
size
;

662 
ba£
;

663 
i
;

664 
ªg_idx
;

665 
off£t
;

667 
mtd
 = (
mtd_öfo
*)
	`kmÆloc
((*mtd), 
GFP_KERNEL
);

668 i‡(!
mtd
) {

669 
	`¥ötk
(
KERN_WARNING


670 "%s: kmÆlo¯Áûed f‹ infÿ°ru˘uª\n", 
m≠
->
«me
);

671  
NULL
;

673 
	`mem£t
(
mtd
, 0, (*mtd));

674 
mtd
->
¥iv
 = 
m≠
;

676 
	`mem£t
(&
ãmp
, 0, (temp));

678 
	`¥ötk
("%s: Probög f‹ AMD com∑tibÀ fœsh...\n", 
m≠
->
«me
);

680 i‡((
èbÀ_pos
[0] = 
	`¥obe_√w_chù
(
mtd
, 0, 
NULL
, &
ãmp
, 
èbÀ
,

681 (
èbÀ
)/(table[0])))

683 
	`¥ötk
(
KERN_WARNING


685 
m≠
->
«me
);

686 
	`k‰ì
(
mtd
);

688  
NULL
;

691 
chùs
[0].
°¨t
 = 0;

692 
chùs
[0].
°©e
 = 
FL_READY
;

693 
chùs
[0].
muãx
 = &chùs[0].
_•ölock
;

694 
ãmp
.
numchùs
 = 1;

695 
size
 = 
mtd
->size; size > 1; size >>= 1) {

696 
ãmp
.
chùshi·
++;

698 
ãmp
.
öãæóve
) {

700 
ãmp
.
chùshi·
 += 1;

703 
ãmp
.
chùshi·
 += 2;

708 
ba£
 = (1 << 
ãmp
.
chùshi·
);

709 
ba£
 < 
m≠
->
size
;

710 
ba£
 +(1 << 
ãmp
.
chùshi·
)) {

711 
numchùs
 = 
ãmp
.numchips;

712 
èbÀ_pos
[
numchùs
] = 
	`¥obe_√w_chù
(
mtd
, 
ba£
, 
chùs
,

713 &
ãmp
, 
èbÀ
, (table)/(table[0]));

716 
mtd
->
îa£ªgi⁄s
 = 
	`kmÆloc
((
mtd_îa£_ªgi⁄_öfo
) *

717 
mtd
->
numîa£ªgi⁄s
, 
GFP_KERNEL
);

718 i‡(!
mtd
->
îa£ªgi⁄s
) {

719 
	`¥ötk
(
KERN_WARNING
 "%s: FailedÅoállocate "

720 "mem‹y f‹ MTDÉø£Ñegi⁄ info\n", 
m≠
->
«me
);

721 
	`k‰ì
(
mtd
);

722 
m≠
->
Êdrv_¥iv
 = 
NULL
;

726 
ªg_idx
 = 0;

727 
off£t
 = 0;

728 
i
 = 0; i < 
ãmp
.
numchùs
; i++) {

729 
dev_size
;

730 
j
;

732 
dev_size
 = 0;

733 
j
 = 0; j < 
èbÀ
[
èbÀ_pos
[
i
]].
numîa£ªgi⁄s
; j++) {

734 
mtd
->
îa£ªgi⁄s
[
ªg_idx
].
off£t
 = offset +

735 (
èbÀ
[
èbÀ_pos
[
i
]].
ªgi⁄s
[
j
].
off£t
 *

736 
ãmp
.
öãæóve
);

737 
mtd
->
îa£ªgi⁄s
[
ªg_idx
].
îa£size
 =

738 
èbÀ
[
èbÀ_pos
[
i
]].
ªgi⁄s
[
j
].
îa£size
 *

739 
ãmp
.
öãæóve
;

740 
mtd
->
îa£ªgi⁄s
[
ªg_idx
].
numblocks
 =

741 
èbÀ
[
èbÀ_pos
[
i
]].
ªgi⁄s
[
j
].
numblocks
;

742 i‡(
mtd
->
îa£size
 <

743 
mtd
->
îa£ªgi⁄s
[
ªg_idx
].
îa£size
) {

744 
mtd
->
îa£size
 =

745 
mtd
->
îa£ªgi⁄s
[
ªg_idx
].
îa£size
;

747 
dev_size
 +
mtd
->
îa£ªgi⁄s
[
ªg_idx
].
îa£size
 *

748 
mtd
->
îa£ªgi⁄s
[
ªg_idx
].
numblocks
;

749 
ªg_idx
++;

751 
off£t
 +
dev_size
;

753 
mtd
->
ty≥
 = 
MTD_NORFLASH
;

754 
mtd
->
Êags
 = 
MTD_CAP_NORFLASH
;

755 
mtd
->
«me
 = 
m≠
->name;

756 
mtd
->
îa£
 = 
amd_Êash_îa£
;

757 
mtd
->
ªad
 = 
amd_Êash_ªad
;

758 
mtd
->
wrôe
 = 
amd_Êash_wrôe
;

759 
mtd
->
sync
 = 
amd_Êash_sync
;

760 
mtd
->
su•íd
 = 
amd_Êash_su•íd
;

761 
mtd
->
ªsume
 = 
amd_Êash_ªsume
;

762 
mtd
->
lock
 = 
amd_Êash_lock
;

763 
mtd
->
u∆ock
 = 
amd_Êash_u∆ock
;

765 
¥iv©e
 = 
	`kmÆloc
((*¥iv©eË+ ((
Êchù
) *

766 
ãmp
.
numchùs
), 
GFP_KERNEL
);

767 i‡(!
¥iv©e
) {

768 
	`¥ötk
(
KERN_WARNING


769 "%s: kmÆlo¯Áûed f‹Öriv©ê°ru˘uª\n", 
m≠
->
«me
);

770 
	`k‰ì
(
mtd
);

771 
m≠
->
Êdrv_¥iv
 = 
NULL
;

772  
NULL
;

774 
	`mem˝y
(
¥iv©e
, &
ãmp
, (temp));

775 
	`mem˝y
(
¥iv©e
->
chùs
, chips,

776 (
Êchù
Ë* 
¥iv©e
->
numchùs
);

777 
i
 = 0; i < 
¥iv©e
->
numchùs
; i++) {

778 
	`öô_waôqueue_hód
(&
¥iv©e
->
chùs
[
i
].
wq
);

779 
	`•ö_lock_öô
(&
¥iv©e
->
chùs
[
i
].
_•ölock
);

782 
m≠
->
Êdrv_¥iv
 = 
¥iv©e
;

784 
m≠
->
Êdrv
 = &
amd_Êash_chùdrv
;

785 
MOD_INC_USE_COUNT
;

787  
mtd
;

788 
	}
}

792 
ölöe
 
	$ªad_⁄e_chù
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
,

793 
loff_t
 
adr
, 
size_t
 
Àn
, 
u_ch¨
 *
buf
)

795 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

796 
timeo
 = 
jiffõs
 + 
HZ
;

798 
ªåy
:

799 
	`•ö_lock_bh
(
chù
->
muãx
);

801 i‡(
chù
->
°©e
 !
FL_READY
){

802 
	`¥ötk
(
KERN_INFO
 "%s: waiting for chipÅoÑead, state = %d\n",

803 
m≠
->
«me
, 
chù
->
°©e
);

804 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

805 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

807 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

809 
	`scheduÀ
();

810 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

812 if(
	`sig«l_≥ndög
(
cuºít
)) {

813  -
EINTR
;

816 
timeo
 = 
jiffõs
 + 
HZ
;

818 
ªåy
;

821 
adr
 +
chù
->
°¨t
;

823 
chù
->
°©e
 = 
FL_READY
;

825 
m≠
->
	`c›y_‰om
(m≠, 
buf
, 
adr
, 
Àn
);

827 
	`wake_up
(&
chù
->
wq
);

828 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

831 
	}
}

835 
	$amd_Êash_ªad
(
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
,

836 
size_t
 *
ªéí
, 
u_ch¨
 *
buf
)

838 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

839 
amd_Êash_¥iv©e
 *
¥iv©e
 = 
m≠
->
Êdrv_¥iv
;

840 
ofs
;

841 
chùnum
;

842 
ªt
 = 0;

844 i‡((
‰om
 + 
Àn
Ë> 
mtd
->
size
) {

845 
	`¥ötk
(
KERN_WARNING
 "%s:ÑeadÑequestÖastÉnd of device "

846 "(0x%lx)\n", 
m≠
->
«me
, ()
‰om
 + 
Àn
);

848  -
EINVAL
;

852 
chùnum
 = (
‰om
 >> 
¥iv©e
->
chùshi·
);

853 
ofs
 = 
‰om
 - (
chùnum
 << 
¥iv©e
->
chùshi·
);

855 *
ªéí
 = 0;

857 
Àn
) {

858 
this_Àn
;

860 i‡(
chùnum
 >
¥iv©e
->
numchùs
) {

864 i‡((
Àn
 + 
ofs
 - 1Ë>> 
¥iv©e
->
chùshi·
) {

865 
this_Àn
 = (1 << 
¥iv©e
->
chùshi·
Ë- 
ofs
;

867 
this_Àn
 = 
Àn
;

870 
ªt
 = 
	`ªad_⁄e_chù
(
m≠
, &
¥iv©e
->
chùs
[
chùnum
], 
ofs
,

871 
this_Àn
, 
buf
);

872 i‡(
ªt
) {

876 *
ªéí
 +
this_Àn
;

877 
Àn
 -
this_Àn
;

878 
buf
 +
this_Àn
;

880 
ofs
 = 0;

881 
chùnum
++;

884  
ªt
;

885 
	}
}

889 
	$wrôe_⁄e_w‹d
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
,

890 
adr
, 
__u32
 
d©um
)

892 
timeo
 = 
jiffõs
 + 
HZ
;

893 
amd_Êash_¥iv©e
 *
¥iv©e
 = 
m≠
->
Êdrv_¥iv
;

894 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

895 
ªt
 = 0;

896 
times_À·
;

898 
ªåy
:

899 
	`•ö_lock_bh
(
chù
->
muãx
);

901 i‡(
chù
->
°©e
 !
FL_READY
){

902 
	`¥ötk
("%s: waiting for chipÅo write, state = %d\n",

903 
m≠
->
«me
, 
chù
->
°©e
);

904 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

905 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

907 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

909 
	`scheduÀ
();

910 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

911 
	`¥ötk
(
KERN_INFO
 "%s: wokêu∞tÿwrôe\n", 
m≠
->
«me
);

912 if(
	`sig«l_≥ndög
(
cuºít
))

913  -
EINTR
;

915 
timeo
 = 
jiffõs
 + 
HZ
;

917 
ªåy
;

920 
chù
->
°©e
 = 
FL_WRITING
;

922 
adr
 +
chù
->
°¨t
;

923 
	`ENABLE_VPP
(
m≠
);

924 
	`£nd_cmd
(
m≠
, 
chù
->
°¨t
, 
CMD_PROGRAM_UNLOCK_DATA
);

925 
	`wide_wrôe
(
m≠
, 
d©um
, 
adr
);

927 
times_À·
 = 500000;

928 
times_À·
-- && 
	`Êash_is_busy
(
m≠
, 
adr
, 
¥iv©e
->
öãæóve
)) {

929 i‡(
	`√ed_ªsched
()) {

930 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

931 
	`scheduÀ
();

932 
	`•ö_lock_bh
(
chù
->
muãx
);

936 i‡(!
times_À·
) {

937 
	`¥ötk
(
KERN_WARNING
 "%s: writeÅo 0x%lxÅimed out!\n",

938 
m≠
->
«me
, 
adr
);

939 
ªt
 = -
EIO
;

941 
__u32
 
vîify
;

942 i‡((
vîify
 = 
	`wide_ªad
(
m≠
, 
adr
)Ë!
d©um
) {

943 
	`¥ötk
(
KERN_WARNING
 "%s: writeÅo 0x%lx failed. "

945 
m≠
->
«me
, 
adr
, 
d©um
, 
vîify
);

946 
ªt
 = -
EIO
;

950 
	`DISABLE_VPP
(
m≠
);

951 
chù
->
°©e
 = 
FL_READY
;

952 
	`wake_up
(&
chù
->
wq
);

953 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

955  
ªt
;

956 
	}
}

960 
	$amd_Êash_wrôe
(
mtd_öfo
 *
mtd
, 
loff_t
 
to
 , 
size_t
 
Àn
,

961 
size_t
 *
ªéí
, c⁄° 
u_ch¨
 *
buf
)

963 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

964 
amd_Êash_¥iv©e
 *
¥iv©e
 = 
m≠
->
Êdrv_¥iv
;

965 
ªt
 = 0;

966 
chùnum
;

967 
ofs
;

968 
chù°¨t
;

970 *
ªéí
 = 0;

971 i‡(!
Àn
) {

975 
chùnum
 = 
to
 >> 
¥iv©e
->
chùshi·
;

976 
ofs
 = 
to
 - (
chùnum
 << 
¥iv©e
->
chùshi·
);

977 
chù°¨t
 = 
¥iv©e
->
chùs
[
chùnum
].
°¨t
;

980 i‡(
ofs
 & (
m≠
->
buswidth
 - 1)) {

981 
bus_ofs
 = 
ofs
 & ~(
m≠
->
buswidth
 - 1);

982 
i
 = 
ofs
 - 
bus_ofs
;

983 
n
 = 0;

984 
u_ch¨
 
tmp_buf
[4];

985 
__u32
 
d©um
;

987 
m≠
->
	`c›y_‰om
(m≠, 
tmp_buf
,

988 
bus_ofs
 + 
¥iv©e
->
chùs
[
chùnum
].
°¨t
,

989 
m≠
->
buswidth
);

990 
Àn
 && 
i
 < 
m≠
->
buswidth
)

991 
tmp_buf
[
i
++] = 
buf
[
n
++], 
Àn
--;

993 i‡(
m≠
->
buswidth
 == 2) {

994 
d©um
 = *(
__u16
*)
tmp_buf
;

995 } i‡(
m≠
->
buswidth
 == 4) {

996 
d©um
 = *(
__u32
*)
tmp_buf
;

998  -
EINVAL
;

1001 
ªt
 = 
	`wrôe_⁄e_w‹d
(
m≠
, &
¥iv©e
->
chùs
[
chùnum
], 
bus_ofs
,

1002 
d©um
);

1003 i‡(
ªt
) {

1004  
ªt
;

1007 
ofs
 +
n
;

1008 
buf
 +
n
;

1009 (*
ªéí
Ë+
n
;

1011 i‡(
ofs
 >> 
¥iv©e
->
chùshi·
) {

1012 
chùnum
++;

1013 
ofs
 = 0;

1014 i‡(
chùnum
 =
¥iv©e
->
numchùs
) {

1021 
Àn
 >
m≠
->
buswidth
) {

1022 
__u32
 
d©um
;

1024 i‡(
m≠
->
buswidth
 == 1) {

1025 
d©um
 = *(
__u8
*)
buf
;

1026 } i‡(
m≠
->
buswidth
 == 2) {

1027 
d©um
 = *(
__u16
*)
buf
;

1028 } i‡(
m≠
->
buswidth
 == 4) {

1029 
d©um
 = *(
__u32
*)
buf
;

1031  -
EINVAL
;

1034 
ªt
 = 
	`wrôe_⁄e_w‹d
(
m≠
, &
¥iv©e
->
chùs
[
chùnum
], 
ofs
, 
d©um
);

1036 i‡(
ªt
) {

1037  
ªt
;

1040 
ofs
 +
m≠
->
buswidth
;

1041 
buf
 +
m≠
->
buswidth
;

1042 (*
ªéí
Ë+
m≠
->
buswidth
;

1043 
Àn
 -
m≠
->
buswidth
;

1045 i‡(
ofs
 >> 
¥iv©e
->
chùshi·
) {

1046 
chùnum
++;

1047 
ofs
 = 0;

1048 i‡(
chùnum
 =
¥iv©e
->
numchùs
) {

1051 
chù°¨t
 = 
¥iv©e
->
chùs
[
chùnum
].
°¨t
;

1055 i‡(
Àn
 & (
m≠
->
buswidth
 - 1)) {

1056 
i
 = 0, 
n
 = 0;

1057 
u_ch¨
 
tmp_buf
[2];

1058 
__u32
 
d©um
;

1060 
m≠
->
	`c›y_‰om
(m≠, 
tmp_buf
,

1061 
ofs
 + 
¥iv©e
->
chùs
[
chùnum
].
°¨t
,

1062 
m≠
->
buswidth
);

1063 
Àn
--) {

1064 
tmp_buf
[
i
++] = 
buf
[
n
++];

1067 i‡(
m≠
->
buswidth
 == 2) {

1068 
d©um
 = *(
__u16
*)
tmp_buf
;

1069 } i‡(
m≠
->
buswidth
 == 4) {

1070 
d©um
 = *(
__u32
*)
tmp_buf
;

1072  -
EINVAL
;

1075 
ªt
 = 
	`wrôe_⁄e_w‹d
(
m≠
, &
¥iv©e
->
chùs
[
chùnum
], 
ofs
, 
d©um
);

1077 i‡(
ªt
) {

1078  
ªt
;

1081 (*
ªéí
Ë+
n
;

1085 
	}
}

1089 
ölöe
 
	$îa£_⁄e_block
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
,

1090 
adr
, 
u_l⁄g
 
size
)

1092 
timeo
 = 
jiffõs
 + 
HZ
;

1093 
amd_Êash_¥iv©e
 *
¥iv©e
 = 
m≠
->
Êdrv_¥iv
;

1094 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

1096 
ªåy
:

1097 
	`•ö_lock_bh
(
chù
->
muãx
);

1099 i‡(
chù
->
°©e
 !
FL_READY
){

1100 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

1101 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

1103 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1105 
	`scheduÀ
();

1106 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

1108 i‡(
	`sig«l_≥ndög
(
cuºít
)) {

1109  -
EINTR
;

1112 
timeo
 = 
jiffõs
 + 
HZ
;

1114 
ªåy
;

1117 
chù
->
°©e
 = 
FL_ERASING
;

1119 
adr
 +
chù
->
°¨t
;

1120 
	`ENABLE_VPP
(
m≠
);

1121 
	`£nd_cmd
(
m≠
, 
chù
->
°¨t
, 
CMD_SECTOR_ERASE_UNLOCK_DATA
);

1122 
	`£nd_cmd_to_addr
(
m≠
, 
chù
->
°¨t
, 
CMD_SECTOR_ERASE_UNLOCK_DATA_2
, 
adr
);

1124 
timeo
 = 
jiffõs
 + (
HZ
 * 20);

1126 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1127 
	`scheduÀ_timeout
(
HZ
);

1128 
	`•ö_lock_bh
(
chù
->
muãx
);

1130 
	`Êash_is_busy
(
m≠
, 
adr
, 
¥iv©e
->
öãæóve
)) {

1132 i‡(
chù
->
°©e
 !
FL_ERASING
) {

1134 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

1135 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

1137 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1138 
	`¥ötk
(
KERN_INFO
 "%s:Érase suspended. Sleeping\n",

1139 
m≠
->
«me
);

1140 
	`scheduÀ
();

1141 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

1143 i‡(
	`sig«l_≥ndög
(
cuºít
)) {

1144  -
EINTR
;

1147 
timeo
 = 
jiffõs
 + (
HZ
*2);

1148 
	`•ö_lock_bh
(
chù
->
muãx
);

1153 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

1154 
chù
->
°©e
 = 
FL_READY
;

1155 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1156 
	`¥ötk
(
KERN_WARNING
 "%s: waiting forÉraseÅo complete "

1157 "timed out.\n", 
m≠
->
«me
);

1158 
	`DISABLE_VPP
(
m≠
);

1160  -
EIO
;

1164 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1166 i‡(
	`√ed_ªsched
())

1167 
	`scheduÀ
();

1169 
	`udñay
(1);

1171 
	`•ö_lock_bh
(
chù
->
muãx
);

1176 
addªss
;

1177 
îr‹
 = 0;

1178 
__u8
 
vîify
;

1180 
addªss
 = 
adr
;áddªs†< (ad∏+ 
size
);áddress++) {

1181 i‡((
vîify
 = 
m≠
->
	`ªad8
(m≠, 
addªss
)) != 0xFF) {

1182 
îr‹
 = 1;

1186 i‡(
îr‹
) {

1187 
chù
->
°©e
 = 
FL_READY
;

1188 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1189 
	`¥ötk
(
KERN_WARNING


1191 
m≠
->
«me
, 
addªss
, 
size
);

1192 
	`DISABLE_VPP
(
m≠
);

1194  -
EIO
;

1198 
	`DISABLE_VPP
(
m≠
);

1199 
chù
->
°©e
 = 
FL_READY
;

1200 
	`wake_up
(&
chù
->
wq
);

1201 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1204 
	}
}

1208 
	$amd_Êash_îa£
(
mtd_öfo
 *
mtd
, 
îa£_öfo
 *
ö°r
)

1210 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1211 
amd_Êash_¥iv©e
 *
¥iv©e
 = 
m≠
->
Êdrv_¥iv
;

1212 
adr
, 
Àn
;

1213 
chùnum
;

1214 
ªt
 = 0;

1215 
i
;

1216 
fú°
;

1217 
mtd_îa£_ªgi⁄_öfo
 *
ªgi⁄s
 = 
mtd
->
îa£ªgi⁄s
;

1219 i‡(
ö°r
->
addr
 > 
mtd
->
size
) {

1220  -
EINVAL
;

1223 i‡((
ö°r
->
Àn
 + in°r->
addr
Ë> 
mtd
->
size
) {

1224  -
EINVAL
;

1231 
i
 = 0;

1239 (
i
 < 
mtd
->
numîa£ªgi⁄s
) &&

1240 (
ö°r
->
addr
 >
ªgi⁄s
[
i
].
off£t
)) {

1241 
i
++;

1243 
i
--;

1251 i‡(
ö°r
->
addr
 & (
ªgi⁄s
[
i
].
îa£size
-1)) {

1252  -
EINVAL
;

1257 
fú°
 = 
i
;

1263 (
i
 < 
mtd
->
numîa£ªgi⁄s
) &&

1264 ((
ö°r
->
addr
 + in°r->
Àn
Ë>
ªgi⁄s
[
i
].
off£t
)) {

1265 
i
++;

1272 
i
--;

1274 i‡((
ö°r
->
addr
 + in°r->
Àn
Ë& (
ªgi⁄s
[
i
].
îa£size
-1)) {

1275  -
EINVAL
;

1278 
chùnum
 = 
ö°r
->
addr
 >> 
¥iv©e
->
chùshi·
;

1279 
adr
 = 
ö°r
->
addr
 - (
chùnum
 << 
¥iv©e
->
chùshi·
);

1280 
Àn
 = 
ö°r
->len;

1282 
i
 = 
fú°
;

1284 
Àn
) {

1285 
ªt
 = 
	`îa£_⁄e_block
(
m≠
, &
¥iv©e
->
chùs
[
chùnum
], 
adr
,

1286 
ªgi⁄s
[
i
].
îa£size
);

1288 i‡(
ªt
) {

1289  
ªt
;

1292 
adr
 +
ªgi⁄s
[
i
].
îa£size
;

1293 
Àn
 -
ªgi⁄s
[
i
].
îa£size
;

1295 i‡((
adr
 % (1 << 
¥iv©e
->
chùshi·
)) ==

1296 ((
ªgi⁄s
[
i
].
off£t
 + (ªgi⁄s[i].
îa£size
 *

1297 
ªgi⁄s
[
i
].
numblocks
))

1298 % (1 << 
¥iv©e
->
chùshi·
))) {

1299 
i
++;

1302 i‡(
adr
 >> 
¥iv©e
->
chùshi·
) {

1303 
adr
 = 0;

1304 
chùnum
++;

1305 i‡(
chùnum
 >
¥iv©e
->
numchùs
) {

1311 
ö°r
->
°©e
 = 
MTD_ERASE_DONE
;

1312 i‡(
ö°r
->
ˇŒback
) {

1313 
ö°r
->
	`ˇŒback
(instr);

1317 
	}
}

1321 
	$amd_Êash_sync
(
mtd_öfo
 *
mtd
)

1323 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1324 
amd_Êash_¥iv©e
 *
¥iv©e
 = 
m≠
->
Êdrv_¥iv
;

1325 
i
;

1326 
Êchù
 *
chù
;

1327 
ªt
 = 0;

1328 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

1330 
i
 = 0; !
ªt
 && (ò< 
¥iv©e
->
numchùs
); i++) {

1331 
chù
 = &
¥iv©e
->
chùs
[
i
];

1333 
ªåy
:

1334 
	`•ö_lock_bh
(
chù
->
muãx
);

1336 
chù
->
°©e
) {

1337 
FL_READY
:

1338 
FL_STATUS
:

1339 
FL_CFI_QUERY
:

1340 
FL_JEDEC_QUERY
:

1341 
chù
->
ﬁd°©e
 = chù->
°©e
;

1342 
chù
->
°©e
 = 
FL_SYNCING
;

1347 
FL_SYNCING
:

1348 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1353 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

1355 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1357 
	`scheduÀ
();

1359 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

1361 
ªåy
;

1366 
i
--; i >= 0; i--) {

1367 
chù
 = &
¥iv©e
->
chùs
[
i
];

1369 
	`•ö_lock_bh
(
chù
->
muãx
);

1371 i‡(
chù
->
°©e
 =
FL_SYNCING
) {

1372 
chù
->
°©e
 = chù->
ﬁd°©e
;

1373 
	`wake_up
(&
chù
->
wq
);

1375 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1377 
	}
}

1381 
	$amd_Êash_su•íd
(
mtd_öfo
 *
mtd
)

1383 
	`¥ötk
("amd_flash_suspend():Çot implemented!\n");

1384  -
EINVAL
;

1385 
	}
}

1389 
	$amd_Êash_ªsume
(
mtd_öfo
 *
mtd
)

1391 
	`¥ötk
("amd_flash_resume():Çot implemented!\n");

1392 
	}
}

1396 
	$amd_Êash_de°roy
(
mtd_öfo
 *
mtd
)

1398 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1399 
amd_Êash_¥iv©e
 *
¥iv©e
 = 
m≠
->
Êdrv_¥iv
;

1400 
	`k‰ì
(
¥iv©e
);

1401 
	}
}

1403 
__öô
 
	$amd_Êash_öô
()

1405 
	`ªgi°î_mtd_chù_drivî
(&
amd_Êash_chùdrv
);

1407 
	}
}

1409 
__exô
 
	$amd_Êash_exô
()

1411 
	`uƒegi°î_mtd_chù_drivî
(&
amd_Êash_chùdrv
);

1412 
	}
}

1414 
moduÀ_öô
(
amd_Êash_öô
);

1415 
moduÀ_exô
(
amd_Êash_exô
);

1417 
MODULE_LICENSE
("GPL");

1418 
MODULE_AUTHOR
("Jonas Holmberg <jonas.holmberg@axis.com>");

1419 
MODULE_DESCRIPTION
("Old MTD chip driver for AMD flash chips");

	@cfi_cmdset_0001.c

20 
	~<löux/moduÀ.h
>

21 
	~<löux/ty≥s.h
>

22 
	~<löux/kî√l.h
>

23 
	~<löux/sched.h
>

24 
	~<asm/io.h
>

25 
	~<asm/byã‹dî.h
>

27 
	~<löux/î∫o.h
>

28 
	~<löux/¶ab.h
>

29 
	~<löux/dñay.h
>

30 
	~<löux/öãºu±.h
>

31 
	~<löux/mtd/m≠.h
>

32 
	~<löux/mtd/cfi.h
>

33 
	~<löux/mtd/com∑tmac.h
>

37 
cfi_öãÀxt_ªad
 (
mtd_öfo
 *, 
loff_t
, 
size_t
, size_à*, 
u_ch¨
 *);

38 
cfi_öãÀxt_ªad_u£r_¥Ÿ_ªg
 (
mtd_öfo
 *, 
loff_t
, 
size_t
, size_à*, 
u_ch¨
 *);

39 
cfi_öãÀxt_ªad_Á˘_¥Ÿ_ªg
 (
mtd_öfo
 *, 
loff_t
, 
size_t
, size_à*, 
u_ch¨
 *);

40 
cfi_öãÀxt_wrôe_w‹ds
(
mtd_öfo
 *, 
loff_t
, 
size_t
, size_à*, c⁄° 
u_ch¨
 *);

41 
cfi_öãÀxt_wrôe_buf„rs
(
mtd_öfo
 *, 
loff_t
, 
size_t
, size_à*, c⁄° 
u_ch¨
 *);

42 
cfi_öãÀxt_îa£_v¨size
(
mtd_öfo
 *, 
îa£_öfo
 *);

43 
cfi_öãÀxt_sync
 (
mtd_öfo
 *);

44 
cfi_öãÀxt_lock
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
, 
size_t
 
Àn
);

45 
cfi_öãÀxt_u∆ock
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
, 
size_t
 
Àn
);

46 
cfi_öãÀxt_su•íd
 (
mtd_öfo
 *);

47 
cfi_öãÀxt_ªsume
 (
mtd_öfo
 *);

49 
cfi_öãÀxt_de°roy
(
mtd_öfo
 *);

51 
mtd_öfo
 *
cfi_cmd£t_0001
(
m≠_öfo
 *, );

53 
mtd_öfo
 *
cfi_öãÀxt_£tup
 (
m≠_öfo
 *);

55 
do_poöt
 (
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
,

56 
size_t
 *
ªéí
, 
u_ch¨
 **
mtdbuf
);

57 
do_u≈oöt
 (
mtd_öfo
 *
mtd
, 
u_ch¨
 *
addr
, 
loff_t
 
‰om
,

58 
size_t
 
Àn
);

60 
mtd_chù_drivî
 
	gcfi_öãÀxt_chùdrv
 = {

61 
¥obe
: 
NULL
,

62 
de°roy
: 
cfi_öãÀxt_de°roy
,

63 
«me
: "cfi_cmdset_0001",

64 
moduÀ
: 
THIS_MODULE


70 #ifde‡
DEBUG_CFI_FEATURES


71 
	$cfi_ãŒ_„©uªs
(
cfi_¥i_öãÀxt
 *
exç
)

73 
i
;

74 
	`¥ötk
(" Fótuª/Comm™d Suµ‹t: %4.4X\n", 
exç
->
FótuªSuµ‹t
);

75 
	`¥ötk
(" - Chù Eø£: %s\n", 
exç
->
FótuªSuµ‹t
&1?"supported":"unsupported");

76 
	`¥ötk
(" - Su•íd Eø£: %s\n", 
exç
->
FótuªSuµ‹t
&2?"supported":"unsupported");

77 
	`¥ötk
(" - Su•íd Progøm: %s\n", 
exç
->
FótuªSuµ‹t
&4?"supported":"unsupported");

78 
	`¥ötk
(" - Legacy Lock/U∆ock: %s\n", 
exç
->
FótuªSuµ‹t
&8?"supported":"unsupported");

79 
	`¥ötk
(" - Queued Eø£: %s\n", 
exç
->
FótuªSuµ‹t
&16?"supported":"unsupported");

80 
	`¥ötk
(" - In°™àblockÜock: %s\n", 
exç
->
FótuªSuµ‹t
&32?"supported":"unsupported");

81 
	`¥ötk
(" - PrŸe˘i⁄ Bôs: %s\n", 
exç
->
FótuªSuµ‹t
&64?"supported":"unsupported");

82 
	`¥ötk
(" - Page-modêªad: %s\n", 
exç
->
FótuªSuµ‹t
&128?"supported":"unsupported");

83 
	`¥ötk
(" - Synchr⁄ou†ªad: %s\n", 
exç
->
FótuªSuµ‹t
&256?"supported":"unsupported");

84 
i
=9; i<32; i++) {

85 i‡(
exç
->
FótuªSuµ‹t
 & (1<<
i
))

86 
	`¥ötk
(" - Unknow¿Bô %X: suµ‹ãd\n", 
i
);

89 
	`¥ötk
(" Suµ‹ãd fun˘i⁄†a·î Su•íd: %2.2X\n", 
exç
->
Su•ídCmdSuµ‹t
);

90 
	`¥ötk
(" - Progømá·î Eø£ Su•íd: %s\n", 
exç
->
Su•ídCmdSuµ‹t
&1?"supported":"unsupported");

91 
i
=1; i<8; i++) {

92 i‡(
exç
->
Su•ídCmdSuµ‹t
 & (1<<
i
))

93 
	`¥ötk
(" - Unknow¿Bô %X: suµ‹ãd\n", 
i
);

96 
	`¥ötk
(" Block Sètu†Regi°î Mask: %4.4X\n", 
exç
->
BlkSètusRegMask
);

97 
	`¥ötk
(" - Lock Bô A˘ive: %s\n", 
exç
->
BlkSètusRegMask
&1?"yes":"no");

98 
	`¥ötk
(" - VÆid Bô A˘ive: %s\n", 
exç
->
BlkSètusRegMask
&2?"yes":"no");

99 
i
=2; i<16; i++) {

100 i‡(
exç
->
BlkSètusRegMask
 & (1<<
i
))

101 
	`¥ötk
(" - Unknow¿Bô %X A˘ive: yes\n",
i
);

104 
	`¥ötk
(" Vcc Logic Supply Optimum Program/Erase Voltage: %d.%d V\n",

105 
exç
->
VccO±imÆ
 >> 8,Éxtp->VccOptimal & 0xf);

106 i‡(
exç
->
VµO±imÆ
)

107 
	`¥ötk
(" Vpp Programming Supply Optimum Program/Erase Voltage: %d.%d V\n",

108 
exç
->
VµO±imÆ
 >> 8,Éxtp->VppOptimal & 0xf);

109 
	}
}

119 
mtd_öfo
 *
	$cfi_cmd£t_0001
(
m≠_öfo
 *
m≠
, 
¥im¨y
)

121 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

122 
i
;

123 
__u32
 
ba£
 = 
cfi
->
chùs
[0].
°¨t
;

125 i‡(
cfi
->
cfi_mode
 =
CFI_MODE_CFI
) {

131 
__u16
 
adr
 = 
¥im¨y
?
cfi
->
cfiq
->
P_ADR
:cfi->cfiq->
A_ADR
;

132 
cfi_¥i_öãÀxt
 *
exç
;

133 
ofs_Á˘‹
 = 
cfi
->
öãæóve
 * cfi->
devi˚_ty≥
;

136 i‡(!
adr
)

137  
NULL
;

140 
	`cfi_£nd_gí_cmd
(0x98, 0x55, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

142 
exç
 = 
	`kmÆloc
((*exç), 
GFP_KERNEL
);

143 i‡(!
exç
) {

144 
	`¥ötk
(
KERN_ERR
 "FailedÅoállocate memory\n");

145  
NULL
;

149 
i
=0; i<(*
exç
); i++) {

150 ((*)
exç
)[
i
] =

151 
	`cfi_ªad_quîy
(
m≠
, (
ba£
+((
adr
+
i
)*
ofs_Á˘‹
)));

154 i‡(
exç
->
Maj‹Vîsi⁄
 != '1' ||

155 (
exç
->
Mö‹Vîsi⁄
 < '0' ||Éxtp->MinorVersion > '3')) {

156 
	`¥ötk
(
KERN_WARNING
 " Unknown IntelExt Extended Query "

157 "vîsi⁄ %c.%c.\n", 
exç
->
Maj‹Vîsi⁄
,

158 
exç
->
Mö‹Vîsi⁄
);

159 
	`k‰ì
(
exç
);

160  
NULL
;

164 
exç
->
FótuªSuµ‹t
 = 
	`À32_to_˝u
(extp->FeatureSupport);

165 
exç
->
BlkSètusRegMask
 = 
	`À16_to_˝u
(extp->BlkStatusRegMask);

166 
exç
->
PrŸRegAddr
 = 
	`À16_to_˝u
(extp->ProtRegAddr);

168 #ifde‡
DEBUG_CFI_FEATURES


170 
	`cfi_ãŒ_„©uªs
(
exç
);

173 if(
exç
->
Su•ídCmdSuµ‹t
 & 1) {

175 #ifde‡
CMDSET0001_DISABLE_ERASE_SUSPEND_ON_WRITE


177 
	`¥ötk
(
KERN_WARNING
 "cfi_cmdset_0001: Suspend "

179 
exç
->
Su•ídCmdSuµ‹t
 &= ~1;

181 
	`¥ötk
(
KERN_NOTICE
 "cfi_cmdset_0001: Erase suspend on writeÉnabled\n");

185 
cfi
->
cmd£t_¥iv
 = 
exç
;

188 
i
=0; i< 
cfi
->
numchùs
; i++) {

189 
cfi
->
chùs
[
i
].
w‹d_wrôe_time
 = 1<<cfi->
cfiq
->
W‹dWrôeTimeoutTyp
;

190 
cfi
->
chùs
[
i
].
buf„r_wrôe_time
 = 1<<cfi->
cfiq
->
BufWrôeTimeoutTyp
;

191 
cfi
->
chùs
[
i
].
îa£_time
 = 1<<cfi->
cfiq
->
BlockEø£TimeoutTyp
;

192 
cfi
->
chùs
[
i
].
ªf_poöt_cou¡î
 = 0;

195 
m≠
->
Êdrv
 = &
cfi_öãÀxt_chùdrv
;

198 
	`cfi_£nd_gí_cmd
(0xff, 0x55, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

199  
	`cfi_öãÀxt_£tup
(
m≠
);

200 
	}
}

202 
mtd_öfo
 *
	$cfi_öãÀxt_£tup
(
m≠_öfo
 *
m≠
)

204 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

205 
mtd_öfo
 *
mtd
;

206 
off£t
 = 0;

207 
i
,
j
;

208 
devsize
 = (1<<
cfi
->
cfiq
->
DevSize
Ë* cfi->
öãæóve
;

210 
mtd
 = 
	`kmÆloc
((*mtd), 
GFP_KERNEL
);

213 i‡(!
mtd
) {

214 
	`¥ötk
(
KERN_ERR
 "FailedÅoállocate memory for MTD device\n");

215 
£tup_îr
;

218 
	`mem£t
(
mtd
, 0, (*mtd));

219 
mtd
->
¥iv
 = 
m≠
;

220 
mtd
->
ty≥
 = 
MTD_NORFLASH
;

221 
mtd
->
size
 = 
devsize
 * 
cfi
->
numchùs
;

223 
mtd
->
numîa£ªgi⁄s
 = 
cfi
->
cfiq
->
NumEø£Regi⁄s
 * cfi->
numchùs
;

224 
mtd
->
îa£ªgi⁄s
 = 
	`kmÆloc
((
mtd_îa£_ªgi⁄_öfo
)

225 * 
mtd
->
numîa£ªgi⁄s
, 
GFP_KERNEL
);

226 i‡(!
mtd
->
îa£ªgi⁄s
) {

227 
	`¥ötk
(
KERN_ERR
 "FailedÅoállocate memory for MTDÉraseÑegion info\n");

228 
£tup_îr
;

231 
i
=0; i<
cfi
->
cfiq
->
NumEø£Regi⁄s
; i++) {

232 
înum
, 
îsize
;

233 
îsize
 = ((
cfi
->
cfiq
->
Eø£Regi⁄Info
[
i
] >> 8Ë& ~0xffË* cfi->
öãæóve
;

234 
înum
 = (
cfi
->
cfiq
->
Eø£Regi⁄Info
[
i
] & 0xffff) + 1;

236 i‡(
mtd
->
îa£size
 < 
îsize
) {

237 
mtd
->
îa£size
 = 
îsize
;

239 
j
=0; j<
cfi
->
numchùs
; j++) {

240 
mtd
->
îa£ªgi⁄s
[(
j
*
cfi
->
cfiq
->
NumEø£Regi⁄s
)+
i
].
off£t
 = (j*
devsize
)+offset;

241 
mtd
->
îa£ªgi⁄s
[(
j
*
cfi
->
cfiq
->
NumEø£Regi⁄s
)+
i
].
îa£size
 = 
îsize
;

242 
mtd
->
îa£ªgi⁄s
[(
j
*
cfi
->
cfiq
->
NumEø£Regi⁄s
)+
i
].
numblocks
 = 
înum
;

244 
off£t
 +(
îsize
 * 
înum
);

247 i‡(
off£t
 !
devsize
) {

249 
	`¥ötk
(
KERN_WARNING
 "Sum o‡ªgi⁄†(%lxË!tŸÆ sizêo‡£ào‡öãæóved chù†(%lx)\n", 
off£t
, 
devsize
);

250 
£tup_îr
;

253 
i
=0; i<
mtd
->
numîa£ªgi⁄s
;i++){

254 
	`¥ötk
(
KERN_DEBUG
 "%d: offset=0x%x,size=0x%x,blocks=%d\n",

255 
i
,
mtd
->
îa£ªgi⁄s
[i].
off£t
,

256 
mtd
->
îa£ªgi⁄s
[
i
].
îa£size
,

257 
mtd
->
îa£ªgi⁄s
[
i
].
numblocks
);

261 
mtd
->
îa£
 = 
cfi_öãÀxt_îa£_v¨size
;

262 
mtd
->
ªad
 = 
cfi_öãÀxt_ªad
;

264 if(
m≠
->
poöt
 && m≠->
u≈oöt
){

265 
mtd
->
poöt
 = 
do_poöt
;

266 
mtd
->
u≈oöt
 = 
do_u≈oöt
;

269 #i‚de‡
FORCE_WORD_WRITE


270 i‡–
cfi
->
cfiq
->
BufWrôeTimeoutTyp
 ) {

271 
	`¥ötk
("Using buffer write method\n" );

272 
mtd
->
wrôe
 = 
cfi_öãÀxt_wrôe_buf„rs
;

277 
	`¥ötk
("Using word write method\n" );

278 
mtd
->
wrôe
 = 
cfi_öãÀxt_wrôe_w‹ds
;

280 
mtd
->
ªad_u£r_¥Ÿ_ªg
 = 
cfi_öãÀxt_ªad_u£r_¥Ÿ_ªg
;

281 
mtd
->
ªad_Á˘_¥Ÿ_ªg
 = 
cfi_öãÀxt_ªad_Á˘_¥Ÿ_ªg
;

282 
mtd
->
sync
 = 
cfi_öãÀxt_sync
;

283 
mtd
->
lock
 = 
cfi_öãÀxt_lock
;

284 
mtd
->
u∆ock
 = 
cfi_öãÀxt_u∆ock
;

285 
mtd
->
su•íd
 = 
cfi_öãÀxt_su•íd
;

286 
mtd
->
ªsume
 = 
cfi_öãÀxt_ªsume
;

287 
mtd
->
Êags
 = 
MTD_CAP_NORFLASH
;

288 
m≠
->
Êdrv
 = &
cfi_öãÀxt_chùdrv
;

289 
MOD_INC_USE_COUNT
;

290 
mtd
->
«me
 = 
m≠
->name;

291  
mtd
;

293 
£tup_îr
:

294 if(
mtd
) {

295 if(
mtd
->
îa£ªgi⁄s
)

296 
	`k‰ì
(
mtd
->
îa£ªgi⁄s
);

297 
	`k‰ì
(
mtd
);

299 
	`k‰ì
(
cfi
->
cmd£t_¥iv
);

300 
	`k‰ì
(
cfi
->
cfiq
);

301  
NULL
;

302 
	}
}

304 
	$do_poöt_⁄echù
 (
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
, 
loff_t
 
adr
, 
size_t
 
Àn
)

306 
cfi_w‹d
 
°©us
, 
°©us_OK
;

307 
timeo
;

308 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

309 
cmd_addr
;

310 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

312 
adr
 +
chù
->
°¨t
;

315 
cmd_addr
 = 
adr
 & ~(
CFIDEV_BUSWIDTH
-1);

318 
°©us_OK
 = 
	`CMD
(0x80);

320 
timeo
 = 
jiffõs
 + 
HZ
;

321 
ªåy
:

322 
	`•ö_lock
(
chù
->
muãx
);

327 
chù
->
°©e
) {

329 
FL_READY
:

330 
FL_POINT
:

333 
FL_CFI_QUERY
:

334 
FL_JEDEC_QUERY
:

335 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
cmd_addr
);

336 
chù
->
°©e
 = 
FL_STATUS
;

338 
FL_STATUS
:

339 
°©us
 = 
	`cfi_ªad
(
m≠
, 
cmd_addr
);

340 i‡((
°©us
 & 
°©us_OK
) == status_OK) {

341 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xff), 
cmd_addr
);

342 
chù
->
°©e
 = 
FL_READY
;

347 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

348 
	`•ö_u∆ock
(
chù
->
muãx
);

349 
	`¥ötk
(
KERN_ERR
 "waôög f‹ chùÅÿbêªadyÅimed ouàöÑód. WSM sètu†%Œx\n", (
__u64
)
°©us
);

350  -
EIO
;

354 
	`•ö_u∆ock
(
chù
->
muãx
);

355 
	`cfi_udñay
(1);

356 
ªåy
;

361 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

362 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

363 
	`•ö_u∆ock
(
chù
->
muãx
);

364 
	`scheduÀ
();

365 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

366 
timeo
 = 
jiffõs
 + 
HZ
;

367 
ªåy
;

370 
chù
->
°©e
 = 
FL_POINT
;

371 
chù
->
ªf_poöt_cou¡î
++;

372 
	`•ö_u∆ock
(
chù
->
muãx
);

374 
	}
}

375 
	$do_poöt
 (
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
, size_à*
ªéí
, 
u_ch¨
 **
mtdbuf
)

377 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

378 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

379 
ofs
;

380 
chùnum
;

381 
ªt
 = 0;

383 i‡(
‰om
 + 
Àn
 > 
mtd
->
size
)

384  -
EINVAL
;

386 *
mtdbuf
 = 
m≠
->
	`poöt
(m≠, 
‰om
, 
Àn
);

387 if(*
mtdbuf
 =
NULL
)

388  -
EINVAL
;

389 *
ªéí
 = 0;

394 
chùnum
 = (
‰om
 >> 
cfi
->
chùshi·
);

395 
ofs
 = 
‰om
 - (
chùnum
 << 
cfi
->
chùshi·
);

397 
Àn
) {

398 
thi¶í
;

400 i‡(
chùnum
 >
cfi
->
numchùs
)

403 i‡((
Àn
 + 
ofs
 -1Ë>> 
cfi
->
chùshi·
)

404 
thi¶í
 = (1<<
cfi
->
chùshi·
Ë- 
ofs
;

406 
thi¶í
 = 
Àn
;

408 
ªt
 = 
	`do_poöt_⁄echù
(
m≠
, &
cfi
->
chùs
[
chùnum
], 
ofs
, 
thi¶í
);

409 i‡(
ªt
)

412 *
ªéí
 +
thi¶í
;

413 
Àn
 -
thi¶í
;

415 
ofs
 = 0;

416 
chùnum
++;

419 
	}
}

421 
	$do_u≈oöt
 (
mtd_öfo
 *
mtd
, 
u_ch¨
 *
addr
, 
loff_t
 
‰om
, 
size_t
 
Àn
)

423 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

424 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

425 
ofs
;

426 
chùnum
;

428 
m≠
->
	`u≈oöt
(m≠, 
addr
, 
‰om
, 
Àn
);

432 
chùnum
 = (
‰om
 >> 
cfi
->
chùshi·
);

433 
ofs
 = 
‰om
 - (
chùnum
 << 
cfi
->
chùshi·
);

435 
Àn
) {

436 
thi¶í
;

437 
Êchù
 *
chù
;

439 
chù
 = &
cfi
->
chùs
[
chùnum
];

440 i‡(
chùnum
 >
cfi
->
numchùs
)

443 i‡((
Àn
 + 
ofs
 -1Ë>> 
cfi
->
chùshi·
)

444 
thi¶í
 = (1<<
cfi
->
chùshi·
Ë- 
ofs
;

446 
thi¶í
 = 
Àn
;

448 
	`•ö_lock
(
chù
->
muãx
);

449 if(
chù
->
°©e
 =
FL_POINT
){

450 
chù
->
ªf_poöt_cou¡î
--;

451 if(
chù
->
ªf_poöt_cou¡î
 == 0)

452 
chù
->
°©e
 = 
FL_READY
;

454 
	`¥ötk
("Warning: unpoint called onÇonÖointedÑegion\n");

455 
	`wake_up
(&
chù
->
wq
);

456 
	`•ö_u∆ock
(
chù
->
muãx
);

458 
Àn
 -
thi¶í
;

459 
ofs
 = 0;

460 
chùnum
++;

462 
	}
}

464 
ölöe
 
	$do_ªad_⁄echù
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
, 
loff_t
 
adr
, 
size_t
 
Àn
, 
u_ch¨
 *
buf
)

466 
cfi_w‹d
 
°©us
, 
°©us_OK
;

467 
timeo
;

468 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

469 
su•íded
 = 0;

470 
cmd_addr
;

471 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

473 
adr
 +
chù
->
°¨t
;

476 
cmd_addr
 = 
adr
 & ~(
CFIDEV_BUSWIDTH
-1);

479 
°©us_OK
 = 
	`CMD
(0x80);

481 
timeo
 = 
jiffõs
 + 
HZ
;

482 
ªåy
:

483 
	`•ö_lock
(
chù
->
muãx
);

488 
chù
->
°©e
) {

489 
FL_ERASING
:

490 i‡(!
cfi
->
cmd£t_¥iv
 ||

491 !(((
cfi_¥i_öãÀxt
 *)
cfi
->
cmd£t_¥iv
)->
FótuªSuµ‹t
 & 2))

492 
¶ìp
;

494 
	`cfi_wrôe
 (
m≠
, 
	`CMD
(0xb0), 
cmd_addr
);

500 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
cmd_addr
);

501 
chù
->
ﬁd°©e
 = 
FL_ERASING
;

502 
chù
->
°©e
 = 
FL_ERASE_SUSPENDING
;

505 
°©us
 = 
	`cfi_ªad
(
m≠
, 
cmd_addr
);

506 i‡((
°©us
 & 
°©us_OK
) == status_OK)

509 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

511 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xd0), 
cmd_addr
);

513 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
cmd_addr
);

514 
chù
->
°©e
 = 
FL_ERASING
;

515 
	`•ö_u∆ock
(
chù
->
muãx
);

516 
	`¥ötk
(
KERN_ERR
 "ChipÇotÑeadyáfterÉrase "

517 "su•íded: sètu†0x%Œx\n", (
__u64
)
°©us
);

518  -
EIO
;

521 
	`•ö_u∆ock
(
chù
->
muãx
);

522 
	`cfi_udñay
(1);

523 
	`•ö_lock
(
chù
->
muãx
);

526 
su•íded
 = 1;

527 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xff), 
cmd_addr
);

528 
chù
->
°©e
 = 
FL_READY
;

532 
FL_WRITING
:

536 
FL_READY
:

537 
FL_POINT
:

540 
FL_CFI_QUERY
:

541 
FL_JEDEC_QUERY
:

542 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
cmd_addr
);

543 
chù
->
°©e
 = 
FL_STATUS
;

545 
FL_STATUS
:

546 
°©us
 = 
	`cfi_ªad
(
m≠
, 
cmd_addr
);

547 i‡((
°©us
 & 
°©us_OK
) == status_OK) {

548 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xff), 
cmd_addr
);

549 
chù
->
°©e
 = 
FL_READY
;

554 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

555 
	`•ö_u∆ock
(
chù
->
muãx
);

556 
	`¥ötk
(
KERN_ERR
 "waôög f‹ chùÅÿbêªadyÅimed ouàöÑód. WSM sètu†%Œx\n", (
__u64
)
°©us
);

557  -
EIO
;

561 
	`•ö_u∆ock
(
chù
->
muãx
);

562 
	`cfi_udñay
(1);

563 
ªåy
;

566 
¶ìp
:

569 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

570 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

571 
	`•ö_u∆ock
(
chù
->
muãx
);

572 
	`scheduÀ
();

573 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

574 
timeo
 = 
jiffõs
 + 
HZ
;

575 
ªåy
;

578 
m≠
->
	`c›y_‰om
(m≠, 
buf
, 
adr
, 
Àn
);

580 i‡(
su•íded
) {

581 
chù
->
°©e
 = chù->
ﬁd°©e
;

591 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xd0), 
cmd_addr
);

592 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
cmd_addr
);

595 
	`wake_up
(&
chù
->
wq
);

596 
	`•ö_u∆ock
(
chù
->
muãx
);

598 
	}
}

600 
	$cfi_öãÀxt_ªad
 (
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
, size_à*
ªéí
, 
u_ch¨
 *
buf
)

602 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

603 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

604 
ofs
;

605 
chùnum
;

606 
ªt
 = 0;

609 
chùnum
 = (
‰om
 >> 
cfi
->
chùshi·
);

610 
ofs
 = 
‰om
 - (
chùnum
 << 
cfi
->
chùshi·
);

612 *
ªéí
 = 0;

614 
Àn
) {

615 
thi¶í
;

617 i‡(
chùnum
 >
cfi
->
numchùs
)

620 i‡((
Àn
 + 
ofs
 -1Ë>> 
cfi
->
chùshi·
)

621 
thi¶í
 = (1<<
cfi
->
chùshi·
Ë- 
ofs
;

623 
thi¶í
 = 
Àn
;

625 
ªt
 = 
	`do_ªad_⁄echù
(
m≠
, &
cfi
->
chùs
[
chùnum
], 
ofs
, 
thi¶í
, 
buf
);

626 i‡(
ªt
)

629 *
ªéí
 +
thi¶í
;

630 
Àn
 -
thi¶í
;

631 
buf
 +
thi¶í
;

633 
ofs
 = 0;

634 
chùnum
++;

636  
ªt
;

637 
	}
}

639 
	$cfi_öãÀxt_ªad_¥Ÿ_ªg
 (
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
, size_à*
ªéí
, 
u_ch¨
 *
buf
, 
ba£_off°
, 
ªg_sz
)

641 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

642 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

643 
cfi_¥i_öãÀxt
 *
exç
=
cfi
->
cmd£t_¥iv
;

644 
ofs_Á˘‹
 = 
cfi
->
öãæóve
 * cfi->
devi˚_ty≥
;

645 
cou¡
=
Àn
;

646 
Êchù
 *
chù
;

647 
chù_num
,
off°
;

648 
timeo
;

649 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

651 
chù
=0;

653 
chù_num
=(()
‰om
/
ªg_sz
);

654 
off°
=
‰om
-(
ªg_sz
*
chù_num
)+
ba£_off°
;

656 
cou¡
){

658 if(
chù_num
>=
cfi
->
numchùs
)

659 
out
;

663 
timeo
 = 
jiffõs
 + 
HZ
;

664 
chù
=&
cfi
->
chùs
[
chù_num
];

665 
ªåy
:

666 
	`•ö_lock
(
chù
->
muãx
);

668 
chù
->
°©e
) {

669 
FL_READY
:

670 
FL_STATUS
:

671 
FL_CFI_QUERY
:

672 
FL_JEDEC_QUERY
:

678 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

679 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

680 
	`•ö_u∆ock
(
chù
->
muãx
);

681 
	`scheduÀ
();

682 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

683 
timeo
 = 
jiffõs
 + 
HZ
;

684 
ªåy
;

689 
	`cfi_£nd_gí_cmd
(0x90, 0x55,
chù
->
°¨t
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

690 
cou¡
 && ((
off°
-
ba£_off°
)<
ªg_sz
)){

691 *
buf
=
m≠
->
	`ªad8
(m≠,(
chù
->
°¨t
+((
exç
->
PrŸRegAddr
+1)*
ofs_Á˘‹
)+
off°
));

692 
buf
++;

693 
off°
++;

694 
cou¡
--;

697 
chù
->
°©e
=
FL_CFI_QUERY
;

698 
	`•ö_u∆ock
(
chù
->
muãx
);

700 
chù_num
++;

701 
off°
=
ba£_off°
;

705 
out
:

706 
	`wake_up
(&
chù
->
wq
);

707  
Àn
-
cou¡
;

708 
	}
}

710 
	$cfi_öãÀxt_ªad_u£r_¥Ÿ_ªg
 (
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
, size_à*
ªéí
, 
u_ch¨
 *
buf
)

712 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

713 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

714 
cfi_¥i_öãÀxt
 *
exç
=
cfi
->
cmd£t_¥iv
;

715 
ba£_off°
,
ªg_sz
;

718 if(!(
exç
->
FótuªSuµ‹t
&64)){

719 
	`¥ötk
(
KERN_WARNING
 "%s: Thi†Êash devi˚ ha†nÿ¥Ÿe˘i⁄ d©®tÿªad!\n",
m≠
->
«me
);

723 
ba£_off°
=(1<<
exç
->
Fa˘PrŸRegSize
);

724 
ªg_sz
=(1<<
exç
->
U£rPrŸRegSize
);

726  
	`cfi_öãÀxt_ªad_¥Ÿ_ªg
(
mtd
, 
‰om
, 
Àn
, 
ªéí
, 
buf
, 
ba£_off°
, 
ªg_sz
);

727 
	}
}

729 
	$cfi_öãÀxt_ªad_Á˘_¥Ÿ_ªg
 (
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
, size_à*
ªéí
, 
u_ch¨
 *
buf
)

731 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

732 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

733 
cfi_¥i_öãÀxt
 *
exç
=
cfi
->
cmd£t_¥iv
;

734 
ba£_off°
,
ªg_sz
;

737 if(!(
exç
->
FótuªSuµ‹t
&64)){

738 
	`¥ötk
(
KERN_WARNING
 "%s: Thi†Êash devi˚ ha†nÿ¥Ÿe˘i⁄ d©®tÿªad!\n",
m≠
->
«me
);

742 
ba£_off°
=0;

743 
ªg_sz
=(1<<
exç
->
Fa˘PrŸRegSize
);

745  
	`cfi_öãÀxt_ªad_¥Ÿ_ªg
(
mtd
, 
‰om
, 
Àn
, 
ªéí
, 
buf
, 
ba£_off°
, 
ªg_sz
);

746 
	}
}

749 
	$do_wrôe_⁄ew‹d
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
, 
adr
, 
cfi_w‹d
 
d©um
)

751 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

752 
cfi_¥i_öãÀxt
 *
exç
 = 
cfi
->
cmd£t_¥iv
;

753 
cfi_w‹d
 
°©us
, 
°©us_OK
;

754 
timeo
;

755 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

756 
z
, 
su•íded
=0, 
ªt
=0;

758 
adr
 +
chù
->
°¨t
;

761 
°©us_OK
 = 
	`CMD
(0x80);

763 
timeo
 = 
jiffõs
 + 
HZ
;

764 
ªåy
:

765 
	`•ö_lock
(
chù
->
muãx
);

772 
chù
->
°©e
) {

773 
FL_READY
:

776 
FL_CFI_QUERY
:

777 
FL_JEDEC_QUERY
:

778 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

779 
chù
->
°©e
 = 
FL_STATUS
;

781 
FL_STATUS
:

782 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

783 i‡((
°©us
 & 
°©us_OK
) == status_OK)

787 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

788 
	`•ö_u∆ock
(
chù
->
muãx
);

789 
	`¥ötk
(
KERN_ERR
 "waiting for chipÅo beÑeadyÅimed out inÑead\n");

790  -
EIO
;

794 
	`•ö_u∆ock
(
chù
->
muãx
);

795 
	`cfi_udñay
(1);

796 
ªåy
;

798 
FL_ERASING
:

799 i‡(!
exç
 ||

800 !((
exç
->
FótuªSuµ‹t
 & 2Ë&& (exç->
Su•ídCmdSuµ‹t
 & 1)))

801 
¶ìp
;

803 
	`cfi_wrôe
 (
m≠
, 
	`CMD
(0xb0), 
adr
);

810 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

811 
chù
->
ﬁd°©e
 = 
FL_ERASING
;

812 
chù
->
°©e
 = 
FL_ERASE_SUSPENDING
;

814 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

815 i‡((
°©us
 & 
°©us_OK
) == status_OK)

818 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

820 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xd0), 
adr
);

822 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

823 
chù
->
°©e
 = 
FL_ERASING
;

824 
	`•ö_u∆ock
(
chù
->
muãx
);

825 
	`¥ötk
(
KERN_ERR
 "ChipÇotÑeadyáfterÉrase "

826 "su•íded: sètu†0x%x\n", 
°©us
);

827  -
EIO
;

830 
	`•ö_u∆ock
(
chù
->
muãx
);

831 
	`cfi_udñay
(1);

832 
	`•ö_lock
(
chù
->
muãx
);

834 
su•íded
 = 1;

835 
chù
->
°©e
 = 
FL_STATUS
;

839 
¶ìp
:

842 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

843 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

844 
	`•ö_u∆ock
(
chù
->
muãx
);

845 
	`scheduÀ
();

846 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

847 
timeo
 = 
jiffõs
 + 
HZ
;

848 
ªåy
;

851 
	`ENABLE_VPP
(
m≠
);

852 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x40), 
adr
);

853 
	`cfi_wrôe
(
m≠
, 
d©um
, 
adr
);

854 
chù
->
°©e
 = 
FL_WRITING
;

856 
	`•ö_u∆ock
(
chù
->
muãx
);

857 
	`cfi_udñay
(
chù
->
w‹d_wrôe_time
);

858 
	`•ö_lock
(
chù
->
muãx
);

860 
timeo
 = 
jiffõs
 + (
HZ
/2);

861 
z
 = 0;

863 i‡(
chù
->
°©e
 !
FL_WRITING
) {

865 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

866 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

867 
	`•ö_u∆ock
(
chù
->
muãx
);

868 
	`scheduÀ
();

869 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

870 
timeo
 = 
jiffõs
 + (
HZ
 / 2);

871 
	`•ö_lock
(
chù
->
muãx
);

875 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

876 i‡((
°©us
 & 
°©us_OK
) == status_OK)

880 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

881 
chù
->
°©e
 = 
FL_STATUS
;

882 
	`DISABLE_VPP
(
m≠
);

883 
	`¥ötk
(
KERN_ERR
 "waiting for chipÅo beÑeadyÅimed out in word write\n");

884 
ªt
 = -
EIO
;

885 
out
;

889 
	`•ö_u∆ock
(
chù
->
muãx
);

890 
z
++;

891 
	`cfi_udñay
(1);

892 
	`•ö_lock
(
chù
->
muãx
);

894 i‡(!
z
) {

895 
chù
->
w‹d_wrôe_time
--;

896 i‡(!
chù
->
w‹d_wrôe_time
)

897 
chù
->
w‹d_wrôe_time
++;

899 i‡(
z
 > 1)

900 
chù
->
w‹d_wrôe_time
++;

903 
chù
->
°©e
 = 
FL_STATUS
;

905 i‡(
°©us
 & 
	`CMD
(0x02)) {

907 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x50), 
adr
);

909 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

910 
ªt
 = -
EROFS
;

911 
out
;

913 
out
:

914 i‡(
su•íded
) {

915 
chù
->
°©e
 = chù->
ﬁd°©e
;

925 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xd0), 
adr
);

926 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

928 
	`DISABLE_VPP
(
m≠
);

930 
	`wake_up
(&
chù
->
wq
);

931 
	`•ö_u∆ock
(
chù
->
muãx
);

932  
ªt
;

933 
	}
}

936 
	$cfi_öãÀxt_wrôe_w‹ds
 (
mtd_öfo
 *
mtd
, 
loff_t
 
to
 , 
size_t
 
Àn
, size_à*
ªéí
, c⁄° 
u_ch¨
 *
buf
)

938 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

939 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

940 
ªt
 = 0;

941 
chùnum
;

942 
ofs
;

944 *
ªéí
 = 0;

945 i‡(!
Àn
)

948 
chùnum
 = 
to
 >> 
cfi
->
chùshi·
;

949 
ofs
 = 
to
 - (
chùnum
 << 
cfi
->
chùshi·
);

952 i‡(
ofs
 & (
CFIDEV_BUSWIDTH
-1)) {

953 
bus_ofs
 = 
ofs
 & ~(
CFIDEV_BUSWIDTH
-1);

954 
g≠
 = 
ofs
 - 
bus_ofs
;

955 
i
 = 0, 
n
 = 0;

956 
u_ch¨
 
tmp_buf
[8];

957 
cfi_w‹d
 
d©um
;

959 
g≠
--)

960 
tmp_buf
[
i
++] = 0xff;

961 
Àn
 && 
i
 < 
CFIDEV_BUSWIDTH
)

962 
tmp_buf
[
i
++] = 
buf
[
n
++], 
Àn
--;

963 
i
 < 
CFIDEV_BUSWIDTH
)

964 
tmp_buf
[
i
++] = 0xff;

966 i‡(
	`cfi_buswidth_is_2
()) {

967 
d©um
 = *(
__u16
*)
tmp_buf
;

968 } i‡(
	`cfi_buswidth_is_4
()) {

969 
d©um
 = *(
__u32
*)
tmp_buf
;

970 } i‡(
	`cfi_buswidth_is_8
()) {

971 
d©um
 = *(
__u64
*)
tmp_buf
;

973  -
EINVAL
;

976 
ªt
 = 
	`do_wrôe_⁄ew‹d
(
m≠
, &
cfi
->
chùs
[
chùnum
],

977 
bus_ofs
, 
d©um
);

978 i‡(
ªt
)

979  
ªt
;

981 
ofs
 +
n
;

982 
buf
 +
n
;

983 (*
ªéí
Ë+
n
;

985 i‡(
ofs
 >> 
cfi
->
chùshi·
) {

986 
chùnum
 ++;

987 
ofs
 = 0;

988 i‡(
chùnum
 =
cfi
->
numchùs
)

993 
Àn
 >
CFIDEV_BUSWIDTH
) {

994 
cfi_w‹d
 
d©um
;

996 i‡(
	`cfi_buswidth_is_1
()) {

997 
d©um
 = *(
__u8
*)
buf
;

998 } i‡(
	`cfi_buswidth_is_2
()) {

999 
d©um
 = *(
__u16
*)
buf
;

1000 } i‡(
	`cfi_buswidth_is_4
()) {

1001 
d©um
 = *(
__u32
*)
buf
;

1002 } i‡(
	`cfi_buswidth_is_8
()) {

1003 
d©um
 = *(
__u64
*)
buf
;

1005  -
EINVAL
;

1008 
ªt
 = 
	`do_wrôe_⁄ew‹d
(
m≠
, &
cfi
->
chùs
[
chùnum
],

1009 
ofs
, 
d©um
);

1010 i‡(
ªt
)

1011  
ªt
;

1013 
ofs
 +
CFIDEV_BUSWIDTH
;

1014 
buf
 +
CFIDEV_BUSWIDTH
;

1015 (*
ªéí
Ë+
CFIDEV_BUSWIDTH
;

1016 
Àn
 -
CFIDEV_BUSWIDTH
;

1018 i‡(
ofs
 >> 
cfi
->
chùshi·
) {

1019 
chùnum
 ++;

1020 
ofs
 = 0;

1021 i‡(
chùnum
 =
cfi
->
numchùs
)

1026 i‡(
Àn
 & (
CFIDEV_BUSWIDTH
-1)) {

1027 
i
 = 0, 
n
 = 0;

1028 
u_ch¨
 
tmp_buf
[8];

1029 
cfi_w‹d
 
d©um
;

1031 
Àn
--)

1032 
tmp_buf
[
i
++] = 
buf
[
n
++];

1033 
i
 < 
CFIDEV_BUSWIDTH
)

1034 
tmp_buf
[
i
++] = 0xff;

1036 i‡(
	`cfi_buswidth_is_2
()) {

1037 
d©um
 = *(
__u16
*)
tmp_buf
;

1038 } i‡(
	`cfi_buswidth_is_4
()) {

1039 
d©um
 = *(
__u32
*)
tmp_buf
;

1040 } i‡(
	`cfi_buswidth_is_8
()) {

1041 
d©um
 = *(
__u64
*)
tmp_buf
;

1043  -
EINVAL
;

1046 
ªt
 = 
	`do_wrôe_⁄ew‹d
(
m≠
, &
cfi
->
chùs
[
chùnum
],

1047 
ofs
, 
d©um
);

1048 i‡(
ªt
)

1049  
ªt
;

1051 (*
ªéí
Ë+
n
;

1055 
	}
}

1058 
ölöe
 
	$do_wrôe_buf„r
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
,

1059 
adr
, c⁄° 
u_ch¨
 *
buf
, 
Àn
)

1061 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1062 
cfi_¥i_öãÀxt
 *
exç
 = 
cfi
->
cmd£t_¥iv
;

1063 
cfi_w‹d
 
°©us
, 
°©us_OK
;

1064 
cmd_adr
, 
timeo
;

1065 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

1066 
wbufsize
, 
z
, 
su•íded
=0, 
ªt
=0;

1068 
wbufsize
 = 
CFIDEV_INTERLEAVE
 << 
cfi
->
cfiq
->
MaxBufWrôeSize
;

1069 
adr
 +
chù
->
°¨t
;

1070 
cmd_adr
 = 
adr
 & ~(
wbufsize
-1);

1073 
°©us_OK
 = 
	`CMD
(0x80);

1075 
timeo
 = 
jiffõs
 + 
HZ
;

1076 
ªåy
:

1077 
	`•ö_lock
(
chù
->
muãx
);

1084 
chù
->
°©e
) {

1085 
FL_READY
:

1086 
FL_CFI_QUERY
:

1087 
FL_JEDEC_QUERY
:

1088 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
cmd_adr
);

1089 
chù
->
°©e
 = 
FL_STATUS
;

1091 
FL_STATUS
:

1092 
°©us
 = 
	`cfi_ªad
(
m≠
, 
cmd_adr
);

1093 i‡((
°©us
 & 
°©us_OK
) == status_OK)

1096 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

1097 
	`•ö_u∆ock
(
chù
->
muãx
);

1098 
	`¥ötk
(
KERN_ERR
 "waiting for chipÅo beÑeadyÅimed out in buffer write\n");

1099  -
EIO
;

1103 
	`•ö_u∆ock
(
chù
->
muãx
);

1104 
	`cfi_udñay
(1);

1105 
ªåy
;

1107 
FL_ERASING
:

1108 i‡(!
exç
 ||

1109 !((
exç
->
FótuªSuµ‹t
 & 2Ë&& (exç->
Su•ídCmdSuµ‹t
 & 1)))

1110 
¶ìp
;

1112 
	`cfi_wrôe
 (
m≠
, 
	`CMD
(0xb0), 
adr
);

1119 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

1120 
chù
->
ﬁd°©e
 = 
FL_ERASING
;

1121 
chù
->
°©e
 = 
FL_ERASE_SUSPENDING
;

1123 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

1124 i‡((
°©us
 & 
°©us_OK
) == status_OK)

1127 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

1129 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xd0), 
adr
);

1131 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

1132 
chù
->
°©e
 = 
FL_ERASING
;

1133 
	`•ö_u∆ock
(
chù
->
muãx
);

1134 
	`¥ötk
(
KERN_ERR
 "ChipÇotÑeadyáfterÉrase "

1135 "su•íded: sètu†0x%x\n", 
°©us
);

1136  -
EIO
;

1139 
	`•ö_u∆ock
(
chù
->
muãx
);

1140 
	`cfi_udñay
(1);

1141 
	`•ö_lock
(
chù
->
muãx
);

1143 
su•íded
 = 1;

1144 
chù
->
°©e
 = 
FL_STATUS
;

1148 
¶ìp
:

1151 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

1152 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

1153 
	`•ö_u∆ock
(
chù
->
muãx
);

1154 
	`scheduÀ
();

1155 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

1156 
timeo
 = 
jiffõs
 + 
HZ
;

1157 
ªåy
;

1164 i‡(
°©us
 & 
	`CMD
(0x30)) {

1165 
	`¥ötk
(
KERN_WARNING
 "SR.4 o∏SR.5 bô†£àö buf„∏wrôê(°©u†%x). CÀ¨ög.\n", 
°©us
);

1166 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x50), 
cmd_adr
);

1167 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
cmd_adr
);

1169 
	`ENABLE_VPP
(
m≠
);

1170 
chù
->
°©e
 = 
FL_WRITING_TO_BUFFER
;

1172 
z
 = 0;

1174 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xe8), 
cmd_adr
);

1176 
°©us
 = 
	`cfi_ªad
(
m≠
, 
cmd_adr
);

1177 i‡((
°©us
 & 
°©us_OK
) == status_OK)

1180 
	`•ö_u∆ock
(
chù
->
muãx
);

1181 
	`cfi_udñay
(1);

1182 
	`•ö_lock
(
chù
->
muãx
);

1184 i‡(++
z
 > 20) {

1186 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
cmd_adr
);

1187 
chù
->
°©e
 = 
FL_STATUS
;

1188 
	`DISABLE_VPP
(
m≠
);

1189 
	`¥ötk
(
KERN_ERR
 "ChùÇŸÑódy f‹ buf„∏wrôe. X°©u†%Œx, sètu†%Œx\n", (
__u64
)
°©us
, (__u64)
	`cfi_ªad
(
m≠
, 
cmd_adr
));

1191 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x50), 
cmd_adr
);

1192 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
cmd_adr
);

1193 
ªt
 = -
EIO
;

1194 
out
;

1199 
	`cfi_wrôe
(
m≠
, 
	`CMD
(
Àn
/
CFIDEV_BUSWIDTH
-1), 
cmd_adr
 );

1202 
z
 = 0; z < 
Àn
; z +
CFIDEV_BUSWIDTH
) {

1203 i‡(
	`cfi_buswidth_is_1
()) {

1204 
m≠
->
	`wrôe8
 (m≠, *((
__u8
*)
buf
)++, 
adr
+
z
);

1205 } i‡(
	`cfi_buswidth_is_2
()) {

1206 
m≠
->
	`wrôe16
 (m≠, *((
__u16
*)
buf
)++, 
adr
+
z
);

1207 } i‡(
	`cfi_buswidth_is_4
()) {

1208 
m≠
->
	`wrôe32
 (m≠, *((
__u32
*)
buf
)++, 
adr
+
z
);

1209 } i‡(
	`cfi_buswidth_is_8
()) {

1210 
m≠
->
	`wrôe64
 (m≠, *((
__u64
*)
buf
)++, 
adr
+
z
);

1212 
	`DISABLE_VPP
(
m≠
);

1213 
ªt
 = -
EINVAL
;

1214 
out
;

1218 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xd0), 
cmd_adr
);

1219 
chù
->
°©e
 = 
FL_WRITING
;

1221 
	`•ö_u∆ock
(
chù
->
muãx
);

1222 
	`cfi_udñay
(
chù
->
buf„r_wrôe_time
);

1223 
	`•ö_lock
(
chù
->
muãx
);

1225 
timeo
 = 
jiffõs
 + (
HZ
/2);

1226 
z
 = 0;

1228 i‡(
chù
->
°©e
 !
FL_WRITING
) {

1230 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

1231 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

1232 
	`•ö_u∆ock
(
chù
->
muãx
);

1233 
	`scheduÀ
();

1234 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

1235 
timeo
 = 
jiffõs
 + (
HZ
 / 2);

1236 
	`•ö_lock
(
chù
->
muãx
);

1240 
°©us
 = 
	`cfi_ªad
(
m≠
, 
cmd_adr
);

1241 i‡((
°©us
 & 
°©us_OK
) == status_OK)

1245 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

1246 
chù
->
°©e
 = 
FL_STATUS
;

1247 
	`DISABLE_VPP
(
m≠
);

1248 
	`¥ötk
(
KERN_ERR
 "waiting for chipÅo beÑeadyÅimed out in bufwrite\n");

1249 
ªt
 = -
EIO
;

1250 
out
;

1254 
	`•ö_u∆ock
(
chù
->
muãx
);

1255 
	`cfi_udñay
(1);

1256 
z
++;

1257 
	`•ö_lock
(
chù
->
muãx
);

1259 i‡(!
z
) {

1260 
chù
->
buf„r_wrôe_time
--;

1261 i‡(!
chù
->
buf„r_wrôe_time
)

1262 
chù
->
buf„r_wrôe_time
++;

1264 i‡(
z
 > 1)

1265 
chù
->
buf„r_wrôe_time
++;

1268 
chù
->
°©e
 = 
FL_STATUS
;

1270 i‡(
°©us
 & 
	`CMD
(0x02)) {

1272 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x50), 
cmd_adr
);

1274 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

1275 
ªt
 = -
EROFS
;

1276 
out
;

1278 
out
:

1279 i‡(
su•íded
) {

1280 
chù
->
°©e
 = chù->
ﬁd°©e
;

1290 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xd0), 
adr
);

1291 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

1293 
	`DISABLE_VPP
(
m≠
);

1295 
	`wake_up
(&
chù
->
wq
);

1296 
	`•ö_u∆ock
(
chù
->
muãx
);

1297  
ªt
;

1298 
	}
}

1300 
	$cfi_öãÀxt_wrôe_buf„rs
 (
mtd_öfo
 *
mtd
, 
loff_t
 
to
,

1301 
size_t
 
Àn
, size_à*
ªéí
, c⁄° 
u_ch¨
 *
buf
)

1303 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1304 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1305 
wbufsize
 = 
CFIDEV_INTERLEAVE
 << 
cfi
->
cfiq
->
MaxBufWrôeSize
;

1306 
ªt
 = 0;

1307 
chùnum
;

1308 
ofs
;

1310 *
ªéí
 = 0;

1311 i‡(!
Àn
)

1314 
chùnum
 = 
to
 >> 
cfi
->
chùshi·
;

1315 
ofs
 = 
to
 - (
chùnum
 << 
cfi
->
chùshi·
);

1318 i‡(
ofs
 & (
CFIDEV_BUSWIDTH
-1)) {

1319 
size_t
 
loˇl_Àn
 = (-
ofs
)&(
CFIDEV_BUSWIDTH
-1);

1320 i‡(
loˇl_Àn
 > 
Àn
)

1321 
loˇl_Àn
 = 
Àn
;

1322 
ªt
 = 
	`cfi_öãÀxt_wrôe_w‹ds
(
mtd
, 
to
, 
loˇl_Àn
,

1323 
ªéí
, 
buf
);

1324 i‡(
ªt
)

1325  
ªt
;

1326 
ofs
 +
loˇl_Àn
;

1327 
buf
 +
loˇl_Àn
;

1328 
Àn
 -
loˇl_Àn
;

1330 i‡(
ofs
 >> 
cfi
->
chùshi·
) {

1331 
chùnum
 ++;

1332 
ofs
 = 0;

1333 i‡(
chùnum
 =
cfi
->
numchùs
)

1339 
Àn
 > 
CFIDEV_BUSWIDTH
) {

1341 
size
 = 
wbufsize
 - (
ofs
 & (wbufsize-1));

1343 i‡(
size
 > 
Àn
)

1344 
size
 = 
Àn
 & ~(
CFIDEV_BUSWIDTH
-1);

1345 
ªt
 = 
	`do_wrôe_buf„r
(
m≠
, &
cfi
->
chùs
[
chùnum
],

1346 
ofs
, 
buf
, 
size
);

1347 i‡(
ªt
)

1348  
ªt
;

1350 
ofs
 +
size
;

1351 
buf
 +
size
;

1352 (*
ªéí
Ë+
size
;

1353 
Àn
 -
size
;

1355 i‡(
ofs
 >> 
cfi
->
chùshi·
) {

1356 
chùnum
 ++;

1357 
ofs
 = 0;

1358 i‡(
chùnum
 =
cfi
->
numchùs
)

1364 i‡(
Àn
 > 0) {

1365 
size_t
 
loˇl_ªéí
;

1366 
ªt
 = 
	`cfi_öãÀxt_wrôe_w‹ds
(
mtd
, 
ofs
 + (
chùnum
 << 
cfi
->
chùshi·
),

1367 
Àn
, &
loˇl_ªéí
, 
buf
);

1368 i‡(
ªt
)

1369  
ªt
;

1370 (*
ªéí
Ë+
loˇl_ªéí
;

1374 
	}
}

1376 (*
	tv¨size_‰ob_t
)(
	tm≠_öfo
 *
	tm≠
, 
	tÊchù
 *
	tchù
,

1377 
	tadr
, *
	tthunk
);

1379 
	$cfi_öãÀxt_v¨size_‰ob
(
mtd_öfo
 *
mtd
, 
v¨size_‰ob_t
 
‰ob
,

1380 
loff_t
 
ofs
, 
size_t
 
Àn
, *
thunk
)

1382 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1383 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1384 
adr
;

1385 
chùnum
, 
ªt
 = 0;

1386 
i
, 
fú°
;

1387 
mtd_îa£_ªgi⁄_öfo
 *
ªgi⁄s
 = 
mtd
->
îa£ªgi⁄s
;

1389 i‡(
ofs
 > 
mtd
->
size
)

1390  -
EINVAL
;

1392 i‡((
Àn
 + 
ofs
Ë> 
mtd
->
size
)

1393  -
EINVAL
;

1399 
i
 = 0;

1407 
i
 < 
mtd
->
numîa£ªgi⁄s
 && 
ofs
 >
ªgi⁄s
[i].
off£t
)

1408 
i
++;

1409 
i
--;

1417 i‡(
ofs
 & (
ªgi⁄s
[
i
].
îa£size
-1))

1418  -
EINVAL
;

1421 
fú°
 = 
i
;

1427 
i
<
mtd
->
numîa£ªgi⁄s
 && (
ofs
 + 
Àn
Ë>
ªgi⁄s
[i].
off£t
)

1428 
i
++;

1433 
i
--;

1435 i‡((
ofs
 + 
Àn
Ë& (
ªgi⁄s
[
i
].
îa£size
-1))

1436  -
EINVAL
;

1438 
chùnum
 = 
ofs
 >> 
cfi
->
chùshi·
;

1439 
adr
 = 
ofs
 - (
chùnum
 << 
cfi
->
chùshi·
);

1441 
i
=
fú°
;

1443 
Àn
) {

1444 
ªt
 = (*
‰ob
)(
m≠
, &
cfi
->
chùs
[
chùnum
], 
adr
, 
thunk
);

1446 i‡(
ªt
)

1447  
ªt
;

1449 
adr
 +
ªgi⁄s
[
i
].
îa£size
;

1450 
Àn
 -
ªgi⁄s
[
i
].
îa£size
;

1452 i‡(
adr
 % (1<< 
cfi
->
chùshi·
Ë=((
ªgi⁄s
[
i
].
off£t
 + (ªgi⁄s[i].
îa£size
 *Ñegi⁄s[i].
numblocks
)) %( 1<< cfi->chipshift)))

1453 
i
++;

1455 i‡(
adr
 >> 
cfi
->
chùshi·
) {

1456 
adr
 = 0;

1457 
chùnum
++;

1459 i‡(
chùnum
 >
cfi
->
numchùs
)

1465 
	}
}

1468 
	$do_îa£_⁄eblock
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
, 
adr
, *
thunk
)

1470 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1471 
cfi_w‹d
 
°©us
, 
°©us_OK
;

1472 
timeo
;

1473 
ªåõs
 = 3;

1474 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

1475 
ªt
 = 0;

1477 
adr
 +
chù
->
°¨t
;

1480 
°©us_OK
 = 
	`CMD
(0x80);

1482 
timeo
 = 
jiffõs
 + 
HZ
;

1483 
ªåy
:

1484 
	`•ö_lock
(
chù
->
muãx
);

1487 
chù
->
°©e
) {

1488 
FL_CFI_QUERY
:

1489 
FL_JEDEC_QUERY
:

1490 
FL_READY
:

1491 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

1492 
chù
->
°©e
 = 
FL_STATUS
;

1494 
FL_STATUS
:

1495 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

1496 i‡((
°©us
 & 
°©us_OK
) == status_OK)

1500 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

1501 
	`•ö_u∆ock
(
chù
->
muãx
);

1502 
	`¥ötk
(
KERN_ERR
 "waiting for chipÅo beÑeadyÅimed out inÉrase\n");

1503  -
EIO
;

1507 
	`•ö_u∆ock
(
chù
->
muãx
);

1508 
	`cfi_udñay
(1);

1509 
ªåy
;

1514 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

1515 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

1516 
	`•ö_u∆ock
(
chù
->
muãx
);

1517 
	`scheduÀ
();

1518 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

1519 
timeo
 = 
jiffõs
 + 
HZ
;

1520 
ªåy
;

1523 
	`ENABLE_VPP
(
m≠
);

1525 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x50), 
adr
);

1528 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x20), 
adr
);

1529 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xD0), 
adr
);

1530 
chù
->
°©e
 = 
FL_ERASING
;

1531 
chù
->
ﬁd°©e
 = 0;

1533 
	`•ö_u∆ock
(
chù
->
muãx
);

1534 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

1535 
	`scheduÀ_timeout
((
chù
->
îa£_time
*
HZ
)/(2*1000));

1536 
	`•ö_lock
(
chù
->
muãx
);

1541 
timeo
 = 
jiffõs
 + (
HZ
*20);

1543 i‡(
chù
->
°©e
 !
FL_ERASING
) {

1545 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

1546 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

1547 
	`•ö_u∆ock
(
chù
->
muãx
);

1548 
	`scheduÀ
();

1549 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

1550 
	`•ö_lock
(
chù
->
muãx
);

1553 i‡(
chù
->
ﬁd°©e
) {

1556 
timeo
 = 
jiffõs
 + (
HZ
*20);

1557 
chù
->
ﬁd°©e
 = 0;

1560 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

1561 i‡((
°©us
 & 
°©us_OK
) == status_OK)

1565 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

1566 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

1567 
chù
->
°©e
 = 
FL_STATUS
;

1568 
	`¥ötk
(
KERN_ERR
 "waiting forÉraseát %08lxÅo completeÅimed out. Xstatus = %llx, status = %llx.\n",

1569 
adr
, (
__u64
)
°©us
, (__u64)
	`cfi_ªad
(
m≠
,ádr));

1571 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x50), 
adr
);

1572 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

1573 
	`DISABLE_VPP
(
m≠
);

1574 
	`•ö_u∆ock
(
chù
->
muãx
);

1575  -
EIO
;

1579 
	`•ö_u∆ock
(
chù
->
muãx
);

1580 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

1581 
	`scheduÀ_timeout
(1);

1582 
	`•ö_lock
(
chù
->
muãx
);

1585 
	`DISABLE_VPP
(
m≠
);

1586 
ªt
 = 0;

1589 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

1590 
chù
->
°©e
 = 
FL_STATUS
;

1591 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

1594 i‡(
°©us
 & 
	`CMD
(0x3a)) {

1595 
chù°©us
 = 
°©us
;

1596 i‡(
°©us
 !
	`CMD
(status & 0xff)) {

1597 
i
;

1598 
i
 = 1; i<
CFIDEV_INTERLEAVE
; i++) {

1599 
chù°©us
 |
°©us
 >> (
cfi
->
devi˚_ty≥
 * 8);

1601 
	`¥ötk
(
KERN_WARNING
 "Sètu†i†nŸ idítiˇ»f‹áŒ chùs: 0x%Œx. MîgögÅÿgivê0x%02x\n", (
__u64
)
°©us
, 
chù°©us
);

1604 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x50), 
adr
);

1605 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

1607 i‡((
chù°©us
 & 0x30) == 0x30) {

1608 
	`¥ötk
(
KERN_NOTICE
 "ChùÑï‹t†im¥›î comm™d sequí˚: sètu†0x%Œx\n", (
__u64
)
°©us
);

1609 
ªt
 = -
EIO
;

1610 } i‡(
chù°©us
 & 0x02) {

1612 
ªt
 = -
EROFS
;

1613 } i‡(
chù°©us
 & 0x8) {

1615 
	`¥ötk
(
KERN_WARNING
 "ChùÑï‹t†vﬁègêlow o¿îa£: sètu†0x%Œx\n", (
__u64
)
°©us
);

1616 
ªt
 = -
EIO
;

1617 } i‡(
chù°©us
 & 0x20) {

1618 i‡(
ªåõs
--) {

1619 
	`¥ötk
(
KERN_DEBUG
 "ChùÉø£ faûedáà0x%08lx: sètu†0x%Œx. Rëryög...\n", 
adr
, (
__u64
)
°©us
);

1620 
timeo
 = 
jiffõs
 + 
HZ
;

1621 
chù
->
°©e
 = 
FL_STATUS
;

1622 
	`•ö_u∆ock
(
chù
->
muãx
);

1623 
ªåy
;

1625 
	`¥ötk
(
KERN_DEBUG
 "ChùÉø£ faûedáà0x%08lx: sètu†0x%Œx\n", 
adr
, (
__u64
)
°©us
);

1626 
ªt
 = -
EIO
;

1630 
	`wake_up
(&
chù
->
wq
);

1631 
	`•ö_u∆ock
(
chù
->
muãx
);

1632  
ªt
;

1633 
	}
}

1635 
	$cfi_öãÀxt_îa£_v¨size
(
mtd_öfo
 *
mtd
, 
îa£_öfo
 *
ö°r
)

1637 
ofs
, 
Àn
;

1638 
ªt
;

1640 
ofs
 = 
ö°r
->
addr
;

1641 
Àn
 = 
ö°r
->len;

1643 
ªt
 = 
	`cfi_öãÀxt_v¨size_‰ob
(
mtd
, 
do_îa£_⁄eblock
, 
ofs
, 
Àn
, 0);

1644 i‡(
ªt
)

1645  
ªt
;

1647 
ö°r
->
°©e
 = 
MTD_ERASE_DONE
;

1648 i‡(
ö°r
->
ˇŒback
)

1649 
ö°r
->
	`ˇŒback
(instr);

1652 
	}
}

1654 
	$cfi_öãÀxt_sync
 (
mtd_öfo
 *
mtd
)

1656 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1657 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1658 
i
;

1659 
Êchù
 *
chù
;

1660 
ªt
 = 0;

1661 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

1663 
i
=0; !
ªt
 && i<
cfi
->
numchùs
; i++) {

1664 
chù
 = &
cfi
->
chùs
[
i
];

1666 
ªåy
:

1667 
	`•ö_lock
(
chù
->
muãx
);

1669 
chù
->
°©e
) {

1670 
FL_READY
:

1671 
FL_STATUS
:

1672 
FL_CFI_QUERY
:

1673 
FL_JEDEC_QUERY
:

1674 
chù
->
ﬁd°©e
 = chù->
°©e
;

1675 
chù
->
°©e
 = 
FL_SYNCING
;

1680 
FL_SYNCING
:

1681 
	`•ö_u∆ock
(
chù
->
muãx
);

1686 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

1688 
	`•ö_u∆ock
(
chù
->
muãx
);

1689 
	`scheduÀ
();

1690 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

1692 
ªåy
;

1698 
i
--; i >=0; i--) {

1699 
chù
 = &
cfi
->
chùs
[
i
];

1701 
	`•ö_lock
(
chù
->
muãx
);

1703 i‡(
chù
->
°©e
 =
FL_SYNCING
) {

1704 
chù
->
°©e
 = chù->
ﬁd°©e
;

1705 
	`wake_up
(&
chù
->
wq
);

1707 
	`•ö_u∆ock
(
chù
->
muãx
);

1709 
	}
}

1711 #ifde‡
DEBUG_LOCK_BITS


1712 
	$do_¥öéock°©us_⁄eblock
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
, 
adr
, *
thunk
)

1714 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1715 
ofs_Á˘‹
 = 
cfi
->
öãæóve
 * cfi->
devi˚_ty≥
;

1717 
	`cfi_£nd_gí_cmd
(0x90, 0x55, 0, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

1718 
	`¥ötk
(
KERN_DEBUG
 "block statusÑegister for 0x%08lx is %x\n",

1719 
adr
, 
	`cfi_ªad_quîy
(
m≠
,ádr+(2*
ofs_Á˘‹
)));

1720 
	`cfi_£nd_gí_cmd
(0xff, 0x55, 0, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

1723 
	}
}

1726 
	#DO_XXLOCK_ONEBLOCK_LOCK
 ((*Ë1)

	)

1727 
	#DO_XXLOCK_ONEBLOCK_UNLOCK
 ((*Ë2)

	)

1729 
	$do_xxlock_⁄eblock
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
, 
adr
, *
thunk
)

1731 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1732 
cfi_w‹d
 
°©us
, 
°©us_OK
;

1733 
timeo
 = 
jiffõs
 + 
HZ
;

1734 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

1736 
adr
 +
chù
->
°¨t
;

1739 
°©us_OK
 = 
	`CMD
(0x80);

1741 
timeo
 = 
jiffõs
 + 
HZ
;

1742 
ªåy
:

1743 
	`•ö_lock
(
chù
->
muãx
);

1746 
chù
->
°©e
) {

1747 
FL_CFI_QUERY
:

1748 
FL_JEDEC_QUERY
:

1749 
FL_READY
:

1750 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

1751 
chù
->
°©e
 = 
FL_STATUS
;

1753 
FL_STATUS
:

1754 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

1755 i‡((
°©us
 & 
°©us_OK
) == status_OK)

1759 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

1760 
	`•ö_u∆ock
(
chù
->
muãx
);

1761 
	`¥ötk
(
KERN_ERR
 "%s: waôög f‹ chùÅÿbêªadyÅimed out\n", 
__FUNCTION__
);

1762  -
EIO
;

1766 
	`•ö_u∆ock
(
chù
->
muãx
);

1767 
	`cfi_udñay
(1);

1768 
ªåy
;

1773 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

1774 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

1775 
	`•ö_u∆ock
(
chù
->
muãx
);

1776 
	`scheduÀ
();

1777 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

1778 
timeo
 = 
jiffõs
 + 
HZ
;

1779 
ªåy
;

1782 
	`ENABLE_VPP
(
m≠
);

1783 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x60), 
adr
);

1785 i‡(
thunk
 =
DO_XXLOCK_ONEBLOCK_LOCK
) {

1786 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x01), 
adr
);

1787 
chù
->
°©e
 = 
FL_LOCKING
;

1788 } i‡(
thunk
 =
DO_XXLOCK_ONEBLOCK_UNLOCK
) {

1789 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xD0), 
adr
);

1790 
chù
->
°©e
 = 
FL_UNLOCKING
;

1792 
	`BUG
();

1794 
	`•ö_u∆ock
(
chù
->
muãx
);

1795 
	`scheduÀ_timeout
(
HZ
);

1796 
	`•ö_lock
(
chù
->
muãx
);

1801 
timeo
 = 
jiffõs
 + (
HZ
*20);

1804 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

1805 i‡((
°©us
 & 
°©us_OK
) == status_OK)

1809 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

1810 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

1811 
chù
->
°©e
 = 
FL_STATUS
;

1812 
	`¥ötk
(
KERN_ERR
 "waôög f‹ u∆ockÅÿcom∂ëêtimed out. X°©u†%Œx, sètu†%Œx.\n", (
__u64
)
°©us
, (__u64)
	`cfi_ªad
(
m≠
, 
adr
));

1813 
	`DISABLE_VPP
(
m≠
);

1814 
	`•ö_u∆ock
(
chù
->
muãx
);

1815  -
EIO
;

1819 
	`•ö_u∆ock
(
chù
->
muãx
);

1820 
	`cfi_udñay
(1);

1821 
	`•ö_lock
(
chù
->
muãx
);

1825 
chù
->
°©e
 = 
FL_STATUS
;

1826 
	`DISABLE_VPP
(
m≠
);

1827 
	`wake_up
(&
chù
->
wq
);

1828 
	`•ö_u∆ock
(
chù
->
muãx
);

1830 
	}
}

1832 
	$cfi_öãÀxt_lock
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
, 
size_t
 
Àn
)

1834 
ªt
;

1836 #ifde‡
DEBUG_LOCK_BITS


1837 
	`¥ötk
(
KERN_DEBUG
 "%s:Üock status before, ofs=0x%08llx,Üen=0x%08X\n",

1838 
__FUNCTION__
, 
ofs
, 
Àn
);

1839 
	`cfi_öãÀxt_v¨size_‰ob
(
mtd
, 
do_¥öéock°©us_⁄eblock
,

1840 
ofs
, 
Àn
, 0);

1843 
ªt
 = 
	`cfi_öãÀxt_v¨size_‰ob
(
mtd
, 
do_xxlock_⁄eblock
,

1844 
ofs
, 
Àn
, 
DO_XXLOCK_ONEBLOCK_LOCK
);

1846 #ifde‡
DEBUG_LOCK_BITS


1847 
	`¥ötk
(
KERN_DEBUG
 
__FUNCTION__


1848 "%s:Üock sètu†a·î,Ñë=%d\n", 
__FUNCTION__
, 
ªt
);

1849 
	`cfi_öãÀxt_v¨size_‰ob
(
mtd
, 
do_¥öéock°©us_⁄eblock
,

1850 
ofs
, 
Àn
, 0);

1853  
ªt
;

1854 
	}
}

1856 
	$cfi_öãÀxt_u∆ock
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
, 
size_t
 
Àn
)

1858 
ªt
;

1860 #ifde‡
DEBUG_LOCK_BITS


1861 
	`¥ötk
(
KERN_DEBUG
 "%s:Üock status before, ofs=0x%08llx,Üen=0x%08X\n",

1862 
__FUNCTION__
, 
ofs
, 
Àn
);

1863 
	`cfi_öãÀxt_v¨size_‰ob
(
mtd
, 
do_¥öéock°©us_⁄eblock
,

1864 
ofs
, 
Àn
, 0);

1867 
ªt
 = 
	`cfi_öãÀxt_v¨size_‰ob
(
mtd
, 
do_xxlock_⁄eblock
,

1868 
ofs
, 
Àn
, 
DO_XXLOCK_ONEBLOCK_UNLOCK
);

1870 #ifde‡
DEBUG_LOCK_BITS


1871 
	`¥ötk
(
KERN_DEBUG
 "%s:Üock sètu†a·î,Ñë=%d\n", 
__FUNCTION__
, 
ªt
);

1872 
	`cfi_öãÀxt_v¨size_‰ob
(
mtd
, 
do_¥öéock°©us_⁄eblock
,

1873 
ofs
, 
Àn
, 0);

1876  
ªt
;

1877 
	}
}

1879 
	$cfi_öãÀxt_su•íd
(
mtd_öfo
 *
mtd
)

1881 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1882 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1883 
i
;

1884 
Êchù
 *
chù
;

1885 
ªt
 = 0;

1887 
i
=0; !
ªt
 && i<
cfi
->
numchùs
; i++) {

1888 
chù
 = &
cfi
->
chùs
[
i
];

1890 
	`•ö_lock
(
chù
->
muãx
);

1892 
chù
->
°©e
) {

1893 
FL_READY
:

1894 
FL_STATUS
:

1895 
FL_CFI_QUERY
:

1896 
FL_JEDEC_QUERY
:

1897 
chù
->
ﬁd°©e
 = chù->
°©e
;

1898 
chù
->
°©e
 = 
FL_PM_SUSPENDED
;

1903 
FL_PM_SUSPENDED
:

1907 
ªt
 = -
EAGAIN
;

1910 
	`•ö_u∆ock
(
chù
->
muãx
);

1915 i‡(
ªt
) {

1916 
i
--; i >=0; i--) {

1917 
chù
 = &
cfi
->
chùs
[
i
];

1919 
	`•ö_lock
(
chù
->
muãx
);

1921 i‡(
chù
->
°©e
 =
FL_PM_SUSPENDED
) {

1925 
chù
->
°©e
 = chù->
ﬁd°©e
;

1926 
	`wake_up
(&
chù
->
wq
);

1928 
	`•ö_u∆ock
(
chù
->
muãx
);

1932  
ªt
;

1933 
	}
}

1935 
	$cfi_öãÀxt_ªsume
(
mtd_öfo
 *
mtd
)

1937 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1938 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1939 
i
;

1940 
Êchù
 *
chù
;

1942 
i
=0; i<
cfi
->
numchùs
; i++) {

1944 
chù
 = &
cfi
->
chùs
[
i
];

1946 
	`•ö_lock
(
chù
->
muãx
);

1949 i‡(
chù
->
°©e
 =
FL_PM_SUSPENDED
) {

1950 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xFF), 0);

1951 
chù
->
°©e
 = 
FL_READY
;

1952 
	`wake_up
(&
chù
->
wq
);

1955 
	`•ö_u∆ock
(
chù
->
muãx
);

1957 
	}
}

1959 
	$cfi_öãÀxt_de°roy
(
mtd_öfo
 *
mtd
)

1961 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1962 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1963 
	`k‰ì
(
cfi
->
cmd£t_¥iv
);

1964 
	`k‰ì
(
cfi
->
cfiq
);

1965 
	`k‰ì
(
cfi
);

1966 
	`k‰ì
(
mtd
->
îa£ªgi⁄s
);

1967 
	}
}

1969 
	gim_«me_1
[]="cfi_cmdset_0001";

1970 
	gim_«me_3
[]="cfi_cmdset_0003";

1972 
__öô
 
	$cfi_öãÀxt_öô
()

1974 
	`öãr_moduÀ_ªgi°î
(
im_«me_1
, 
THIS_MODULE
, &
cfi_cmd£t_0001
);

1975 
	`öãr_moduÀ_ªgi°î
(
im_«me_3
, 
THIS_MODULE
, &
cfi_cmd£t_0001
);

1977 
	}
}

1979 
__exô
 
	$cfi_öãÀxt_exô
()

1981 
	`öãr_moduÀ_uƒegi°î
(
im_«me_1
);

1982 
	`öãr_moduÀ_uƒegi°î
(
im_«me_3
);

1983 
	}
}

1985 
moduÀ_öô
(
cfi_öãÀxt_öô
);

1986 
moduÀ_exô
(
cfi_öãÀxt_exô
);

1988 
MODULE_LICENSE
("GPL");

1989 
MODULE_AUTHOR
("David Woodhouse <dwmw2@infradead.org>Étál.");

1990 
MODULE_DESCRIPTION
("MTD chip driver for Intel/Sharp flash chips");

	@cfi_cmdset_0002.c

15 
	~<löux/moduÀ.h
>

16 
	~<löux/ty≥s.h
>

17 
	~<löux/kî√l.h
>

18 
	~<löux/sched.h
>

19 
	~<asm/io.h
>

20 
	~<asm/byã‹dî.h
>

22 
	~<löux/î∫o.h
>

23 
	~<löux/¶ab.h
>

24 
	~<löux/dñay.h
>

25 
	~<löux/öãºu±.h
>

26 
	~<löux/mtd/m≠.h
>

27 
	~<löux/mtd/cfi.h
>

29 
	#AMD_BOOTLOC_BUG


	)

31 
cfi_amd°d_ªad
 (
mtd_öfo
 *, 
loff_t
, 
size_t
, size_à*, 
u_ch¨
 *);

32 
cfi_amd°d_wrôe
(
mtd_öfo
 *, 
loff_t
, 
size_t
, size_à*, c⁄° 
u_ch¨
 *);

33 
cfi_amd°d_îa£_chù
(
mtd_öfo
 *, 
îa£_öfo
 *);

34 
cfi_amd°d_îa£_⁄esize
(
mtd_öfo
 *, 
îa£_öfo
 *);

35 
cfi_amd°d_îa£_v¨size
(
mtd_öfo
 *, 
îa£_öfo
 *);

36 
cfi_amd°d_sync
 (
mtd_öfo
 *);

37 
cfi_amd°d_su•íd
 (
mtd_öfo
 *);

38 
cfi_amd°d_ªsume
 (
mtd_öfo
 *);

39 
cfi_amd°d_£csi_ªad
 (
mtd_öfo
 *, 
loff_t
, 
size_t
, size_à*, 
u_ch¨
 *);

41 
cfi_amd°d_de°roy
(
mtd_öfo
 *);

43 
mtd_öfo
 *
cfi_cmd£t_0002
(
m≠_öfo
 *, );

44 
mtd_öfo
 *
cfi_amd°d_£tup
 (
m≠_öfo
 *);

47 
mtd_chù_drivî
 
	gcfi_amd°d_chùdrv
 = {

48 
¥obe
: 
NULL
,

49 
de°roy
: 
cfi_amd°d_de°roy
,

50 
«me
: "cfi_cmdset_0002",

51 
moduÀ
: 
THIS_MODULE


54 
mtd_öfo
 *
	$cfi_cmd£t_0002
(
m≠_öfo
 *
m≠
, 
¥im¨y
)

56 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

57 
boŸloc
;

58 
ofs_Á˘‹
 = 
cfi
->
öãæóve
 * cfi->
devi˚_ty≥
;

59 
i
;

60 
__u8
 
maj‹
, 
mö‹
;

61 
__u32
 
ba£
 = 
cfi
->
chùs
[0].
°¨t
;

63 i‡(
cfi
->
cfi_mode
==
CFI_MODE_CFI
){

64 
__u16
 
adr
 = 
¥im¨y
?
cfi
->
cfiq
->
P_ADR
:cfi->cfiq->
A_ADR
;

66 
	`cfi_£nd_gí_cmd
(0x98, 0x55, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

68 
maj‹
 = 
	`cfi_ªad_quîy
(
m≠
, 
ba£
 + (
adr
+3)*
ofs_Á˘‹
);

69 
mö‹
 = 
	`cfi_ªad_quîy
(
m≠
, 
ba£
 + (
adr
+4)*
ofs_Á˘‹
);

71 
	`¥ötk
(
KERN_NOTICE
 " Amd/Fujitsu Extended Query Table v%c.%cát 0x%4.4X\n",

72 
maj‹
, 
mö‹
, 
adr
);

73 
	`cfi_£nd_gí_cmd
(0xf0, 0x55, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

75 
	`cfi_£nd_gí_cmd
(0xØ, 0x555, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

76 
	`cfi_£nd_gí_cmd
(0x55, 0x2Ø, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

77 
	`cfi_£nd_gí_cmd
(0x90, 0x555, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

78 
cfi
->
m‰
 = 
	`cfi_ªad_quîy
(
m≠
, 
ba£
);

79 
cfi
->
id
 = 
	`cfi_ªad_quîy
(
m≠
, 
ba£
 + 
ofs_Á˘‹
);

82 #ifde‡
AMD_BOOTLOC_BUG


83 i‡(((
maj‹
 << 8Ë| 
mö‹
) < 0x3131) {

85 i‡(
cfi
->
id
 & 0x80) {

86 
	`¥ötk
(
KERN_WARNING
 "%s: JEDEC Devi˚ ID i†0x%02X. Assumög brokí CFIÅabÀ.\n", 
m≠
->
«me
, 
cfi
->
id
);

87 
boŸloc
 = 3;

89 
boŸloc
 = 2;

94 
	`cfi_£nd_gí_cmd
(0x98, 0x55, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

95 
boŸloc
 = 
	`cfi_ªad_quîy
(
m≠
, 
ba£
 + (
adr
+15)*
ofs_Á˘‹
);

97 i‡(
boŸloc
 =3 && 
cfi
->
cfiq
->
NumEø£Regi⁄s
 > 1) {

98 
	`¥ötk
(
KERN_WARNING
 "%s: Sw≠pögÉø£Ñegi⁄†f‹ brokí CFIÅabÀ.\n", 
m≠
->
«me
);

100 
i
=0; i<
cfi
->
cfiq
->
NumEø£Regi⁄s
 / 2; i++) {

101 
j
 = (
cfi
->
cfiq
->
NumEø£Regi⁄s
-1)-
i
;

102 
__u32
 
sw≠
;

104 
sw≠
 = 
cfi
->
cfiq
->
Eø£Regi⁄Info
[
i
];

105 
cfi
->
cfiq
->
Eø£Regi⁄Info
[
i
] = cfi->cfiq->Eø£Regi⁄Info[
j
];

106 
cfi
->
cfiq
->
Eø£Regi⁄Info
[
j
] = 
sw≠
;

109 
cfi
->
devi˚_ty≥
) {

110 
CFI_DEVICETYPE_X8
:

111 
cfi
->
addr_u∆ock1
 = 0x555;

112 
cfi
->
addr_u∆ock2
 = 0x2aa;

114 
CFI_DEVICETYPE_X16
:

115 
cfi
->
addr_u∆ock1
 = 0xaaa;

116 i‡(
m≠
->
buswidth
 =
cfi
->
öãæóve
) {

118 
cfi
->
addr_u∆ock2
 = 0x555;

120 
cfi
->
addr_u∆ock2
 = 0x554;

123 
CFI_DEVICETYPE_X32
:

124 
cfi
->
addr_u∆ock1
 = 0x1555;

125 
cfi
->
addr_u∆ock2
 = 0xaaa;

128 
	`¥ötk
(
KERN_NOTICE
 "Eï. Unknow¿cfi_cmd£t_0002 devi˚Åy≥ %d\n", 
cfi
->
devi˚_ty≥
);

129  
NULL
;

133 
i
=0; i< 
cfi
->
numchùs
; i++) {

134 
cfi
->
chùs
[
i
].
w‹d_wrôe_time
 = 1<<cfi->
cfiq
->
W‹dWrôeTimeoutTyp
;

135 
cfi
->
chùs
[
i
].
buf„r_wrôe_time
 = 1<<cfi->
cfiq
->
BufWrôeTimeoutTyp
;

136 
cfi
->
chùs
[
i
].
îa£_time
 = 1<<cfi->
cfiq
->
BlockEø£TimeoutTyp
;

139 
m≠
->
Êdrv
 = &
cfi_amd°d_chùdrv
;

141 
	`cfi_£nd_gí_cmd
(0xf0, 0x55, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

142  
	`cfi_amd°d_£tup
(
m≠
);

143 
	}
}

145 
mtd_öfo
 *
	$cfi_amd°d_£tup
(
m≠_öfo
 *
m≠
)

147 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

148 
mtd_öfo
 *
mtd
;

149 
devsize
 = (1<<
cfi
->
cfiq
->
DevSize
Ë* cfi->
öãæóve
;

151 
mtd
 = 
	`kmÆloc
((*mtd), 
GFP_KERNEL
);

152 
	`¥ötk
(
KERN_NOTICE
 "number of %s chips: %d\n",

153 (
cfi
->
cfi_mode
 =
CFI_MODE_CFI
)?"CFI":"JEDEC",cfi->
numchùs
);

155 i‡(!
mtd
) {

156 
	`¥ötk
(
KERN_WARNING
 "FailedÅoállocate memory for MTD device\n");

157 
£tup_îr
;

160 
	`mem£t
(
mtd
, 0, (*mtd));

161 
mtd
->
¥iv
 = 
m≠
;

162 
mtd
->
ty≥
 = 
MTD_NORFLASH
;

164 
mtd
->
size
 = 
devsize
 * 
cfi
->
numchùs
;

166 i‡(
cfi
->
cfiq
->
NumEø£Regi⁄s
 == 1) {

168 
mtd
->
îa£size
 = ((
cfi
->
cfiq
->
Eø£Regi⁄Info
[0] >> 8Ë& ~0xffË* cfi->
öãæóve
;

170 
off£t
 = 0;

171 
i
,
j
;

173 
mtd
->
numîa£ªgi⁄s
 = 
cfi
->
cfiq
->
NumEø£Regi⁄s
 * cfi->
numchùs
;

174 
mtd
->
îa£ªgi⁄s
 = 
	`kmÆloc
((
mtd_îa£_ªgi⁄_öfo
Ë* mtd->
numîa£ªgi⁄s
, 
GFP_KERNEL
);

175 i‡(!
mtd
->
îa£ªgi⁄s
) {

176 
	`¥ötk
(
KERN_WARNING
 "FailedÅoállocate memory for MTDÉraseÑegion info\n");

177 
£tup_îr
;

180 
i
=0; i<
cfi
->
cfiq
->
NumEø£Regi⁄s
; i++) {

181 
înum
, 
îsize
;

182 
îsize
 = ((
cfi
->
cfiq
->
Eø£Regi⁄Info
[
i
] >> 8Ë& ~0xffË* cfi->
öãæóve
;

183 
înum
 = (
cfi
->
cfiq
->
Eø£Regi⁄Info
[
i
] & 0xffff) + 1;

185 i‡(
mtd
->
îa£size
 < 
îsize
) {

186 
mtd
->
îa£size
 = 
îsize
;

188 
j
=0; j<
cfi
->
numchùs
; j++) {

189 
mtd
->
îa£ªgi⁄s
[(
j
*
cfi
->
cfiq
->
NumEø£Regi⁄s
)+
i
].
off£t
 = (j*
devsize
)+offset;

190 
mtd
->
îa£ªgi⁄s
[(
j
*
cfi
->
cfiq
->
NumEø£Regi⁄s
)+
i
].
îa£size
 = 
îsize
;

191 
mtd
->
îa£ªgi⁄s
[(
j
*
cfi
->
cfiq
->
NumEø£Regi⁄s
)+
i
].
numblocks
 = 
înum
;

193 
off£t
 +(
îsize
 * 
înum
);

195 i‡(
off£t
 !
devsize
) {

197 
	`¥ötk
(
KERN_WARNING
 "Sum o‡ªgi⁄†(%lxË!tŸÆ sizêo‡£ào‡öãæóved chù†(%lx)\n", 
off£t
, 
devsize
);

198 
£tup_îr
;

202 
i
=0; i<
mtd
->
numîa£ªgi⁄s
;i++){

203 
	`¥ötk
("%d: offset=0x%x,size=0x%x,blocks=%d\n",

204 
i
,
mtd
->
îa£ªgi⁄s
[i].
off£t
,

205 
mtd
->
îa£ªgi⁄s
[
i
].
îa£size
,

206 
mtd
->
îa£ªgi⁄s
[
i
].
numblocks
);

211 
CFIDEV_BUSWIDTH
)

217 i‡(
mtd
->
numîa£ªgi⁄s
 > 1)

218 
mtd
->
îa£
 = 
cfi_amd°d_îa£_v¨size
;

221 i‡(((
cfi
->
cfiq
->
Eø£Regi⁄Info
[0] & 0xffff) + 1) == 1)

222 
mtd
->
îa£
 = 
cfi_amd°d_îa£_chù
;

224 
mtd
->
îa£
 = 
cfi_amd°d_îa£_⁄esize
;

225 
mtd
->
ªad
 = 
cfi_amd°d_ªad
;

226 
mtd
->
wrôe
 = 
cfi_amd°d_wrôe
;

230 
	`¥ötk
(
KERN_WARNING
 "Unsupported buswidth\n");

231 
£tup_îr
;

234 i‡(
cfi
->
Á°_¥og
) {

239 
	`¥ötk
(
KERN_NOTICE
 "cfi_cmdset_0002: Disabling fastÖrogramming dueÅo code brokenness.\n");

240 
cfi
->
Á°_¥og
 = 0;

245 if(
cfi
->
m‰
==1){

247 
cfi
->
id
){

255 
mtd
->
ªad_u£r_¥Ÿ_ªg
 = 
cfi_amd°d_£csi_ªad
;

256 
mtd
->
ªad_Á˘_¥Ÿ_ªg
 = 
cfi_amd°d_£csi_ªad
;

263 
mtd
->
sync
 = 
cfi_amd°d_sync
;

264 
mtd
->
su•íd
 = 
cfi_amd°d_su•íd
;

265 
mtd
->
ªsume
 = 
cfi_amd°d_ªsume
;

266 
mtd
->
Êags
 = 
MTD_CAP_NORFLASH
;

267 
m≠
->
Êdrv
 = &
cfi_amd°d_chùdrv
;

268 
mtd
->
«me
 = 
m≠
->name;

269 
MOD_INC_USE_COUNT
;

270  
mtd
;

272 
£tup_îr
:

273 if(
mtd
) {

274 if(
mtd
->
îa£ªgi⁄s
)

275 
	`k‰ì
(
mtd
->
îa£ªgi⁄s
);

276 
	`k‰ì
(
mtd
);

278 
	`k‰ì
(
cfi
->
cmd£t_¥iv
);

279 
	`k‰ì
(
cfi
->
cfiq
);

280  
NULL
;

281 
	}
}

283 
ölöe
 
	$do_ªad_⁄echù
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
, 
loff_t
 
adr
, 
size_t
 
Àn
, 
u_ch¨
 *
buf
)

285 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

286 
timeo
 = 
jiffõs
 + 
HZ
;

288 
ªåy
:

289 
	`cfi_•ö_lock
(
chù
->
muãx
);

291 i‡(
chù
->
°©e
 !
FL_READY
){

293 
	`¥ötk
(
KERN_DEBUG
 "Waôög f‹ chùÅÿªad, sètu†%d\n", 
chù
->
°©e
);

295 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

296 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

298 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

300 
	`scheduÀ
();

301 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

303 if(
	`sig«l_≥ndög
(
cuºít
))

304  -
EINTR
;

306 
timeo
 = 
jiffõs
 + 
HZ
;

308 
ªåy
;

311 
adr
 +
chù
->
°¨t
;

313 
chù
->
°©e
 = 
FL_READY
;

315 
m≠
->
	`c›y_‰om
(m≠, 
buf
, 
adr
, 
Àn
);

317 
	`wake_up
(&
chù
->
wq
);

318 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

321 
	}
}

323 
	$cfi_amd°d_ªad
 (
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
, size_à*
ªéí
, 
u_ch¨
 *
buf
)

325 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

326 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

327 
ofs
;

328 
chùnum
;

329 
ªt
 = 0;

333 
chùnum
 = (
‰om
 >> 
cfi
->
chùshi·
);

334 
ofs
 = 
‰om
 - (
chùnum
 << 
cfi
->
chùshi·
);

337 *
ªéí
 = 0;

339 
Àn
) {

340 
thi¶í
;

342 i‡(
chùnum
 >
cfi
->
numchùs
)

345 i‡((
Àn
 + 
ofs
 -1Ë>> 
cfi
->
chùshi·
)

346 
thi¶í
 = (1<<
cfi
->
chùshi·
Ë- 
ofs
;

348 
thi¶í
 = 
Àn
;

350 
ªt
 = 
	`do_ªad_⁄echù
(
m≠
, &
cfi
->
chùs
[
chùnum
], 
ofs
, 
thi¶í
, 
buf
);

351 i‡(
ªt
)

354 *
ªéí
 +
thi¶í
;

355 
Àn
 -
thi¶í
;

356 
buf
 +
thi¶í
;

358 
ofs
 = 0;

359 
chùnum
++;

361  
ªt
;

362 
	}
}

364 
ölöe
 
	$do_ªad_£csi_⁄echù
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
, 
loff_t
 
adr
, 
size_t
 
Àn
, 
u_ch¨
 *
buf
)

366 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

367 
timeo
 = 
jiffõs
 + 
HZ
;

368 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

370 
ªåy
:

371 
	`cfi_•ö_lock
(
chù
->
muãx
);

373 i‡(
chù
->
°©e
 !
FL_READY
){

375 
	`¥ötk
(
KERN_DEBUG
 "Waôög f‹ chùÅÿªad, sètu†%d\n", 
chù
->
°©e
);

377 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

378 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

380 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

382 
	`scheduÀ
();

383 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

385 if(
	`sig«l_≥ndög
(
cuºít
))

386  -
EINTR
;

388 
timeo
 = 
jiffõs
 + 
HZ
;

390 
ªåy
;

393 
adr
 +
chù
->
°¨t
;

395 
chù
->
°©e
 = 
FL_READY
;

397 
	`cfi_£nd_gí_cmd
(0xAA, 
cfi
->
addr_u∆ock1
, 
chù
->
°¨t
, 
m≠
, cfi, cfi->
devi˚_ty≥
, 
NULL
);

398 
	`cfi_£nd_gí_cmd
(0x55, 
cfi
->
addr_u∆ock2
, 
chù
->
°¨t
, 
m≠
, cfi, cfi->
devi˚_ty≥
, 
NULL
);

399 
	`cfi_£nd_gí_cmd
(0x88, 
cfi
->
addr_u∆ock1
, 
chù
->
°¨t
, 
m≠
, cfi, cfi->
devi˚_ty≥
, 
NULL
);

401 
m≠
->
	`c›y_‰om
(m≠, 
buf
, 
adr
, 
Àn
);

403 
	`cfi_£nd_gí_cmd
(0xAA, 
cfi
->
addr_u∆ock1
, 
chù
->
°¨t
, 
m≠
, cfi, cfi->
devi˚_ty≥
, 
NULL
);

404 
	`cfi_£nd_gí_cmd
(0x55, 
cfi
->
addr_u∆ock2
, 
chù
->
°¨t
, 
m≠
, cfi, cfi->
devi˚_ty≥
, 
NULL
);

405 
	`cfi_£nd_gí_cmd
(0x90, 
cfi
->
addr_u∆ock1
, 
chù
->
°¨t
, 
m≠
, cfi, cfi->
devi˚_ty≥
, 
NULL
);

406 
	`cfi_£nd_gí_cmd
(0x00, 
cfi
->
addr_u∆ock1
, 
chù
->
°¨t
, 
m≠
, cfi, cfi->
devi˚_ty≥
, 
NULL
);

408 
	`wake_up
(&
chù
->
wq
);

409 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

412 
	}
}

414 
	$cfi_amd°d_£csi_ªad
 (
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
, size_à*
ªéí
, 
u_ch¨
 *
buf
)

416 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

417 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

418 
ofs
;

419 
chùnum
;

420 
ªt
 = 0;

426 
chùnum
=
‰om
>>3;

427 
ofs
=
‰om
 & 7;

430 *
ªéí
 = 0;

432 
Àn
) {

433 
thi¶í
;

435 i‡(
chùnum
 >
cfi
->
numchùs
)

438 i‡((
Àn
 + 
ofs
 -1) >> 3)

439 
thi¶í
 = (1<<3Ë- 
ofs
;

441 
thi¶í
 = 
Àn
;

443 
ªt
 = 
	`do_ªad_£csi_⁄echù
(
m≠
, &
cfi
->
chùs
[
chùnum
], 
ofs
, 
thi¶í
, 
buf
);

444 i‡(
ªt
)

447 *
ªéí
 +
thi¶í
;

448 
Àn
 -
thi¶í
;

449 
buf
 +
thi¶í
;

451 
ofs
 = 0;

452 
chùnum
++;

454  
ªt
;

455 
	}
}

457 
	$do_wrôe_⁄ew‹d
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
, 
adr
, 
__u32
 
d©um
, 
Á°
)

459 
timeo
 = 
jiffõs
 + 
HZ
;

460 
ﬁd°©us
, 
°©us
;

461 
dq6
, 
dq5
;

462 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

463 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

464 
ªt
 = 0;

466 
ªåy
:

467 
	`cfi_•ö_lock
(
chù
->
muãx
);

469 i‡(
chù
->
°©e
 !
FL_READY
) {

471 
	`¥ötk
(
KERN_DEBUG
 "Waôög f‹ chùÅÿwrôe, sètu†%d\n", 
chù
->
°©e
);

473 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

474 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

476 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

478 
	`scheduÀ
();

479 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

481 
	`¥ötk
(
KERN_DEBUG
 "Wake upÅo write:\n");

482 if(
	`sig«l_≥ndög
(
cuºít
))

483  -
EINTR
;

485 
timeo
 = 
jiffõs
 + 
HZ
;

487 
ªåy
;

490 
chù
->
°©e
 = 
FL_WRITING
;

492 
adr
 +
chù
->
°¨t
;

493 
	`ENABLE_VPP
(
m≠
);

494 i‡(
Á°
) {

495 
	`cfi_£nd_gí_cmd
(0xA0, 0, 
chù
->
°¨t
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

498 
	`cfi_£nd_gí_cmd
(0xAA, 
cfi
->
addr_u∆ock1
, 
chù
->
°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

499 
	`cfi_£nd_gí_cmd
(0x55, 
cfi
->
addr_u∆ock2
, 
chù
->
°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

500 
	`cfi_£nd_gí_cmd
(0xA0, 
cfi
->
addr_u∆ock1
, 
chù
->
°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

503 
	`cfi_wrôe
(
m≠
, 
d©um
, 
adr
);

505 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

507 
	`cfi_udñay
(16);

508 
	`cfi_•ö_lock
(
chù
->
muãx
);

513 
dq6
 = 
	`CMD
(1<<6);

514 
dq5
 = 
	`CMD
(1<<5);

515 
timeo
 = 
jiffõs
 + (
HZ
/10) + 1;

517 
ﬁd°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

518 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

520  (
°©us
 & 
dq6
Ë!(
ﬁd°©us
 & dq6) &&

521 (
°©us
 & 
dq5
) != dq5 &&

522 !
	`time_a·î
(
jiffõs
, 
timeo
) ) {

524 i‡(
	`√ed_ªsched
()) {

525 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

526 
	`yõld
();

527 
	`cfi_•ö_lock
(
chù
->
muãx
);

529 
	`udñay
(1);

531 
ﬁd°©us
 = 
	`cfi_ªad
–
m≠
, 
adr
 );

532 
°©us
 = 
	`cfi_ªad
–
m≠
, 
adr
 );

535 if–(
°©us
 & 
dq6
Ë!(
ﬁd°©us
 & dq6) ) {

537 if–(
°©us
 & 
dq5
) == dq5 ) {

541 
ﬁd°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

542 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

544 i‡–(
ﬁd°©us
 & 0x00FFË=(
°©us
 & 0x00FF) ) {

546 
	`¥ötk
(
KERN_WARNING
 "Warning: DQ5Ñaised whileÖrogram operation was inÖrogress, however operation completed OK\n" );

550 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xF0), 
chù
->
°¨t
);

551 
	`¥ötk
(
KERN_WARNING
 "I¡î«»Êash devi˚Åimeouà± A occuºed o∏wrôê›î©i⁄ wa†≥rf‹med whûêÊash wa†¥ogømmög.Åimeout=%d\n",
chù
->
w‹d_wrôe_time
 );

554 
	`¥ötk
(
KERN_WARNING
 "Waiting for writeÅo completeÅimed out in do_write_oneword.");

556 
chù
->
°©e
 = 
FL_READY
;

557 
	`wake_up
(&
chù
->
wq
);

558 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

559 
	`DISABLE_VPP
(
m≠
);

560 
ªt
 = -
EIO
;

564 
	`DISABLE_VPP
(
m≠
);

565 
chù
->
°©e
 = 
FL_READY
;

566 
	`wake_up
(&
chù
->
wq
);

567 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

569  
ªt
;

570 
	}
}

572 
	$cfi_amd°d_wrôe
 (
mtd_öfo
 *
mtd
, 
loff_t
 
to
 , 
size_t
 
Àn
, size_à*
ªéí
, c⁄° 
u_ch¨
 *
buf
)

574 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

575 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

576 
ªt
 = 0;

577 
chùnum
;

578 
ofs
, 
chù°¨t
;

580 *
ªéí
 = 0;

581 i‡(!
Àn
)

584 
chùnum
 = 
to
 >> 
cfi
->
chùshi·
;

585 
ofs
 = 
to
 - (
chùnum
 << 
cfi
->
chùshi·
);

586 
chù°¨t
 = 
cfi
->
chùs
[
chùnum
].
°¨t
;

589 i‡(
ofs
 & (
CFIDEV_BUSWIDTH
-1)) {

590 
bus_ofs
 = 
ofs
 & ~(
CFIDEV_BUSWIDTH
-1);

591 
i
 = 
ofs
 - 
bus_ofs
;

592 
n
 = 0;

593 
u_ch¨
 
tmp_buf
[4];

594 
__u32
 
d©um
;

596 
m≠
->
	`c›y_‰om
(m≠, 
tmp_buf
, 
bus_ofs
 + 
cfi
->
chùs
[
chùnum
].
°¨t
, 
CFIDEV_BUSWIDTH
);

597 
Àn
 && 
i
 < 
CFIDEV_BUSWIDTH
)

598 
tmp_buf
[
i
++] = 
buf
[
n
++], 
Àn
--;

600 i‡(
	`cfi_buswidth_is_2
()) {

601 
d©um
 = *(
__u16
*)
tmp_buf
;

602 } i‡(
	`cfi_buswidth_is_4
()) {

603 
d©um
 = *(
__u32
*)
tmp_buf
;

605  -
EINVAL
;

608 
ªt
 = 
	`do_wrôe_⁄ew‹d
(
m≠
, &
cfi
->
chùs
[
chùnum
],

609 
bus_ofs
, 
d©um
, 0);

610 i‡(
ªt
)

611  
ªt
;

613 
ofs
 +
n
;

614 
buf
 +
n
;

615 (*
ªéí
Ë+
n
;

617 i‡(
ofs
 >> 
cfi
->
chùshi·
) {

618 
chùnum
 ++;

619 
ofs
 = 0;

620 i‡(
chùnum
 =
cfi
->
numchùs
)

625 i‡(
cfi
->
Á°_¥og
) {

627 
	`cfi_£nd_gí_cmd
(0xAA, 
cfi
->
addr_u∆ock1
, 
chù°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

628 
	`cfi_£nd_gí_cmd
(0x55, 
cfi
->
addr_u∆ock2
, 
chù°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

629 
	`cfi_£nd_gí_cmd
(0x20, 
cfi
->
addr_u∆ock1
, 
chù°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

633 
Àn
 >
CFIDEV_BUSWIDTH
) {

634 
__u32
 
d©um
;

636 i‡(
	`cfi_buswidth_is_1
()) {

637 
d©um
 = *(
__u8
*)
buf
;

638 } i‡(
	`cfi_buswidth_is_2
()) {

639 
d©um
 = *(
__u16
*)
buf
;

640 } i‡(
	`cfi_buswidth_is_4
()) {

641 
d©um
 = *(
__u32
*)
buf
;

643  -
EINVAL
;

645 
ªt
 = 
	`do_wrôe_⁄ew‹d
(
m≠
, &
cfi
->
chùs
[
chùnum
],

646 
ofs
, 
d©um
, 
cfi
->
Á°_¥og
);

647 i‡(
ªt
) {

648 i‡(
cfi
->
Á°_¥og
){

650 
	`cfi_£nd_gí_cmd
(0x90, 0, 
chù°¨t
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

651 
	`cfi_£nd_gí_cmd
(0x00, 0, 
chù°¨t
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

653  
ªt
;

656 
ofs
 +
CFIDEV_BUSWIDTH
;

657 
buf
 +
CFIDEV_BUSWIDTH
;

658 (*
ªéí
Ë+
CFIDEV_BUSWIDTH
;

659 
Àn
 -
CFIDEV_BUSWIDTH
;

661 i‡(
ofs
 >> 
cfi
->
chùshi·
) {

662 i‡(
cfi
->
Á°_¥og
){

664 
	`cfi_£nd_gí_cmd
(0x90, 0, 
chù°¨t
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

665 
	`cfi_£nd_gí_cmd
(0x00, 0, 
chù°¨t
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

668 
chùnum
 ++;

669 
ofs
 = 0;

670 i‡(
chùnum
 =
cfi
->
numchùs
)

672 
chù°¨t
 = 
cfi
->
chùs
[
chùnum
].
°¨t
;

673 i‡(
cfi
->
Á°_¥og
){

675 
	`cfi_£nd_gí_cmd
(0xAA, 
cfi
->
addr_u∆ock1
, 
chù°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

676 
	`cfi_£nd_gí_cmd
(0x55, 
cfi
->
addr_u∆ock2
, 
chù°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

677 
	`cfi_£nd_gí_cmd
(0x20, 
cfi
->
addr_u∆ock1
, 
chù°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

682 i‡(
cfi
->
Á°_¥og
){

684 
	`cfi_£nd_gí_cmd
(0x90, 0, 
chù°¨t
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

685 
	`cfi_£nd_gí_cmd
(0x00, 0, 
chù°¨t
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

689 i‡(
Àn
 & (
CFIDEV_BUSWIDTH
-1)) {

690 
i
 = 0, 
n
 = 0;

691 
u_ch¨
 
tmp_buf
[4];

692 
__u32
 
d©um
;

694 
m≠
->
	`c›y_‰om
(m≠, 
tmp_buf
, 
ofs
 + 
cfi
->
chùs
[
chùnum
].
°¨t
, 
CFIDEV_BUSWIDTH
);

695 
Àn
--)

696 
tmp_buf
[
i
++] = 
buf
[
n
++];

698 i‡(
	`cfi_buswidth_is_2
()) {

699 
d©um
 = *(
__u16
*)
tmp_buf
;

700 } i‡(
	`cfi_buswidth_is_4
()) {

701 
d©um
 = *(
__u32
*)
tmp_buf
;

703  -
EINVAL
;

706 
ªt
 = 
	`do_wrôe_⁄ew‹d
(
m≠
, &
cfi
->
chùs
[
chùnum
],

707 
ofs
, 
d©um
, 0);

708 i‡(
ªt
)

709  
ªt
;

711 (*
ªéí
Ë+
n
;

715 
	}
}

717 
ölöe
 
	$do_îa£_chù
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
)

719 
ﬁd°©us
, 
°©us
;

720 
dq6
, 
dq5
;

721 
timeo
 = 
jiffõs
 + 
HZ
;

722 
adr
;

723 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

724 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

726 
ªåy
:

727 
	`cfi_•ö_lock
(
chù
->
muãx
);

729 i‡(
chù
->
°©e
 !
FL_READY
){

730 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

731 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

733 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

735 
	`scheduÀ
();

736 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

738 if(
	`sig«l_≥ndög
(
cuºít
))

739  -
EINTR
;

741 
timeo
 = 
jiffõs
 + 
HZ
;

743 
ªåy
;

746 
chù
->
°©e
 = 
FL_ERASING
;

751 
	`ENABLE_VPP
(
m≠
);

752 
	`cfi_£nd_gí_cmd
(0xAA, 
cfi
->
addr_u∆ock1
, 
chù
->
°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

753 
	`cfi_£nd_gí_cmd
(0x55, 
cfi
->
addr_u∆ock2
, 
chù
->
°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

754 
	`cfi_£nd_gí_cmd
(0x80, 
cfi
->
addr_u∆ock1
, 
chù
->
°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

755 
	`cfi_£nd_gí_cmd
(0xAA, 
cfi
->
addr_u∆ock1
, 
chù
->
°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

756 
	`cfi_£nd_gí_cmd
(0x55, 
cfi
->
addr_u∆ock2
, 
chù
->
°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

757 
	`cfi_£nd_gí_cmd
(0x10, 
cfi
->
addr_u∆ock1
, 
chù
->
°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

758 
timeo
 = 
jiffõs
 + (
HZ
*20);

759 
adr
 = 
cfi
->
addr_u∆ock1
;

770 
dq6
 = 
	`CMD
(1<<6);

771 
dq5
 = 
	`CMD
(1<<5);

773 
ﬁd°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

774 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

775  ((
°©us
 & 
dq6
Ë!(
ﬁd°©us
 & dq6)) &&

776 ((
°©us
 & 
dq5
) != dq5) &&

777 !
	`time_a·î
(
jiffõs
, 
timeo
)) {

778 
waô_ªps
;

781 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

782 
	`scheduÀ_timeout
(
HZ
/100);

783 
	`cfi_•ö_lock
(
chù
->
muãx
);

785 i‡(
chù
->
°©e
 !
FL_ERASING
) {

787 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

788 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

790 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

791 
	`¥ötk
("erase suspended. Sleeping\n");

793 
	`scheduÀ
();

794 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

796 i‡(
	`sig«l_≥ndög
(
cuºít
))

797  -
EINTR
;

799 
timeo
 = 
jiffõs
 + (
HZ
*2);

800 
	`cfi_•ö_lock
(
chù
->
muãx
);

805 
waô_ªps
 = 0;

806 (
waô_ªps
 < 100) &&

807 ((
°©us
 & 
dq6
Ë!(
ﬁd°©us
 & dq6)) &&

808 ((
°©us
 & 
dq5
) != dq5);

809 
waô_ªps
++) {

812 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

814 
	`cfi_udñay
(1);

816 
	`cfi_•ö_lock
(
chù
->
muãx
);

817 
ﬁd°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

818 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

820 
ﬁd°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

821 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

823 i‡((
°©us
 & 
dq6
Ë!(
ﬁd°©us
 & dq6)) {

825 i‡((
°©us
 & 
dq5
) == dq5) {

827 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xF0), 
chù
->
°¨t
);

829 
chù
->
°©e
 = 
FL_READY
;

830 
	`wake_up
(&
chù
->
wq
);

831 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

832 
	`¥ötk
("waiting forÉraseÅo completeÅimed out.");

833 
	`DISABLE_VPP
(
m≠
);

834  -
EIO
;

836 
	`DISABLE_VPP
(
m≠
);

837 
chù
->
°©e
 = 
FL_READY
;

838 
	`wake_up
(&
chù
->
wq
);

839 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

842 
	}
}

844 
ölöe
 
	$do_îa£_⁄eblock
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
, 
adr
)

846 
ﬁd°©us
, 
°©us
;

847 
dq6
, 
dq5
;

848 
timeo
 = 
jiffõs
 + 
HZ
;

849 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

850 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

852 
ªåy
:

853 
	`cfi_•ö_lock
(
chù
->
muãx
);

855 i‡(
chù
->
°©e
 !
FL_READY
){

856 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

857 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

859 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

861 
	`scheduÀ
();

862 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

864 if(
	`sig«l_≥ndög
(
cuºít
))

865  -
EINTR
;

867 
timeo
 = 
jiffõs
 + 
HZ
;

869 
ªåy
;

872 
chù
->
°©e
 = 
FL_ERASING
;

874 
adr
 +
chù
->
°¨t
;

875 
	`ENABLE_VPP
(
m≠
);

876 
	`cfi_£nd_gí_cmd
(0xAA, 
cfi
->
addr_u∆ock1
, 
chù
->
°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

877 
	`cfi_£nd_gí_cmd
(0x55, 
cfi
->
addr_u∆ock2
, 
chù
->
°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

878 
	`cfi_£nd_gí_cmd
(0x80, 
cfi
->
addr_u∆ock1
, 
chù
->
°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

879 
	`cfi_£nd_gí_cmd
(0xAA, 
cfi
->
addr_u∆ock1
, 
chù
->
°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

880 
	`cfi_£nd_gí_cmd
(0x55, 
cfi
->
addr_u∆ock2
, 
chù
->
°¨t
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

881 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x30), 
adr
);

883 
timeo
 = 
jiffõs
 + (
HZ
*20);

894 
dq6
 = 
	`CMD
(1<<6);

895 
dq5
 = 
	`CMD
(1<<5);

897 
ﬁd°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

898 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

899  ((
°©us
 & 
dq6
Ë!(
ﬁd°©us
 & dq6)) &&

900 ((
°©us
 & 
dq5
) != dq5) &&

901 !
	`time_a·î
(
jiffõs
, 
timeo
)) {

902 
waô_ªps
;

905 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

906 
	`scheduÀ_timeout
(
HZ
/100);

907 
	`cfi_•ö_lock
(
chù
->
muãx
);

909 i‡(
chù
->
°©e
 !
FL_ERASING
) {

911 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

912 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

914 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

915 
	`¥ötk
(
KERN_DEBUG
 "erase suspended. Sleeping\n");

917 
	`scheduÀ
();

918 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

920 i‡(
	`sig«l_≥ndög
(
cuºít
))

921  -
EINTR
;

923 
timeo
 = 
jiffõs
 + (
HZ
*2);

924 
	`cfi_•ö_lock
(
chù
->
muãx
);

929 
waô_ªps
 = 0;

930 (
waô_ªps
 < 100) &&

931 ((
°©us
 & 
dq6
Ë!(
ﬁd°©us
 & dq6)) &&

932 ((
°©us
 & 
dq5
) != dq5);

933 
waô_ªps
++) {

936 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

938 
	`cfi_udñay
(1);

940 
	`cfi_•ö_lock
(
chù
->
muãx
);

941 
ﬁd°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

942 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

944 
ﬁd°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

945 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

947 if–(
°©us
 & 
dq6
Ë!(
ﬁd°©us
 & dq6) )

950 if––
°©us
 & 
dq5
 ) == dq5 )

954 
ﬁd°©us
 = 
	`cfi_ªad
–
m≠
, 
adr
 );

955 
°©us
 = 
	`cfi_ªad
–
m≠
, 
adr
 );

957 if––
ﬁd°©us
 & 0x00FF ) =–
°©us
 & 0x00FF ) )

959 
	`¥ötk
( "Warning: DQ5Ñaised whileÉrase operation was inÖrogress, butÉrase completed OK\n" );

964 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xF0), 
chù
->
°¨t
);

965 
	`¥ötk
–
KERN_WARNING
 "Internal flash deviceÅimeoutÖt B occured or write operation wasÖerformed while flash wasÉrasing\n" );

970 
	`¥ötk
( "Waiting forÉraseÅo completeÅimed out in do_erase_oneblock.");

972 
chù
->
°©e
 = 
FL_READY
;

973 
	`wake_up
(&
chù
->
wq
);

974 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

975 
	`DISABLE_VPP
(
m≠
);

976  -
EIO
;

980 
	`DISABLE_VPP
(
m≠
);

981 
chù
->
°©e
 = 
FL_READY
;

982 
	`wake_up
(&
chù
->
wq
);

983 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

985 
	}
}

987 
	$cfi_amd°d_îa£_v¨size
(
mtd_öfo
 *
mtd
, 
îa£_öfo
 *
ö°r
)

989 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

990 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

991 
adr
, 
Àn
;

992 
chùnum
, 
ªt
 = 0;

993 
i
, 
fú°
;

994 
mtd_îa£_ªgi⁄_öfo
 *
ªgi⁄s
 = 
mtd
->
îa£ªgi⁄s
;

996 i‡(
ö°r
->
addr
 > 
mtd
->
size
)

997  -
EINVAL
;

999 i‡((
ö°r
->
Àn
 + in°r->
addr
Ë> 
mtd
->
size
)

1000  -
EINVAL
;

1006 
i
 = 0;

1014 
i
 < 
mtd
->
numîa£ªgi⁄s
 && 
ö°r
->
addr
 >
ªgi⁄s
[i].
off£t
)

1015 
i
++;

1016 
i
--;

1024 i‡(
ö°r
->
addr
 & (
ªgi⁄s
[
i
].
îa£size
-1))

1025  -
EINVAL
;

1028 
fú°
 = 
i
;

1034 
i
<
mtd
->
numîa£ªgi⁄s
 && (
ö°r
->
addr
 + in°r->
Àn
Ë>
ªgi⁄s
[i].
off£t
)

1035 
i
++;

1040 
i
--;

1042 i‡((
ö°r
->
addr
 + in°r->
Àn
Ë& (
ªgi⁄s
[
i
].
îa£size
-1))

1043  -
EINVAL
;

1045 
chùnum
 = 
ö°r
->
addr
 >> 
cfi
->
chùshi·
;

1046 
adr
 = 
ö°r
->
addr
 - (
chùnum
 << 
cfi
->
chùshi·
);

1047 
Àn
 = 
ö°r
->len;

1049 
i
=
fú°
;

1051 
Àn
) {

1052 
ªt
 = 
	`do_îa£_⁄eblock
(
m≠
, &
cfi
->
chùs
[
chùnum
], 
adr
);

1054 i‡(
ªt
)

1055  
ªt
;

1057 
adr
 +
ªgi⁄s
[
i
].
îa£size
;

1058 
Àn
 -
ªgi⁄s
[
i
].
îa£size
;

1060 i‡(
adr
 % (1<< 
cfi
->
chùshi·
Ë=((
ªgi⁄s
[
i
].
off£t
 + (ªgi⁄s[i].
îa£size
 *Ñegi⁄s[i].
numblocks
)) %( 1<< cfi->chipshift)))

1061 
i
++;

1063 i‡(
adr
 >> 
cfi
->
chùshi·
) {

1064 
adr
 = 0;

1065 
chùnum
++;

1067 i‡(
chùnum
 >
cfi
->
numchùs
)

1072 
ö°r
->
°©e
 = 
MTD_ERASE_DONE
;

1073 i‡(
ö°r
->
ˇŒback
)

1074 
ö°r
->
	`ˇŒback
(instr);

1077 
	}
}

1079 
	$cfi_amd°d_îa£_⁄esize
(
mtd_öfo
 *
mtd
, 
îa£_öfo
 *
ö°r
)

1081 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1082 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1083 
adr
, 
Àn
;

1084 
chùnum
, 
ªt
 = 0;

1086 i‡(
ö°r
->
addr
 & (
mtd
->
îa£size
 - 1))

1087  -
EINVAL
;

1089 i‡(
ö°r
->
Àn
 & (
mtd
->
îa£size
 -1))

1090  -
EINVAL
;

1092 i‡((
ö°r
->
Àn
 + in°r->
addr
Ë> 
mtd
->
size
)

1093  -
EINVAL
;

1095 
chùnum
 = 
ö°r
->
addr
 >> 
cfi
->
chùshi·
;

1096 
adr
 = 
ö°r
->
addr
 - (
chùnum
 << 
cfi
->
chùshi·
);

1097 
Àn
 = 
ö°r
->len;

1099 
Àn
) {

1100 
ªt
 = 
	`do_îa£_⁄eblock
(
m≠
, &
cfi
->
chùs
[
chùnum
], 
adr
);

1102 i‡(
ªt
)

1103  
ªt
;

1105 
adr
 +
mtd
->
îa£size
;

1106 
Àn
 -
mtd
->
îa£size
;

1108 i‡(
adr
 >> 
cfi
->
chùshi·
) {

1109 
adr
 = 0;

1110 
chùnum
++;

1112 i‡(
chùnum
 >
cfi
->
numchùs
)

1117 
ö°r
->
°©e
 = 
MTD_ERASE_DONE
;

1118 i‡(
ö°r
->
ˇŒback
)

1119 
ö°r
->
	`ˇŒback
(instr);

1122 
	}
}

1124 
	$cfi_amd°d_îa£_chù
(
mtd_öfo
 *
mtd
, 
îa£_öfo
 *
ö°r
)

1126 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1127 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1128 
ªt
 = 0;

1130 i‡(
ö°r
->
addr
 != 0)

1131  -
EINVAL
;

1133 i‡(
ö°r
->
Àn
 !
mtd
->
size
)

1134  -
EINVAL
;

1136 
ªt
 = 
	`do_îa£_chù
(
m≠
, &
cfi
->
chùs
[0]);

1137 i‡(
ªt
)

1138  
ªt
;

1140 
ö°r
->
°©e
 = 
MTD_ERASE_DONE
;

1141 i‡(
ö°r
->
ˇŒback
)

1142 
ö°r
->
	`ˇŒback
(instr);

1145 
	}
}

1147 
	$cfi_amd°d_sync
 (
mtd_öfo
 *
mtd
)

1149 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1150 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1151 
i
;

1152 
Êchù
 *
chù
;

1153 
ªt
 = 0;

1154 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

1156 
i
=0; !
ªt
 && i<
cfi
->
numchùs
; i++) {

1157 
chù
 = &
cfi
->
chùs
[
i
];

1159 
ªåy
:

1160 
	`cfi_•ö_lock
(
chù
->
muãx
);

1162 
chù
->
°©e
) {

1163 
FL_READY
:

1164 
FL_STATUS
:

1165 
FL_CFI_QUERY
:

1166 
FL_JEDEC_QUERY
:

1167 
chù
->
ﬁd°©e
 = chù->
°©e
;

1168 
chù
->
°©e
 = 
FL_SYNCING
;

1173 
FL_SYNCING
:

1174 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

1179 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

1181 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

1183 
	`scheduÀ
();

1185 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

1187 
ªåy
;

1193 
i
--; i >=0; i--) {

1194 
chù
 = &
cfi
->
chùs
[
i
];

1196 
	`cfi_•ö_lock
(
chù
->
muãx
);

1198 i‡(
chù
->
°©e
 =
FL_SYNCING
) {

1199 
chù
->
°©e
 = chù->
ﬁd°©e
;

1200 
	`wake_up
(&
chù
->
wq
);

1202 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

1204 
	}
}

1207 
	$cfi_amd°d_su•íd
(
mtd_öfo
 *
mtd
)

1209 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1210 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1211 
i
;

1212 
Êchù
 *
chù
;

1213 
ªt
 = 0;

1215 
i
=0; !
ªt
 && i<
cfi
->
numchùs
; i++) {

1216 
chù
 = &
cfi
->
chùs
[
i
];

1218 
	`cfi_•ö_lock
(
chù
->
muãx
);

1220 
chù
->
°©e
) {

1221 
FL_READY
:

1222 
FL_STATUS
:

1223 
FL_CFI_QUERY
:

1224 
FL_JEDEC_QUERY
:

1225 
chù
->
ﬁd°©e
 = chù->
°©e
;

1226 
chù
->
°©e
 = 
FL_PM_SUSPENDED
;

1231 
FL_PM_SUSPENDED
:

1235 
ªt
 = -
EAGAIN
;

1238 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

1243 i‡(
ªt
) {

1244 
i
--; i >=0; i--) {

1245 
chù
 = &
cfi
->
chùs
[
i
];

1247 
	`cfi_•ö_lock
(
chù
->
muãx
);

1249 i‡(
chù
->
°©e
 =
FL_PM_SUSPENDED
) {

1250 
chù
->
°©e
 = chù->
ﬁd°©e
;

1251 
	`wake_up
(&
chù
->
wq
);

1253 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

1257  
ªt
;

1258 
	}
}

1260 
	$cfi_amd°d_ªsume
(
mtd_öfo
 *
mtd
)

1262 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1263 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1264 
i
;

1265 
Êchù
 *
chù
;

1267 
i
=0; i<
cfi
->
numchùs
; i++) {

1269 
chù
 = &
cfi
->
chùs
[
i
];

1271 
	`cfi_•ö_lock
(
chù
->
muãx
);

1273 i‡(
chù
->
°©e
 =
FL_PM_SUSPENDED
) {

1274 
chù
->
°©e
 = 
FL_READY
;

1275 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xF0), 
chù
->
°¨t
);

1276 
	`wake_up
(&
chù
->
wq
);

1279 
	`¥ötk
(
KERN_ERR
 "Argh. ChipÇot in PM_SUSPENDED state uponÑesume()\n");

1281 
	`cfi_•ö_u∆ock
(
chù
->
muãx
);

1283 
	}
}

1285 
	$cfi_amd°d_de°roy
(
mtd_öfo
 *
mtd
)

1287 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1288 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1289 
	`k‰ì
(
cfi
->
cmd£t_¥iv
);

1290 
	`k‰ì
(
cfi
->
cfiq
);

1291 
	`k‰ì
(
cfi
);

1292 
	`k‰ì
(
mtd
->
îa£ªgi⁄s
);

1293 
	}
}

1295 
	gim_«me
[]="cfi_cmdset_0002";

1297 
__öô
 
	$cfi_amd°d_öô
()

1299 
	`öãr_moduÀ_ªgi°î
(
im_«me
, 
THIS_MODULE
, &
cfi_cmd£t_0002
);

1301 
	}
}

1303 
__exô
 
	$cfi_amd°d_exô
()

1305 
	`öãr_moduÀ_uƒegi°î
(
im_«me
);

1306 
	}
}

1308 
moduÀ_öô
(
cfi_amd°d_öô
);

1309 
moduÀ_exô
(
cfi_amd°d_exô
);

1311 
MODULE_LICENSE
("GPL");

1312 
MODULE_AUTHOR
("Crossnet Co. <info@crossnet.co.jp>Étál.");

1313 
MODULE_DESCRIPTION
("MTD chip driver for AMD/Fujitsu flash chips");

	@cfi_cmdset_0020.c

20 
	~<löux/moduÀ.h
>

21 
	~<löux/ty≥s.h
>

22 
	~<löux/kî√l.h
>

23 
	~<löux/sched.h
>

24 
	~<asm/io.h
>

25 
	~<asm/byã‹dî.h
>

27 
	~<löux/î∫o.h
>

28 
	~<löux/¶ab.h
>

29 
	~<löux/dñay.h
>

30 
	~<löux/öãºu±.h
>

31 
	~<löux/mtd/m≠.h
>

32 
	~<löux/mtd/cfi.h
>

33 
	~<löux/mtd/com∑tmac.h
>

36 
cfi_°Ø_ªad
(
mtd_öfo
 *, 
loff_t
, 
size_t
, size_à*, 
u_ch¨
 *);

37 
cfi_°Ø_wrôe_buf„rs
(
mtd_öfo
 *, 
loff_t
, 
size_t
, size_à*, c⁄° 
u_ch¨
 *);

38 
cfi_°Ø_wrôev
(
mtd_öfo
 *
mtd
, c⁄° 
iovec
 *
vecs
,

39 
cou¡
, 
loff_t
 
to
, 
size_t
 *
ªéí
);

40 
cfi_°Ø_îa£_v¨size
(
mtd_öfo
 *, 
îa£_öfo
 *);

41 
cfi_°Ø_sync
 (
mtd_öfo
 *);

42 
cfi_°Ø_lock
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
, 
size_t
 
Àn
);

43 
cfi_°Ø_u∆ock
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
, 
size_t
 
Àn
);

44 
cfi_°Ø_su•íd
 (
mtd_öfo
 *);

45 
cfi_°Ø_ªsume
 (
mtd_öfo
 *);

47 
cfi_°Ø_de°roy
(
mtd_öfo
 *);

49 
mtd_öfo
 *
cfi_cmd£t_0020
(
m≠_öfo
 *, );

51 
mtd_öfo
 *
cfi_°Ø_£tup
 (
m≠_öfo
 *);

53 
mtd_chù_drivî
 
	gcfi_°Ø_chùdrv
 = {

54 
¥obe
: 
NULL
,

55 
de°roy
: 
cfi_°Ø_de°roy
,

56 
«me
: "cfi_cmdset_0020",

57 
moduÀ
: 
THIS_MODULE


63 #ifde‡
DEBUG_CFI_FEATURES


64 
	$cfi_ãŒ_„©uªs
(
cfi_¥i_öãÀxt
 *
exç
)

66 
i
;

67 
	`¥ötk
(" Fótuª/Comm™d Suµ‹t: %4.4X\n", 
exç
->
FótuªSuµ‹t
);

68 
	`¥ötk
(" - Chù Eø£: %s\n", 
exç
->
FótuªSuµ‹t
&1?"supported":"unsupported");

69 
	`¥ötk
(" - Su•íd Eø£: %s\n", 
exç
->
FótuªSuµ‹t
&2?"supported":"unsupported");

70 
	`¥ötk
(" - Su•íd Progøm: %s\n", 
exç
->
FótuªSuµ‹t
&4?"supported":"unsupported");

71 
	`¥ötk
(" - Legacy Lock/U∆ock: %s\n", 
exç
->
FótuªSuµ‹t
&8?"supported":"unsupported");

72 
	`¥ötk
(" - Queued Eø£: %s\n", 
exç
->
FótuªSuµ‹t
&16?"supported":"unsupported");

73 
	`¥ötk
(" - In°™àblockÜock: %s\n", 
exç
->
FótuªSuµ‹t
&32?"supported":"unsupported");

74 
	`¥ötk
(" - PrŸe˘i⁄ Bôs: %s\n", 
exç
->
FótuªSuµ‹t
&64?"supported":"unsupported");

75 
	`¥ötk
(" - Page-modêªad: %s\n", 
exç
->
FótuªSuµ‹t
&128?"supported":"unsupported");

76 
	`¥ötk
(" - Synchr⁄ou†ªad: %s\n", 
exç
->
FótuªSuµ‹t
&256?"supported":"unsupported");

77 
i
=9; i<32; i++) {

78 i‡(
exç
->
FótuªSuµ‹t
 & (1<<
i
))

79 
	`¥ötk
(" - Unknow¿Bô %X: suµ‹ãd\n", 
i
);

82 
	`¥ötk
(" Suµ‹ãd fun˘i⁄†a·î Su•íd: %2.2X\n", 
exç
->
Su•ídCmdSuµ‹t
);

83 
	`¥ötk
(" - Progømá·î Eø£ Su•íd: %s\n", 
exç
->
Su•ídCmdSuµ‹t
&1?"supported":"unsupported");

84 
i
=1; i<8; i++) {

85 i‡(
exç
->
Su•ídCmdSuµ‹t
 & (1<<
i
))

86 
	`¥ötk
(" - Unknow¿Bô %X: suµ‹ãd\n", 
i
);

89 
	`¥ötk
(" Block Sètu†Regi°î Mask: %4.4X\n", 
exç
->
BlkSètusRegMask
);

90 
	`¥ötk
(" - Lock Bô A˘ive: %s\n", 
exç
->
BlkSètusRegMask
&1?"yes":"no");

91 
	`¥ötk
(" - VÆid Bô A˘ive: %s\n", 
exç
->
BlkSètusRegMask
&2?"yes":"no");

92 
i
=2; i<16; i++) {

93 i‡(
exç
->
BlkSètusRegMask
 & (1<<
i
))

94 
	`¥ötk
(" - Unknow¿Bô %X A˘ive: yes\n",
i
);

97 
	`¥ötk
(" Vcc Logic Supply Optimum Program/Erase Voltage: %d.%d V\n",

98 
exç
->
VccO±imÆ
 >> 8,Éxtp->VccOptimal & 0xf);

99 i‡(
exç
->
VµO±imÆ
)

100 
	`¥ötk
(" Vpp Programming Supply Optimum Program/Erase Voltage: %d.%d V\n",

101 
exç
->
VµO±imÆ
 >> 8,Éxtp->VppOptimal & 0xf);

102 
	}
}

112 
mtd_öfo
 *
	$cfi_cmd£t_0020
(
m≠_öfo
 *
m≠
, 
¥im¨y
)

114 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

115 
i
;

116 
__u32
 
ba£
 = 
cfi
->
chùs
[0].
°¨t
;

118 i‡(
cfi
->
cfi_mode
) {

124 
__u16
 
adr
 = 
¥im¨y
?
cfi
->
cfiq
->
P_ADR
:cfi->cfiq->
A_ADR
;

125 
cfi_¥i_öãÀxt
 *
exç
;

126 
ofs_Á˘‹
 = 
cfi
->
öãæóve
 * cfi->
devi˚_ty≥
;

128 
	`¥ötk
(" ST Mi¸€À˘r⁄ic†Exãnded Quîy TabÀáà0x%4.4X\n", 
adr
);

129 i‡(!
adr
)

130  
NULL
;

133 
	`cfi_£nd_gí_cmd
(0x98, 0x55, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

135 
exç
 = 
	`kmÆloc
((*exç), 
GFP_KERNEL
);

136 i‡(!
exç
) {

137 
	`¥ötk
(
KERN_ERR
 "FailedÅoállocate memory\n");

138  
NULL
;

142 
i
=0; i<(*
exç
); i++) {

143 ((*)
exç
)[
i
] =

144 
	`cfi_ªad_quîy
(
m≠
, (
ba£
+((
adr
+
i
)*
ofs_Á˘‹
)));

147 i‡(
exç
->
Maj‹Vîsi⁄
 != '1' ||

148 (
exç
->
Mö‹Vîsi⁄
 < '0' ||Éxtp->MinorVersion > '2')) {

149 
	`¥ötk
(
KERN_WARNING
 " Unknown staa Extended Query "

150 "vîsi⁄ %c.%c.\n", 
exç
->
Maj‹Vîsi⁄
,

151 
exç
->
Mö‹Vîsi⁄
);

152 
	`k‰ì
(
exç
);

153  
NULL
;

157 
exç
->
FótuªSuµ‹t
 = 
	`cfi32_to_˝u
(extp->FeatureSupport);

158 
exç
->
BlkSètusRegMask
 = 
	`cfi32_to_˝u
(extp->BlkStatusRegMask);

160 #ifde‡
DEBUG_CFI_FEATURES


162 
	`cfi_ãŒ_„©uªs
(
exç
);

166 
cfi
->
cmd£t_¥iv
 = 
exç
;

169 
i
=0; i< 
cfi
->
numchùs
; i++) {

170 
cfi
->
chùs
[
i
].
w‹d_wrôe_time
 = 128;

171 
cfi
->
chùs
[
i
].
buf„r_wrôe_time
 = 128;

172 
cfi
->
chùs
[
i
].
îa£_time
 = 1024;

175 
m≠
->
Êdrv
 = &
cfi_°Ø_chùdrv
;

176 
MOD_INC_USE_COUNT
;

179 
	`cfi_£nd_gí_cmd
(0xff, 0x55, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

180  
	`cfi_°Ø_£tup
(
m≠
);

181 
	}
}

183 
mtd_öfo
 *
	$cfi_°Ø_£tup
(
m≠_öfo
 *
m≠
)

185 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

186 
mtd_öfo
 *
mtd
;

187 
off£t
 = 0;

188 
i
,
j
;

189 
devsize
 = (1<<
cfi
->
cfiq
->
DevSize
Ë* cfi->
öãæóve
;

191 
mtd
 = 
	`kmÆloc
((*mtd), 
GFP_KERNEL
);

194 i‡(!
mtd
) {

195 
	`¥ötk
(
KERN_ERR
 "FailedÅoállocate memory for MTD device\n");

196 
	`k‰ì
(
cfi
->
cmd£t_¥iv
);

197  
NULL
;

200 
	`mem£t
(
mtd
, 0, (*mtd));

201 
mtd
->
¥iv
 = 
m≠
;

202 
mtd
->
ty≥
 = 
MTD_NORFLASH
;

203 
mtd
->
size
 = 
devsize
 * 
cfi
->
numchùs
;

205 
mtd
->
numîa£ªgi⁄s
 = 
cfi
->
cfiq
->
NumEø£Regi⁄s
 * cfi->
numchùs
;

206 
mtd
->
îa£ªgi⁄s
 = 
	`kmÆloc
((
mtd_îa£_ªgi⁄_öfo
)

207 * 
mtd
->
numîa£ªgi⁄s
, 
GFP_KERNEL
);

208 i‡(!
mtd
->
îa£ªgi⁄s
) {

209 
	`¥ötk
(
KERN_ERR
 "FailedÅoállocate memory for MTDÉraseÑegion info\n");

210 
	`k‰ì
(
cfi
->
cmd£t_¥iv
);

211  
NULL
;

214 
i
=0; i<
cfi
->
cfiq
->
NumEø£Regi⁄s
; i++) {

215 
înum
, 
îsize
;

216 
îsize
 = ((
cfi
->
cfiq
->
Eø£Regi⁄Info
[
i
] >> 8Ë& ~0xffË* cfi->
öãæóve
;

217 
înum
 = (
cfi
->
cfiq
->
Eø£Regi⁄Info
[
i
] & 0xffff) + 1;

219 i‡(
mtd
->
îa£size
 < 
îsize
) {

220 
mtd
->
îa£size
 = 
îsize
;

222 
j
=0; j<
cfi
->
numchùs
; j++) {

223 
mtd
->
îa£ªgi⁄s
[(
j
*
cfi
->
cfiq
->
NumEø£Regi⁄s
)+
i
].
off£t
 = (j*
devsize
)+offset;

224 
mtd
->
îa£ªgi⁄s
[(
j
*
cfi
->
cfiq
->
NumEø£Regi⁄s
)+
i
].
îa£size
 = 
îsize
;

225 
mtd
->
îa£ªgi⁄s
[(
j
*
cfi
->
cfiq
->
NumEø£Regi⁄s
)+
i
].
numblocks
 = 
înum
;

227 
off£t
 +(
îsize
 * 
înum
);

230 i‡(
off£t
 !
devsize
) {

232 
	`¥ötk
(
KERN_WARNING
 "Sum o‡ªgi⁄†(%lxË!tŸÆ sizêo‡£ào‡öãæóved chù†(%lx)\n", 
off£t
, 
devsize
);

233 
	`k‰ì
(
mtd
->
îa£ªgi⁄s
);

234 
	`k‰ì
(
cfi
->
cmd£t_¥iv
);

235  
NULL
;

238 
i
=0; i<
mtd
->
numîa£ªgi⁄s
;i++){

239 
	`¥ötk
(
KERN_DEBUG
 "%d: offset=0x%x,size=0x%x,blocks=%d\n",

240 
i
,
mtd
->
îa£ªgi⁄s
[i].
off£t
,

241 
mtd
->
îa£ªgi⁄s
[
i
].
îa£size
,

242 
mtd
->
îa£ªgi⁄s
[
i
].
numblocks
);

246 
mtd
->
îa£
 = 
cfi_°Ø_îa£_v¨size
;

247 
mtd
->
ªad
 = 
cfi_°Ø_ªad
;

248 
mtd
->
wrôe
 = 
cfi_°Ø_wrôe_buf„rs
;

249 
mtd
->
wrôev
 = 
cfi_°Ø_wrôev
;

250 
mtd
->
sync
 = 
cfi_°Ø_sync
;

251 
mtd
->
lock
 = 
cfi_°Ø_lock
;

252 
mtd
->
u∆ock
 = 
cfi_°Ø_u∆ock
;

253 
mtd
->
su•íd
 = 
cfi_°Ø_su•íd
;

254 
mtd
->
ªsume
 = 
cfi_°Ø_ªsume
;

255 
mtd
->
Êags
 = 
MTD_CAP_NORFLASH
;

256 
mtd
->
Êags
 |
MTD_ECC
;

257 
mtd
->
eccsize
 = 8;

258 
m≠
->
Êdrv
 = &
cfi_°Ø_chùdrv
;

259 
MOD_INC_USE_COUNT
;

260 
mtd
->
«me
 = 
m≠
->name;

261  
mtd
;

262 
	}
}

265 
ölöe
 
	$do_ªad_⁄echù
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
, 
loff_t
 
adr
, 
size_t
 
Àn
, 
u_ch¨
 *
buf
)

267 
__u32
 
°©us
, 
°©us_OK
;

268 
timeo
;

269 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

270 
su•íded
 = 0;

271 
cmd_addr
;

272 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

274 
adr
 +
chù
->
°¨t
;

277 
cmd_addr
 = 
adr
 & ~(
CFIDEV_BUSWIDTH
-1);

280 
°©us_OK
 = 
	`CMD
(0x80);

282 
timeo
 = 
jiffõs
 + 
HZ
;

283 
ªåy
:

284 
	`•ö_lock_bh
(
chù
->
muãx
);

289 
chù
->
°©e
) {

290 
FL_ERASING
:

291 i‡(!((
cfi_¥i_öãÀxt
 *)
cfi
->
cmd£t_¥iv
)->
FótuªSuµ‹t
 & 2)

292 
¶ìp
;

294 
	`cfi_wrôe
 (
m≠
, 
	`CMD
(0xb0), 
cmd_addr
);

300 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
cmd_addr
);

301 
chù
->
ﬁd°©e
 = 
FL_ERASING
;

302 
chù
->
°©e
 = 
FL_ERASE_SUSPENDING
;

305 
°©us
 = 
	`cfi_ªad
(
m≠
, 
cmd_addr
);

306 i‡((
°©us
 & 
°©us_OK
) == status_OK)

309 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

311 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xd0), 
cmd_addr
);

313 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
cmd_addr
);

314 
chù
->
°©e
 = 
FL_ERASING
;

315 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

316 
	`¥ötk
(
KERN_ERR
 "ChipÇotÑeadyáfterÉrase "

317 "su•íded: sètu†0x%x\n", 
°©us
);

318  -
EIO
;

321 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

322 
	`cfi_udñay
(1);

323 
	`•ö_lock_bh
(
chù
->
muãx
);

326 
su•íded
 = 1;

327 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xff), 
cmd_addr
);

328 
chù
->
°©e
 = 
FL_READY
;

332 
FL_WRITING
:

336 
FL_READY
:

339 
FL_CFI_QUERY
:

340 
FL_JEDEC_QUERY
:

341 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
cmd_addr
);

342 
chù
->
°©e
 = 
FL_STATUS
;

344 
FL_STATUS
:

345 
°©us
 = 
	`cfi_ªad
(
m≠
, 
cmd_addr
);

346 i‡((
°©us
 & 
°©us_OK
) == status_OK) {

347 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xff), 
cmd_addr
);

348 
chù
->
°©e
 = 
FL_READY
;

353 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

354 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

355 
	`¥ötk
(
KERN_ERR
 "waôög f‹ chùÅÿbêªadyÅimed ouàöÑód. WSM sètu†%x\n", 
°©us
);

356  -
EIO
;

360 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

361 
	`cfi_udñay
(1);

362 
ªåy
;

365 
¶ìp
:

368 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

369 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

370 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

371 
	`scheduÀ
();

372 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

373 
timeo
 = 
jiffõs
 + 
HZ
;

374 
ªåy
;

377 
m≠
->
	`c›y_‰om
(m≠, 
buf
, 
adr
, 
Àn
);

379 i‡(
su•íded
) {

380 
chù
->
°©e
 = chù->
ﬁd°©e
;

390 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xd0), 
cmd_addr
);

391 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
cmd_addr
);

394 
	`wake_up
(&
chù
->
wq
);

395 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

397 
	}
}

399 
	$cfi_°Ø_ªad
 (
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
, size_à*
ªéí
, 
u_ch¨
 *
buf
)

401 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

402 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

403 
ofs
;

404 
chùnum
;

405 
ªt
 = 0;

408 
chùnum
 = (
‰om
 >> 
cfi
->
chùshi·
);

409 
ofs
 = 
‰om
 - (
chùnum
 << 
cfi
->
chùshi·
);

411 *
ªéí
 = 0;

413 
Àn
) {

414 
thi¶í
;

416 i‡(
chùnum
 >
cfi
->
numchùs
)

419 i‡((
Àn
 + 
ofs
 -1Ë>> 
cfi
->
chùshi·
)

420 
thi¶í
 = (1<<
cfi
->
chùshi·
Ë- 
ofs
;

422 
thi¶í
 = 
Àn
;

424 
ªt
 = 
	`do_ªad_⁄echù
(
m≠
, &
cfi
->
chùs
[
chùnum
], 
ofs
, 
thi¶í
, 
buf
);

425 i‡(
ªt
)

428 *
ªéí
 +
thi¶í
;

429 
Àn
 -
thi¶í
;

430 
buf
 +
thi¶í
;

432 
ofs
 = 0;

433 
chùnum
++;

435  
ªt
;

436 
	}
}

438 
ölöe
 
	$do_wrôe_buf„r
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
,

439 
adr
, c⁄° 
u_ch¨
 *
buf
, 
Àn
)

441 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

442 
__u32
 
°©us
, 
°©us_OK
;

443 
cmd_adr
, 
timeo
;

444 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

445 
wbufsize
, 
z
;

448 i‡(
adr
 & (
CFIDEV_BUSWIDTH
-1))

449  -
EINVAL
;

451 
wbufsize
 = 
CFIDEV_INTERLEAVE
 << 
cfi
->
cfiq
->
MaxBufWrôeSize
;

452 
adr
 +
chù
->
°¨t
;

453 
cmd_adr
 = 
adr
 & ~(
wbufsize
-1);

456 
°©us_OK
 = 
	`CMD
(0x80);

458 
timeo
 = 
jiffõs
 + 
HZ
;

459 
ªåy
:

461 #ifde‡
DEBUG_CFI_FEATURES


462 
	`¥ötk
("%s: chù->°©e[%d]\n", 
__FUNCTION__
, 
chù
->
°©e
);

464 
	`•ö_lock_bh
(
chù
->
muãx
);

471 
chù
->
°©e
) {

472 
FL_READY
:

475 
FL_CFI_QUERY
:

476 
FL_JEDEC_QUERY
:

477 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
cmd_adr
);

478 
chù
->
°©e
 = 
FL_STATUS
;

479 #ifde‡
DEBUG_CFI_FEATURES


480 
	`¥ötk
("%s: 1 sètus[%x]\n", 
__FUNCTION__
, 
	`cfi_ªad
(
m≠
, 
cmd_adr
));

483 
FL_STATUS
:

484 
°©us
 = 
	`cfi_ªad
(
m≠
, 
cmd_adr
);

485 i‡((
°©us
 & 
°©us_OK
) == status_OK)

488 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

489 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

490 
	`¥ötk
(
KERN_ERR
 "waiting for chipÅo beÑeadyÅimed out in buffer write Xstatus = %x, status = %x\n",

491 
°©us
, 
	`cfi_ªad
(
m≠
, 
cmd_adr
));

492  -
EIO
;

496 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

497 
	`cfi_udñay
(1);

498 
ªåy
;

503 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

504 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

505 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

506 
	`scheduÀ
();

507 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

508 
timeo
 = 
jiffõs
 + 
HZ
;

509 
ªåy
;

512 
	`ENABLE_VPP
(
m≠
);

513 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xe8), 
cmd_adr
);

514 
chù
->
°©e
 = 
FL_WRITING_TO_BUFFER
;

516 
z
 = 0;

518 
°©us
 = 
	`cfi_ªad
(
m≠
, 
cmd_adr
);

519 i‡((
°©us
 & 
°©us_OK
) == status_OK)

522 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

523 
	`cfi_udñay
(1);

524 
	`•ö_lock_bh
(
chù
->
muãx
);

526 i‡(++
z
 > 100) {

528 
	`DISABLE_VPP
(
m≠
);

529 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
cmd_adr
);

530 
chù
->
°©e
 = 
FL_STATUS
;

531 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

532 
	`¥ötk
(
KERN_ERR
 "ChùÇŸÑódy f‹ buf„∏wrôe. X°©u†%x\n", 
°©us
);

533  -
EIO
;

538 
	`cfi_wrôe
(
m≠
, 
	`CMD
(
Àn
/
CFIDEV_BUSWIDTH
-1), 
cmd_adr
 );

541 
z
 = 0; z < 
Àn
; z +
CFIDEV_BUSWIDTH
) {

542 i‡(
	`cfi_buswidth_is_1
()) {

543 
m≠
->
	`wrôe8
 (m≠, *((
__u8
*)
buf
)++, 
adr
+
z
);

544 } i‡(
	`cfi_buswidth_is_2
()) {

545 
m≠
->
	`wrôe16
 (m≠, *((
__u16
*)
buf
)++, 
adr
+
z
);

546 } i‡(
	`cfi_buswidth_is_4
()) {

547 
m≠
->
	`wrôe32
 (m≠, *((
__u32
*)
buf
)++, 
adr
+
z
);

549 
	`DISABLE_VPP
(
m≠
);

550  -
EINVAL
;

554 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xd0), 
cmd_adr
);

555 
chù
->
°©e
 = 
FL_WRITING
;

557 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

558 
	`cfi_udñay
(
chù
->
buf„r_wrôe_time
);

559 
	`•ö_lock_bh
(
chù
->
muãx
);

561 
timeo
 = 
jiffõs
 + (
HZ
/2);

562 
z
 = 0;

564 i‡(
chù
->
°©e
 !
FL_WRITING
) {

566 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

567 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

568 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

569 
	`scheduÀ
();

570 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

571 
timeo
 = 
jiffõs
 + (
HZ
 / 2);

572 
	`•ö_lock_bh
(
chù
->
muãx
);

576 
°©us
 = 
	`cfi_ªad
(
m≠
, 
cmd_adr
);

577 i‡((
°©us
 & 
°©us_OK
) == status_OK)

581 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

583 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x50), 
cmd_adr
);

585 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

586 
chù
->
°©e
 = 
FL_STATUS
;

587 
	`DISABLE_VPP
(
m≠
);

588 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

589 
	`¥ötk
(
KERN_ERR
 "waiting for chipÅo beÑeadyÅimed out in bufwrite\n");

590  -
EIO
;

594 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

595 
	`cfi_udñay
(1);

596 
z
++;

597 
	`•ö_lock_bh
(
chù
->
muãx
);

599 i‡(!
z
) {

600 
chù
->
buf„r_wrôe_time
--;

601 i‡(!
chù
->
buf„r_wrôe_time
)

602 
chù
->
buf„r_wrôe_time
++;

604 i‡(
z
 > 1)

605 
chù
->
buf„r_wrôe_time
++;

608 
	`DISABLE_VPP
(
m≠
);

609 
chù
->
°©e
 = 
FL_STATUS
;

612 i‡((
°©us
 & 
	`CMD
(0x02)) || (status & CMD(0x08)) ||

613 (
°©us
 & 
	`CMD
(0x10)) || (status & CMD(0x20))) {

614 #ifde‡
DEBUG_CFI_FEATURES


615 
	`¥ötk
("%s: 2 sètus[%x]\n", 
__FUNCTION__
, 
°©us
);

618 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x50), 
cmd_adr
);

620 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

621 
	`wake_up
(&
chù
->
wq
);

622 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

623  (
°©us
 & 
	`CMD
(0x02)Ë? -
EROFS
 : -
EIO
;

625 
	`wake_up
(&
chù
->
wq
);

626 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

629 
	}
}

631 
	$cfi_°Ø_wrôe_buf„rs
 (
mtd_öfo
 *
mtd
, 
loff_t
 
to
,

632 
size_t
 
Àn
, size_à*
ªéí
, c⁄° 
u_ch¨
 *
buf
)

634 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

635 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

636 
wbufsize
 = 
CFIDEV_INTERLEAVE
 << 
cfi
->
cfiq
->
MaxBufWrôeSize
;

637 
ªt
 = 0;

638 
chùnum
;

639 
ofs
;

641 *
ªéí
 = 0;

642 i‡(!
Àn
)

645 
chùnum
 = 
to
 >> 
cfi
->
chùshi·
;

646 
ofs
 = 
to
 - (
chùnum
 << 
cfi
->
chùshi·
);

648 #ifde‡
DEBUG_CFI_FEATURES


649 
	`¥ötk
("%s: CFIDEV_BUSWIDTH[%x]\n", 
__FUNCTION__
, 
CFIDEV_BUSWIDTH
);

650 
	`¥ötk
("%s: chùnum[%x] wbufsize[%x]\n", 
__FUNCTION__
, 
chùnum
, 
wbufsize
);

651 
	`¥ötk
("%s: ofs[%x]Üí[%x]\n", 
__FUNCTION__
, 
ofs
, 
Àn
);

655 
Àn
 > 0) {

657 
size
 = 
wbufsize
 - (
ofs
 & (wbufsize-1));

659 i‡(
size
 > 
Àn
)

660 
size
 = 
Àn
;

662 
ªt
 = 
	`do_wrôe_buf„r
(
m≠
, &
cfi
->
chùs
[
chùnum
],

663 
ofs
, 
buf
, 
size
);

664 i‡(
ªt
)

665  
ªt
;

667 
ofs
 +
size
;

668 
buf
 +
size
;

669 (*
ªéí
Ë+
size
;

670 
Àn
 -
size
;

672 i‡(
ofs
 >> 
cfi
->
chùshi·
) {

673 
chùnum
 ++;

674 
ofs
 = 0;

675 i‡(
chùnum
 =
cfi
->
numchùs
)

681 
	}
}

688 
	#ECCBUF_SIZE
 (
mtd
->
eccsize
)

	)

689 
	#ECCBUF_DIV
(
x
Ë((xË& ~(
ECCBUF_SIZE
 - 1))

	)

690 
	#ECCBUF_MOD
(
x
Ë((xË& (
ECCBUF_SIZE
 - 1))

	)

692 
	$cfi_°Ø_wrôev
(
mtd_öfo
 *
mtd
, c⁄° 
iovec
 *
vecs
,

693 
cou¡
, 
loff_t
 
to
, 
size_t
 *
ªéí
)

695 
i
;

696 
size_t
 
tŸÀn
 = 0, 
thi¶í
;

697 
ªt
 = 0;

698 
size_t
 
buÊí
 = 0;

699 *
buf„r
;

701 i‡(!
ECCBUF_SIZE
) {

705  -
EIO
;

707 
buf„r
 = 
	`kmÆloc
(
ECCBUF_SIZE
, 
GFP_KERNEL
);

708 i‡(!
buf„r
)

709  -
ENOMEM
;

711 
i
=0; i<
cou¡
; i++) {

712 
size_t
 
ñem_Àn
 = 
vecs
[
i
].
iov_Àn
;

713 *
ñem_ba£
 = 
vecs
[
i
].
iov_ba£
;

714 i‡(!
ñem_Àn
)

716 i‡(
buÊí
) {

717 i‡(
buÊí
 + 
ñem_Àn
 < 
ECCBUF_SIZE
) {

718 
	`mem˝y
(
buf„r
+
buÊí
, 
ñem_ba£
, 
ñem_Àn
);

719 
buÊí
 +
ñem_Àn
;

722 
	`mem˝y
(
buf„r
+
buÊí
, 
ñem_ba£
, 
ECCBUF_SIZE
-buflen);

723 
ªt
 = 
mtd
->
	`wrôe
(mtd, 
to
, 
ECCBUF_SIZE
, &
thi¶í
, 
buf„r
);

724 
tŸÀn
 +
thi¶í
;

725 i‡(
ªt
 || 
thi¶í
 !
ECCBUF_SIZE
)

726 
wrôe_îr‹
;

727 
ñem_Àn
 -
thi¶í
-
buÊí
;

728 
ñem_ba£
 +
thi¶í
-
buÊí
;

729 
to
 +
ECCBUF_SIZE
;

731 i‡(
	`ECCBUF_DIV
(
ñem_Àn
)) {

732 
ªt
 = 
mtd
->
	`wrôe
(mtd, 
to
, 
	`ECCBUF_DIV
(
ñem_Àn
), &
thi¶í
, 
ñem_ba£
);

733 
tŸÀn
 +
thi¶í
;

734 i‡(
ªt
 || 
thi¶í
 !
	`ECCBUF_DIV
(
ñem_Àn
))

735 
wrôe_îr‹
;

736 
to
 +
thi¶í
;

738 
buÊí
 = 
	`ECCBUF_MOD
(
ñem_Àn
);

739 i‡(
buÊí
) {

740 
	`mem£t
(
buf„r
, 0xff, 
ECCBUF_SIZE
);

741 
	`mem˝y
(
buf„r
, 
ñem_ba£
 + 
thi¶í
, 
buÊí
);

744 i‡(
buÊí
) {

746 
ªt
 = 
mtd
->
	`wrôe
(mtd, 
to
, 
buÊí
, &
thi¶í
, 
buf„r
);

747 
tŸÀn
 +
thi¶í
;

748 i‡(
ªt
 || 
thi¶í
 !
ECCBUF_SIZE
)

749 
wrôe_îr‹
;

751 
wrôe_îr‹
:

752 i‡(
ªéí
)

753 *
ªéí
 = 
tŸÀn
;

754  
ªt
;

755 
	}
}

758 
ölöe
 
	$do_îa£_⁄eblock
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
, 
adr
)

760 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

761 
__u32
 
°©us
, 
°©us_OK
;

762 
timeo
;

763 
ªåõs
 = 3;

764 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

765 
ªt
 = 0;

767 
adr
 +
chù
->
°¨t
;

770 
°©us_OK
 = 
	`CMD
(0x80);

772 
timeo
 = 
jiffõs
 + 
HZ
;

773 
ªåy
:

774 
	`•ö_lock_bh
(
chù
->
muãx
);

777 
chù
->
°©e
) {

778 
FL_CFI_QUERY
:

779 
FL_JEDEC_QUERY
:

780 
FL_READY
:

781 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

782 
chù
->
°©e
 = 
FL_STATUS
;

784 
FL_STATUS
:

785 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

786 i‡((
°©us
 & 
°©us_OK
) == status_OK)

790 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

791 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

792 
	`¥ötk
(
KERN_ERR
 "waiting for chipÅo beÑeadyÅimed out inÉrase\n");

793  -
EIO
;

797 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

798 
	`cfi_udñay
(1);

799 
ªåy
;

804 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

805 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

806 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

807 
	`scheduÀ
();

808 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

809 
timeo
 = 
jiffõs
 + 
HZ
;

810 
ªåy
;

813 
	`ENABLE_VPP
(
m≠
);

815 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x50), 
adr
);

818 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x20), 
adr
);

819 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xD0), 
adr
);

820 
chù
->
°©e
 = 
FL_ERASING
;

822 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

823 
	`scheduÀ_timeout
(
HZ
);

824 
	`•ö_lock_bh
(
chù
->
muãx
);

829 
timeo
 = 
jiffõs
 + (
HZ
*20);

831 i‡(
chù
->
°©e
 !
FL_ERASING
) {

833 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

834 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

835 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

836 
	`scheduÀ
();

837 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

838 
timeo
 = 
jiffõs
 + (
HZ
*20);

839 
	`•ö_lock_bh
(
chù
->
muãx
);

843 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

844 i‡((
°©us
 & 
°©us_OK
) == status_OK)

848 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

849 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

850 
chù
->
°©e
 = 
FL_STATUS
;

851 
	`¥ötk
(
KERN_ERR
 "waôög f‹Éø£Åÿcom∂ëêtimed out. X°©u†%x, sètu†%x.\n", 
°©us
, 
	`cfi_ªad
(
m≠
, 
adr
));

852 
	`DISABLE_VPP
(
m≠
);

853 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

854  -
EIO
;

858 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

859 
	`cfi_udñay
(1);

860 
	`•ö_lock_bh
(
chù
->
muãx
);

863 
	`DISABLE_VPP
(
m≠
);

864 
ªt
 = 0;

867 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

868 
chù
->
°©e
 = 
FL_STATUS
;

869 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

872 i‡(
°©us
 & 
	`CMD
(0x3a)) {

873 
chù°©us
 = 
°©us
;

874 i‡(
°©us
 !
	`CMD
(status & 0xff)) {

875 
i
;

876 
i
 = 1; i<
CFIDEV_INTERLEAVE
; i++) {

877 
chù°©us
 |
°©us
 >> (
cfi
->
devi˚_ty≥
 * 8);

879 
	`¥ötk
(
KERN_WARNING
 "Sètu†i†nŸ idítiˇ»f‹áŒ chùs: 0x%x. MîgögÅÿgivê0x%02x\n", 
°©us
, 
chù°©us
);

882 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x50), 
adr
);

883 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

885 i‡((
chù°©us
 & 0x30) == 0x30) {

886 
	`¥ötk
(
KERN_NOTICE
 "ChùÑï‹t†im¥›î comm™d sequí˚: sètu†0x%x\n", 
°©us
);

887 
ªt
 = -
EIO
;

888 } i‡(
chù°©us
 & 0x02) {

890 
ªt
 = -
EROFS
;

891 } i‡(
chù°©us
 & 0x8) {

893 
	`¥ötk
(
KERN_WARNING
 "ChùÑï‹t†vﬁègêlow o¿îa£: sètu†0x%x\n", 
°©us
);

894 
ªt
 = -
EIO
;

895 } i‡(
chù°©us
 & 0x20) {

896 i‡(
ªåõs
--) {

897 
	`¥ötk
(
KERN_DEBUG
 "ChùÉø£ faûedáà0x%08lx: sètu†0x%x. Rëryög...\n", 
adr
, 
°©us
);

898 
timeo
 = 
jiffõs
 + 
HZ
;

899 
chù
->
°©e
 = 
FL_STATUS
;

900 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

901 
ªåy
;

903 
	`¥ötk
(
KERN_DEBUG
 "ChùÉø£ faûedáà0x%08lx: sètu†0x%x\n", 
adr
, 
°©us
);

904 
ªt
 = -
EIO
;

908 
	`wake_up
(&
chù
->
wq
);

909 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

910  
ªt
;

911 
	}
}

913 
	$cfi_°Ø_îa£_v¨size
(
mtd_öfo
 *
mtd
, 
îa£_öfo
 *
ö°r
)

914 { 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

915 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

916 
adr
, 
Àn
;

917 
chùnum
, 
ªt
 = 0;

918 
i
, 
fú°
;

919 
mtd_îa£_ªgi⁄_öfo
 *
ªgi⁄s
 = 
mtd
->
îa£ªgi⁄s
;

921 i‡(
ö°r
->
addr
 > 
mtd
->
size
)

922  -
EINVAL
;

924 i‡((
ö°r
->
Àn
 + in°r->
addr
Ë> 
mtd
->
size
)

925  -
EINVAL
;

931 
i
 = 0;

939 
i
 < 
mtd
->
numîa£ªgi⁄s
 && 
ö°r
->
addr
 >
ªgi⁄s
[i].
off£t
)

940 
i
++;

941 
i
--;

949 i‡(
ö°r
->
addr
 & (
ªgi⁄s
[
i
].
îa£size
-1))

950  -
EINVAL
;

953 
fú°
 = 
i
;

959 
i
<
mtd
->
numîa£ªgi⁄s
 && (
ö°r
->
addr
 + in°r->
Àn
Ë>
ªgi⁄s
[i].
off£t
)

960 
i
++;

965 
i
--;

967 i‡((
ö°r
->
addr
 + in°r->
Àn
Ë& (
ªgi⁄s
[
i
].
îa£size
-1))

968  -
EINVAL
;

970 
chùnum
 = 
ö°r
->
addr
 >> 
cfi
->
chùshi·
;

971 
adr
 = 
ö°r
->
addr
 - (
chùnum
 << 
cfi
->
chùshi·
);

972 
Àn
 = 
ö°r
->len;

974 
i
=
fú°
;

976 
Àn
) {

977 
ªt
 = 
	`do_îa£_⁄eblock
(
m≠
, &
cfi
->
chùs
[
chùnum
], 
adr
);

979 i‡(
ªt
)

980  
ªt
;

982 
adr
 +
ªgi⁄s
[
i
].
îa£size
;

983 
Àn
 -
ªgi⁄s
[
i
].
îa£size
;

985 i‡(
adr
 % (1<< 
cfi
->
chùshi·
Ë=((
ªgi⁄s
[
i
].
off£t
 + (ªgi⁄s[i].
îa£size
 *Ñegi⁄s[i].
numblocks
)) %( 1<< cfi->chipshift)))

986 
i
++;

988 i‡(
adr
 >> 
cfi
->
chùshi·
) {

989 
adr
 = 0;

990 
chùnum
++;

992 i‡(
chùnum
 >
cfi
->
numchùs
)

997 
ö°r
->
°©e
 = 
MTD_ERASE_DONE
;

998 i‡(
ö°r
->
ˇŒback
)

999 
ö°r
->
	`ˇŒback
(instr);

1002 
	}
}

1004 
	$cfi_°Ø_sync
 (
mtd_öfo
 *
mtd
)

1006 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1007 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1008 
i
;

1009 
Êchù
 *
chù
;

1010 
ªt
 = 0;

1011 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

1013 
i
=0; !
ªt
 && i<
cfi
->
numchùs
; i++) {

1014 
chù
 = &
cfi
->
chùs
[
i
];

1016 
ªåy
:

1017 
	`•ö_lock_bh
(
chù
->
muãx
);

1019 
chù
->
°©e
) {

1020 
FL_READY
:

1021 
FL_STATUS
:

1022 
FL_CFI_QUERY
:

1023 
FL_JEDEC_QUERY
:

1024 
chù
->
ﬁd°©e
 = chù->
°©e
;

1025 
chù
->
°©e
 = 
FL_SYNCING
;

1030 
FL_SYNCING
:

1031 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1036 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

1038 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1039 
	`scheduÀ
();

1040 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

1042 
ªåy
;

1048 
i
--; i >=0; i--) {

1049 
chù
 = &
cfi
->
chùs
[
i
];

1051 
	`•ö_lock_bh
(
chù
->
muãx
);

1053 i‡(
chù
->
°©e
 =
FL_SYNCING
) {

1054 
chù
->
°©e
 = chù->
ﬁd°©e
;

1055 
	`wake_up
(&
chù
->
wq
);

1057 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1059 
	}
}

1061 
ölöe
 
	$do_lock_⁄eblock
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
, 
adr
)

1063 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1064 
__u32
 
°©us
, 
°©us_OK
;

1065 
timeo
 = 
jiffõs
 + 
HZ
;

1066 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

1068 
adr
 +
chù
->
°¨t
;

1071 
°©us_OK
 = 
	`CMD
(0x80);

1073 
timeo
 = 
jiffõs
 + 
HZ
;

1074 
ªåy
:

1075 
	`•ö_lock_bh
(
chù
->
muãx
);

1078 
chù
->
°©e
) {

1079 
FL_CFI_QUERY
:

1080 
FL_JEDEC_QUERY
:

1081 
FL_READY
:

1082 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

1083 
chù
->
°©e
 = 
FL_STATUS
;

1085 
FL_STATUS
:

1086 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

1087 i‡((
°©us
 & 
°©us_OK
) == status_OK)

1091 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

1092 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1093 
	`¥ötk
(
KERN_ERR
 "waiting for chipÅo beÑeadyÅimed out inÜock\n");

1094  -
EIO
;

1098 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1099 
	`cfi_udñay
(1);

1100 
ªåy
;

1105 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

1106 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

1107 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1108 
	`scheduÀ
();

1109 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

1110 
timeo
 = 
jiffõs
 + 
HZ
;

1111 
ªåy
;

1114 
	`ENABLE_VPP
(
m≠
);

1115 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x60), 
adr
);

1116 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x01), 
adr
);

1117 
chù
->
°©e
 = 
FL_LOCKING
;

1119 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1120 
	`scheduÀ_timeout
(
HZ
);

1121 
	`•ö_lock_bh
(
chù
->
muãx
);

1126 
timeo
 = 
jiffõs
 + (
HZ
*2);

1129 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

1130 i‡((
°©us
 & 
°©us_OK
) == status_OK)

1134 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

1135 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

1136 
chù
->
°©e
 = 
FL_STATUS
;

1137 
	`¥ötk
(
KERN_ERR
 "waôög f‹ÜockÅÿcom∂ëêtimed out. X°©u†%x, sètu†%x.\n", 
°©us
, 
	`cfi_ªad
(
m≠
, 
adr
));

1138 
	`DISABLE_VPP
(
m≠
);

1139 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1140  -
EIO
;

1144 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1145 
	`cfi_udñay
(1);

1146 
	`•ö_lock_bh
(
chù
->
muãx
);

1150 
chù
->
°©e
 = 
FL_STATUS
;

1151 
	`DISABLE_VPP
(
m≠
);

1152 
	`wake_up
(&
chù
->
wq
);

1153 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1155 
	}
}

1156 
	$cfi_°Ø_lock
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
, 
size_t
 
Àn
)

1158 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1159 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1160 
adr
;

1161 
chùnum
, 
ªt
 = 0;

1162 #ifde‡
DEBUG_LOCK_BITS


1163 
ofs_Á˘‹
 = 
cfi
->
öãæóve
 * cfi->
devi˚_ty≥
;

1166 i‡(
ofs
 & (
mtd
->
îa£size
 - 1))

1167  -
EINVAL
;

1169 i‡(
Àn
 & (
mtd
->
îa£size
 -1))

1170  -
EINVAL
;

1172 i‡((
Àn
 + 
ofs
Ë> 
mtd
->
size
)

1173  -
EINVAL
;

1175 
chùnum
 = 
ofs
 >> 
cfi
->
chùshi·
;

1176 
adr
 = 
ofs
 - (
chùnum
 << 
cfi
->
chùshi·
);

1178 
Àn
) {

1180 #ifde‡
DEBUG_LOCK_BITS


1181 
	`cfi_£nd_gí_cmd
(0x90, 0x55, 0, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

1182 
	`¥ötk
("bef‹êlock: block sètu†ªgi°î i†%x\n",
	`cfi_ªad_quîy
(
m≠
, 
adr
+(2*
ofs_Á˘‹
)));

1183 
	`cfi_£nd_gí_cmd
(0xff, 0x55, 0, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

1186 
ªt
 = 
	`do_lock_⁄eblock
(
m≠
, &
cfi
->
chùs
[
chùnum
], 
adr
);

1188 #ifde‡
DEBUG_LOCK_BITS


1189 
	`cfi_£nd_gí_cmd
(0x90, 0x55, 0, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

1190 
	`¥ötk
("a·îÜock: block sètu†ªgi°î i†%x\n",
	`cfi_ªad_quîy
(
m≠
, 
adr
+(2*
ofs_Á˘‹
)));

1191 
	`cfi_£nd_gí_cmd
(0xff, 0x55, 0, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

1194 i‡(
ªt
)

1195  
ªt
;

1197 
adr
 +
mtd
->
îa£size
;

1198 
Àn
 -
mtd
->
îa£size
;

1200 i‡(
adr
 >> 
cfi
->
chùshi·
) {

1201 
adr
 = 0;

1202 
chùnum
++;

1204 i‡(
chùnum
 >
cfi
->
numchùs
)

1209 
	}
}

1210 
ölöe
 
	$do_u∆ock_⁄eblock
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
, 
adr
)

1212 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1213 
__u32
 
°©us
, 
°©us_OK
;

1214 
timeo
 = 
jiffõs
 + 
HZ
;

1215 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

1217 
adr
 +
chù
->
°¨t
;

1220 
°©us_OK
 = 
	`CMD
(0x80);

1222 
timeo
 = 
jiffõs
 + 
HZ
;

1223 
ªåy
:

1224 
	`•ö_lock_bh
(
chù
->
muãx
);

1227 
chù
->
°©e
) {

1228 
FL_CFI_QUERY
:

1229 
FL_JEDEC_QUERY
:

1230 
FL_READY
:

1231 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

1232 
chù
->
°©e
 = 
FL_STATUS
;

1234 
FL_STATUS
:

1235 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

1236 i‡((
°©us
 & 
°©us_OK
) == status_OK)

1240 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

1241 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1242 
	`¥ötk
(
KERN_ERR
 "waiting for chipÅo beÑeadyÅimed out in unlock\n");

1243  -
EIO
;

1247 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1248 
	`cfi_udñay
(1);

1249 
ªåy
;

1254 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

1255 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

1256 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1257 
	`scheduÀ
();

1258 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

1259 
timeo
 = 
jiffõs
 + 
HZ
;

1260 
ªåy
;

1263 
	`ENABLE_VPP
(
m≠
);

1264 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x60), 
adr
);

1265 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xD0), 
adr
);

1266 
chù
->
°©e
 = 
FL_UNLOCKING
;

1268 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1269 
	`scheduÀ_timeout
(
HZ
);

1270 
	`•ö_lock_bh
(
chù
->
muãx
);

1275 
timeo
 = 
jiffõs
 + (
HZ
*2);

1278 
°©us
 = 
	`cfi_ªad
(
m≠
, 
adr
);

1279 i‡((
°©us
 & 
°©us_OK
) == status_OK)

1283 i‡(
	`time_a·î
(
jiffõs
, 
timeo
)) {

1284 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0x70), 
adr
);

1285 
chù
->
°©e
 = 
FL_STATUS
;

1286 
	`¥ötk
(
KERN_ERR
 "waôög f‹ u∆ockÅÿcom∂ëêtimed out. X°©u†%x, sètu†%x.\n", 
°©us
, 
	`cfi_ªad
(
m≠
, 
adr
));

1287 
	`DISABLE_VPP
(
m≠
);

1288 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1289  -
EIO
;

1293 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1294 
	`cfi_udñay
(1);

1295 
	`•ö_lock_bh
(
chù
->
muãx
);

1299 
chù
->
°©e
 = 
FL_STATUS
;

1300 
	`DISABLE_VPP
(
m≠
);

1301 
	`wake_up
(&
chù
->
wq
);

1302 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1304 
	}
}

1305 
	$cfi_°Ø_u∆ock
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
, 
size_t
 
Àn
)

1307 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1308 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1309 
adr
;

1310 
chùnum
, 
ªt
 = 0;

1311 #ifde‡
DEBUG_LOCK_BITS


1312 
ofs_Á˘‹
 = 
cfi
->
öãæóve
 * cfi->
devi˚_ty≥
;

1315 
chùnum
 = 
ofs
 >> 
cfi
->
chùshi·
;

1316 
adr
 = 
ofs
 - (
chùnum
 << 
cfi
->
chùshi·
);

1318 #ifde‡
DEBUG_LOCK_BITS


1320 
ãmp_adr
 = 
adr
;

1321 
ãmp_Àn
 = 
Àn
;

1323 
	`cfi_£nd_gí_cmd
(0x90, 0x55, 0, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

1324 
ãmp_Àn
) {

1325 
	`¥ötk
("bef‹êu∆ock %x: block sètu†ªgi°î i†%x\n",
ãmp_adr
,
	`cfi_ªad_quîy
(
m≠
,Åemp_adr+(2*
ofs_Á˘‹
)));

1326 
ãmp_adr
 +
mtd
->
îa£size
;

1327 
ãmp_Àn
 -
mtd
->
îa£size
;

1329 
	`cfi_£nd_gí_cmd
(0xff, 0x55, 0, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

1333 
ªt
 = 
	`do_u∆ock_⁄eblock
(
m≠
, &
cfi
->
chùs
[
chùnum
], 
adr
);

1335 #ifde‡
DEBUG_LOCK_BITS


1336 
	`cfi_£nd_gí_cmd
(0x90, 0x55, 0, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

1337 
	`¥ötk
("a·î u∆ock: block sètu†ªgi°î i†%x\n",
	`cfi_ªad_quîy
(
m≠
, 
adr
+(2*
ofs_Á˘‹
)));

1338 
	`cfi_£nd_gí_cmd
(0xff, 0x55, 0, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

1341  
ªt
;

1342 
	}
}

1344 
	$cfi_°Ø_su•íd
(
mtd_öfo
 *
mtd
)

1346 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1347 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1348 
i
;

1349 
Êchù
 *
chù
;

1350 
ªt
 = 0;

1352 
i
=0; !
ªt
 && i<
cfi
->
numchùs
; i++) {

1353 
chù
 = &
cfi
->
chùs
[
i
];

1355 
	`•ö_lock_bh
(
chù
->
muãx
);

1357 
chù
->
°©e
) {

1358 
FL_READY
:

1359 
FL_STATUS
:

1360 
FL_CFI_QUERY
:

1361 
FL_JEDEC_QUERY
:

1362 
chù
->
ﬁd°©e
 = chù->
°©e
;

1363 
chù
->
°©e
 = 
FL_PM_SUSPENDED
;

1368 
FL_PM_SUSPENDED
:

1372 
ªt
 = -
EAGAIN
;

1375 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1380 i‡(
ªt
) {

1381 
i
--; i >=0; i--) {

1382 
chù
 = &
cfi
->
chùs
[
i
];

1384 
	`•ö_lock_bh
(
chù
->
muãx
);

1386 i‡(
chù
->
°©e
 =
FL_PM_SUSPENDED
) {

1390 
chù
->
°©e
 = chù->
ﬁd°©e
;

1391 
	`wake_up
(&
chù
->
wq
);

1393 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1397  
ªt
;

1398 
	}
}

1400 
	$cfi_°Ø_ªsume
(
mtd_öfo
 *
mtd
)

1402 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1403 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1404 
i
;

1405 
Êchù
 *
chù
;

1407 
i
=0; i<
cfi
->
numchùs
; i++) {

1409 
chù
 = &
cfi
->
chùs
[
i
];

1411 
	`•ö_lock_bh
(
chù
->
muãx
);

1414 i‡(
chù
->
°©e
 =
FL_PM_SUSPENDED
) {

1415 
	`cfi_wrôe
(
m≠
, 
	`CMD
(0xFF), 0);

1416 
chù
->
°©e
 = 
FL_READY
;

1417 
	`wake_up
(&
chù
->
wq
);

1420 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

1422 
	}
}

1424 
	$cfi_°Ø_de°roy
(
mtd_öfo
 *
mtd
)

1426 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

1427 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

1428 
	`k‰ì
(
cfi
->
cmd£t_¥iv
);

1429 
	`k‰ì
(
cfi
);

1430 
	}
}

1432 #i‡
LINUX_VERSION_CODE
 < 0x20212 && 
deföed
(
MODULE
)

1433 
	#cfi_°Ø_öô
 
öô_moduÀ


	)

1434 
	#cfi_°Ø_exô
 
˛ónup_moduÀ


	)

1437 
	gim_«me
[]="cfi_cmdset_0020";

1439 
mod_öô_t
 
	$cfi_°Ø_öô
()

1441 
	`öãr_moduÀ_ªgi°î
(
im_«me
, 
THIS_MODULE
, &
cfi_cmd£t_0020
);

1443 
	}
}

1445 
mod_exô_t
 
	$cfi_°Ø_exô
()

1447 
	`öãr_moduÀ_uƒegi°î
(
im_«me
);

1448 
	}
}

1450 
moduÀ_öô
(
cfi_°Ø_öô
);

1451 
moduÀ_exô
(
cfi_°Ø_exô
);

	@cfi_probe.c

7 
	~<löux/c⁄fig.h
>

8 
	~<löux/moduÀ.h
>

9 
	~<löux/ty≥s.h
>

10 
	~<löux/kî√l.h
>

11 
	~<asm/io.h
>

12 
	~<asm/byã‹dî.h
>

13 
	~<löux/î∫o.h
>

14 
	~<löux/¶ab.h
>

15 
	~<löux/öãºu±.h
>

17 
	~<löux/mtd/m≠.h
>

18 
	~<löux/mtd/cfi.h
>

19 
	~<löux/mtd/gí_¥obe.h
>

23 #ifde‡
DEBUG_CFI


24 
¥öt_cfi_idít
(
cfi_idít
 *);

27 
cfi_¥obe_chù
(
m≠_öfo
 *
m≠
, 
__u32
 
ba£
,

28 
Êchù
 *
chùs
, 
cfi_¥iv©e
 *
cfi
);

29 
cfi_chù_£tup
(
m≠_öfo
 *
m≠
, 
cfi_¥iv©e
 *
cfi
);

31 
mtd_öfo
 *
cfi_¥obe
(
m≠_öfo
 *
m≠
);

37 
ölöe
 
	$qry_¥e£¡
(
m≠_öfo
 *
m≠
, 
__u32
 
ba£
,

38 
cfi_¥iv©e
 *
cfi
)

40 
osf
 = 
cfi
->
öãæóve
 * cfi->
devi˚_ty≥
;

42 i‡(
	`cfi_ªad
(
m≠
,
ba£
+
osf
*0x10)==
	`cfi_buûd_cmd
('Q',m≠,
cfi
) &&

43 
	`cfi_ªad
(
m≠
,
ba£
+
osf
*0x11)==
	`cfi_buûd_cmd
('R',m≠,
cfi
) &&

44 
	`cfi_ªad
(
m≠
,
ba£
+
osf
*0x12)==
	`cfi_buûd_cmd
('Y',m≠,
cfi
))

48 
	}
}

50 
	$cfi_¥obe_chù
(
m≠_öfo
 *
m≠
, 
__u32
 
ba£
,

51 
Êchù
 *
chùs
, 
cfi_¥iv©e
 *
cfi
)

53 
i
;

55 i‡((
ba£
 + 0Ë>
m≠
->
size
) {

56 
	`¥ötk
(
KERN_NOTICE


58 ()
ba£
, 
m≠
->
size
 -1);

61 i‡((
ba£
 + 0xffË>
m≠
->
size
) {

62 
	`¥ötk
(
KERN_NOTICE


64 ()
ba£
 + 0x55, 
m≠
->
size
 -1);

67 
	`cfi_£nd_gí_cmd
(0xF0, 0, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

68 
	`cfi_£nd_gí_cmd
(0x98, 0x55, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

70 i‡(!
	`qry_¥e£¡
(
m≠
,
ba£
,
cfi
))

73 i‡(!
cfi
->
numchùs
) {

76  
	`cfi_chù_£tup
(
m≠
, 
cfi
);

80 
i
=0; i<
cfi
->
numchùs
; i++) {

83 i‡(
	`qry_¥e£¡
(
m≠
,
chùs
[
i
].
°¨t
,
cfi
)) {

86 
	`cfi_£nd_gí_cmd
(0xF0, 0, 
chùs
[
i
].
°¨t
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

89 i‡(!
	`qry_¥e£¡
(
m≠
, 
chùs
[
i
].
°¨t
, 
cfi
)) {

90 
	`¥ötk
(
KERN_DEBUG
 "%s: Foundánáliasát 0x%x forÅhe chipát 0x%lx\n",

91 
m≠
->
«me
, 
ba£
, 
chùs
[
i
].
°¨t
);

98 
	`cfi_£nd_gí_cmd
(0xF0, 0, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

100 i‡(
	`qry_¥e£¡
(
m≠
, 
ba£
, 
cfi
)) {

101 
	`¥ötk
(
KERN_DEBUG
 "%s: Foundánáliasát 0x%x forÅhe chipát 0x%lx\n",

102 
m≠
->
«me
, 
ba£
, 
chùs
[
i
].
°¨t
);

110 i‡(
cfi
->
numchùs
 =
MAX_CFI_CHIPS
) {

111 
	`¥ötk
(
KERN_WARNING
"%s: Toÿm™y fœsh chù†dëe˘ed. In¸ó£ MAX_CFI_CHIPS from %d.\n", 
m≠
->
«me
, 
MAX_CFI_CHIPS
);

115 
chùs
[
cfi
->
numchùs
].
°¨t
 = 
ba£
;

116 
chùs
[
cfi
->
numchùs
].
°©e
 = 
FL_READY
;

117 
cfi
->
numchùs
++;

120 
	`cfi_£nd_gí_cmd
(0xF0, 0, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

122 
	`¥ötk
(
KERN_INFO
 "%s: Found %d x%d devicesát 0x%x in %d-bit mode\n",

123 
m≠
->
«me
, 
cfi
->
öãæóve
, cfi->
devi˚_ty≥
*8, 
ba£
,

124 
m≠
->
buswidth
*8);

127 
	}
}

129 
	$cfi_chù_£tup
(
m≠_öfo
 *
m≠
,

130 
cfi_¥iv©e
 *
cfi
)

132 
ofs_Á˘‹
 = 
cfi
->
öãæóve
*cfi->
devi˚_ty≥
;

133 
__u32
 
ba£
 = 0;

134 
num_îa£_ªgi⁄s
 = 
	`cfi_ªad_quîy
(
m≠
, 
ba£
 + (0x10 + 28)*
ofs_Á˘‹
);

135 
i
;

137 #ifde‡
DEBUG_CFI


138 
	`¥ötk
("Numbî o‡îa£Ñegi⁄s: %d\n", 
num_îa£_ªgi⁄s
);

140 i‡(!
num_îa£_ªgi⁄s
)

143 
cfi
->
cfiq
 = 
	`kmÆloc
((
cfi_idít
Ë+ 
num_îa£_ªgi⁄s
 * 4, 
GFP_KERNEL
);

144 i‡(!
cfi
->
cfiq
) {

145 
	`¥ötk
(
KERN_WARNING
 "%s: kmÆlo¯Áûed f‹ CFI idíà°ru˘uª\n", 
m≠
->
«me
);

149 
	`mem£t
(
cfi
->
cfiq
,0,(
cfi_idít
));

151 
cfi
->
cfi_mode
 = 
CFI_MODE_CFI
;

152 
cfi
->
Á°_¥og
=1;

155 
i
=0; i<((
cfi_idít
Ë+ 
num_îa£_ªgi⁄s
 * 4); i++) {

156 ((*)
cfi
->
cfiq
)[
i
] = 
	`cfi_ªad_quîy
(
m≠
,
ba£
 + (0x10 + i)*
ofs_Á˘‹
);

160 
cfi
->
cfiq
->
P_ID
 = 
	`À16_to_˝u
(cfi->cfiq->P_ID);

162 
cfi
->
cfiq
->
P_ADR
 = 
	`À16_to_˝u
(cfi->cfiq->P_ADR);

163 
cfi
->
cfiq
->
A_ID
 = 
	`À16_to_˝u
(cfi->cfiq->A_ID);

164 
cfi
->
cfiq
->
A_ADR
 = 
	`À16_to_˝u
(cfi->cfiq->A_ADR);

165 
cfi
->
cfiq
->
I¡îÁ˚Desc
 = 
	`À16_to_˝u
(cfi->cfiq->InterfaceDesc);

166 
cfi
->
cfiq
->
MaxBufWrôeSize
 = 
	`À16_to_˝u
(cfi->cfiq->MaxBufWriteSize);

168 #ifde‡
DEBUG_CFI


170 
	`¥öt_cfi_idít
(
cfi
->
cfiq
);

173 
i
=0; i<
cfi
->
cfiq
->
NumEø£Regi⁄s
; i++) {

174 
cfi
->
cfiq
->
Eø£Regi⁄Info
[
i
] = 
	`À32_to_˝u
(cfi->cfiq->EraseRegionInfo[i]);

176 #ifde‡
DEBUG_CFI


177 
	`¥ötk
(" Erase Region #%d: BlockSize 0x%4.4X bytes, %d blocks\n",

178 
i
, (
cfi
->
cfiq
->
Eø£Regi⁄Info
[i] >> 8) & ~0xff,

179 (
cfi
->
cfiq
->
Eø£Regi⁄Info
[
i
] & 0xffff) + 1);

183 
	`cfi_£nd_gí_cmd
(0xF0, 0, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

186 
	}
}

188 #ifde‡
DEBUG_CFI


189 *
	$víd‹«me
(
__u16
 
víd‹
)

191 
víd‹
) {

192 
P_ID_NONE
:

195 
P_ID_INTEL_EXT
:

198 
P_ID_AMD_STD
:

201 
P_ID_INTEL_STD
:

204 
P_ID_AMD_EXT
:

207 
P_ID_MITSUBISHI_STD
:

210 
P_ID_MITSUBISHI_EXT
:

213 
P_ID_RESERVED
:

219 
	}
}

222 
	$¥öt_cfi_idít
(
cfi_idít
 *
cfù
)

224 i‡(
cfù
->
qry
[0] != 'Q' || cfip->qry[1] != 'R' || cfip->qry[2] != 'Y') {

225 
	`¥ötk
("Invalid CFI ident structure.\n");

228 
	`¥ötk
("Prim¨y Víd‹ Comm™d Së: %4.4X (%s)\n", 
cfù
->
P_ID
, 
	`víd‹«me
(cfip->P_ID));

229 i‡(
cfù
->
P_ADR
)

230 
	`¥ötk
("Prim¨y Alg‹ôhm TabÀáà%4.4X\n", 
cfù
->
P_ADR
);

232 
	`¥ötk
("No Primary Algorithm Table\n");

234 
	`¥ötk
("A…î«tivêVíd‹ Comm™d Së: %4.4X (%s)\n", 
cfù
->
A_ID
, 
	`víd‹«me
(cfip->A_ID));

235 i‡(
cfù
->
A_ADR
)

236 
	`¥ötk
("A…î«ã Alg‹ôhm TabÀáà%4.4X\n", 
cfù
->
A_ADR
);

238 
	`¥ötk
("No Alternate Algorithm Table\n");

241 
	`¥ötk
("Vc¯Möimum: %x.%x V\n", 
cfù
->
VccMö
 >> 4, cfip->VccMin & 0xf);

242 
	`¥ötk
("Vc¯Maximum: %x.%x V\n", 
cfù
->
VccMax
 >> 4, cfip->VccMax & 0xf);

243 i‡(
cfù
->
VµMö
) {

244 
	`¥ötk
("Vµ Möimum: %x.%x V\n", 
cfù
->
VµMö
 >> 4, cfip->VppMin & 0xf);

245 
	`¥ötk
("Vµ Maximum: %x.%x V\n", 
cfù
->
VµMax
 >> 4, cfip->VppMax & 0xf);

248 
	`¥ötk
("No VppÜine\n");

250 
	`¥ötk
("Typiˇ»byã/w‹d wrôêtimeout: %d µs\n", 1<<
cfù
->
W‹dWrôeTimeoutTyp
);

251 
	`¥ötk
("Maximum byã/w‹d wrôêtimeout: %d µs\n", (1<<
cfù
->
W‹dWrôeTimeoutMax
Ë* (1<<cfù->
W‹dWrôeTimeoutTyp
));

253 i‡(
cfù
->
BufWrôeTimeoutTyp
 || cfù->
BufWrôeTimeoutMax
) {

254 
	`¥ötk
("Typiˇ»fuŒ buf„∏wrôêtimeout: %d µs\n", 1<<
cfù
->
BufWrôeTimeoutTyp
);

255 
	`¥ötk
("Maximum fuŒ buf„∏wrôêtimeout: %d µs\n", (1<<
cfù
->
BufWrôeTimeoutMax
Ë* (1<<cfù->
BufWrôeTimeoutTyp
));

258 
	`¥ötk
("Full buffer writeÇot supported\n");

260 
	`¥ötk
("Typiˇ»blockÉø£Åimeout: %d ms\n", 1<<
cfù
->
BlockEø£TimeoutTyp
);

261 
	`¥ötk
("Maximum blockÉø£Åimeout: %d ms\n", (1<<
cfù
->
BlockEø£TimeoutMax
Ë* (1<<cfù->
BlockEø£TimeoutTyp
));

262 i‡(
cfù
->
ChùEø£TimeoutTyp
 || cfù->
ChùEø£TimeoutMax
) {

263 
	`¥ötk
("Typiˇ»chùÉø£Åimeout: %d ms\n", 1<<
cfù
->
ChùEø£TimeoutTyp
);

264 
	`¥ötk
("Maximum chùÉø£Åimeout: %d ms\n", (1<<
cfù
->
ChùEø£TimeoutMax
Ë* (1<<cfù->
ChùEø£TimeoutTyp
));

267 
	`¥ötk
("ChipÉraseÇot supported\n");

269 
	`¥ötk
("Devi˚ size: 0x%X byã†(%d MiB)\n", 1 << 
cfù
->
DevSize
, 1<< (cfip->DevSize - 20));

270 
	`¥ötk
("Fœsh Devi˚ I¡îÁ˚ des¸ùti⁄: 0x%4.4X\n", 
cfù
->
I¡îÁ˚Desc
);

271 
cfù
->
I¡îÁ˚Desc
) {

273 
	`¥ötk
(" - x8-onlyásynchronous interface\n");

277 
	`¥ötk
(" - x16-onlyásynchronous interface\n");

281 
	`¥ötk
(" - supports x8ánd x16 via BYTE# withásynchronous interface\n");

285 
	`¥ötk
(" - x32-onlyásynchronous interface\n");

289 
	`¥ötk
(" - Not Allowed / Reserved\n");

293 
	`¥ötk
(" - Unknown\n");

297 
	`¥ötk
("Max. byã†ö buf„∏wrôe: 0x%x\n", 1<< 
cfù
->
MaxBufWrôeSize
);

298 
	`¥ötk
("Numbî o‡Eø£ Block Regi⁄s: %d\n", 
cfù
->
NumEø£Regi⁄s
);

300 
	}
}

303 
chù_¥obe
 
	gcfi_chù_¥obe
 = {

304 
«me
: "CFI",

305 
¥obe_chù
: 
cfi_¥obe_chù


308 
mtd_öfo
 *
	$cfi_¥obe
(
m≠_öfo
 *
m≠
)

314  
	`mtd_do_chù_¥obe
(
m≠
, &
cfi_chù_¥obe
);

315 
	}
}

317 
mtd_chù_drivî
 
	gcfi_chùdrv
 = {

318 
¥obe
: 
cfi_¥obe
,

319 
«me
: "cfi_probe",

320 
moduÀ
: 
THIS_MODULE


323 
__öô
 
	$cfi_¥obe_öô
()

325 
	`ªgi°î_mtd_chù_drivî
(&
cfi_chùdrv
);

327 
	}
}

329 
__exô
 
	$cfi_¥obe_exô
()

331 
	`uƒegi°î_mtd_chù_drivî
(&
cfi_chùdrv
);

332 
	}
}

334 
moduÀ_öô
(
cfi_¥obe_öô
);

335 
moduÀ_exô
(
cfi_¥obe_exô
);

337 
MODULE_LICENSE
("GPL");

338 
MODULE_AUTHOR
("David Woodhouse <dwmw2@infradead.org>Étál.");

339 
MODULE_DESCRIPTION
("Probe code for CFI-compliant flash chips");

	@chipreg.c

8 
	~<löux/kî√l.h
>

9 
	~<löux/c⁄fig.h
>

10 
	~<löux/kmod.h
>

11 
	~<löux/•ölock.h
>

12 
	~<löux/mtd/com∑tmac.h
>

13 
	~<löux/mtd/m≠.h
>

15 
•ölock_t
 
	gchù_drvs_lock
 = 
SPIN_LOCK_UNLOCKED
;

16 
LIST_HEAD
(
chù_drvs_li°
);

18 
	$ªgi°î_mtd_chù_drivî
(
mtd_chù_drivî
 *
drv
)

20 
	`•ö_lock
(&
chù_drvs_lock
);

21 
	`li°_add
(&
drv
->
li°
, &
chù_drvs_li°
);

22 
	`•ö_u∆ock
(&
chù_drvs_lock
);

23 
	}
}

25 
	$uƒegi°î_mtd_chù_drivî
(
mtd_chù_drivî
 *
drv
)

27 
	`•ö_lock
(&
chù_drvs_lock
);

28 
	`li°_dñ
(&
drv
->
li°
);

29 
	`•ö_u∆ock
(&
chù_drvs_lock
);

30 
	}
}

32 
mtd_chù_drivî
 *
	$gë_mtd_chù_drivî
 (c⁄° *
«me
)

34 
li°_hód
 *
pos
;

35 
mtd_chù_drivî
 *
ªt
 = 
NULL
, *
this
;

37 
	`•ö_lock
(&
chù_drvs_lock
);

39 
	`li°_f‹_óch
(
pos
, &
chù_drvs_li°
) {

40 
this
 = 
	`li°_íåy
(
pos
, 
	`ty≥of
(*this), 
li°
);

42 i‡(!
	`°rcmp
(
this
->
«me
,Çame)) {

43 
ªt
 = 
this
;

47 i‡(
ªt
 && !
	`åy_öc_mod_cou¡
‘ë->
moduÀ
)) {

49 
ªt
 = 
NULL
;

52 
	`•ö_u∆ock
(&
chù_drvs_lock
);

54  
ªt
;

55 
	}
}

60 
mtd_öfo
 *
	$do_m≠_¥obe
(c⁄° *
«me
, 
m≠_öfo
 *
m≠
)

62 
mtd_chù_drivî
 *
drv
;

63 
mtd_öfo
 *
ªt
;

65 
drv
 = 
	`gë_mtd_chù_drivî
(
«me
);

67 i‡(!
drv
 && !
	`ªque°_moduÀ
(
«me
))

68 
drv
 = 
	`gë_mtd_chù_drivî
(
«me
);

70 i‡(!
drv
)

71  
NULL
;

73 
ªt
 = 
drv
->
	`¥obe
(
m≠
);

74 #ifde‡
CONFIG_MODULES


80 if(
drv
->
moduÀ
)

81 
	`__MOD_DEC_USE_COUNT
(
drv
->
moduÀ
);

84 i‡(
ªt
)

85  
ªt
;

87  
NULL
;

88 
	}
}

90 
EXPORT_SYMBOL
(
ªgi°î_mtd_chù_drivî
);

91 
EXPORT_SYMBOL
(
uƒegi°î_mtd_chù_drivî
);

92 
EXPORT_SYMBOL
(
do_m≠_¥obe
);

94 
MODULE_LICENSE
("GPL");

95 
MODULE_AUTHOR
("David Woodhouse <dwmw2@infradead.org>");

96 
MODULE_DESCRIPTION
("CoreÑoutines forÑegisteringánd invoking MTD chip drivers");

	@gen_probe.c

8 
	~<löux/kî√l.h
>

9 
	~<löux/mtd/mtd.h
>

10 
	~<löux/mtd/m≠.h
>

11 
	~<löux/mtd/cfi.h
>

12 
	~<löux/mtd/gí_¥obe.h
>

14 
mtd_öfo
 *
check_cmd_£t
(
m≠_öfo
 *, );

15 
cfi_¥iv©e
 *
gí¥obe_idít_chùs
(
m≠_öfo
 *
m≠
,

16 
chù_¥obe
 *
˝
);

17 
gí¥obe_√w_chù
(
m≠_öfo
 *
m≠
, 
chù_¥obe
 *
˝
,

18 
cfi_¥iv©e
 *
cfi
);

20 
mtd_öfo
 *
	$mtd_do_chù_¥obe
(
m≠_öfo
 *
m≠
, 
chù_¥obe
 *
˝
)

22 
mtd_öfo
 *
mtd
 = 
NULL
;

23 
cfi_¥iv©e
 *
cfi
;

26 
cfi
 = 
	`gí¥obe_idít_chùs
(
m≠
, 
˝
);

28 i‡(!
cfi
)

29  
NULL
;

31 
m≠
->
Êdrv_¥iv
 = 
cfi
;

34 
mtd
 = 
	`check_cmd_£t
(
m≠
, 1);

35 i‡(!
mtd
)

36 
mtd
 = 
	`check_cmd_£t
(
m≠
, 0);

38 i‡(
mtd
)

39  
mtd
;

41 
	`¥ötk
(
KERN_WARNING
"gen_probe: No supported Vendor Command Set found\n");

43 
	`k‰ì
(
cfi
->
cfiq
);

44 
	`k‰ì
(
cfi
);

45 
m≠
->
Êdrv_¥iv
 = 
NULL
;

46  
NULL
;

47 
	}
}

48 
EXPORT_SYMBOL
(
mtd_do_chù_¥obe
);

51 
cfi_¥iv©e
 *
	$gí¥obe_idít_chùs
(
m≠_öfo
 *
m≠
, 
chù_¥obe
 *
˝
)

53 
ba£
=0;

54 
cfi_¥iv©e
 
cfi
;

55 
cfi_¥iv©e
 *
ªtcfi
;

56 
Êchù
 
chù
[
MAX_CFI_CHIPS
];

57 
i
;

59 
	`mem£t
(&
cfi
, 0, (cfi));

63 i‡(!
	`gí¥obe_√w_chù
(
m≠
, 
˝
, &
cfi
)) {

65 
	`¥ötk
(
KERN_WARNING
 "%s: FoundÇo %s deviceátÜocation zero\n",

66 
˝
->
«me
, 
m≠
->name);

67  
NULL
;

74 i‡(
cfi
.
cfiq
->
NumEø£Regi⁄s
 == 0) {

75 
	`¥ötk
(
KERN_WARNING
 "Number ofÉraseÑegions is zero\n");

76 
	`k‰ì
(
cfi
.
cfiq
);

77  
NULL
;

80 
chù
[0].
°¨t
 = 0;

81 
chù
[0].
°©e
 = 
FL_READY
;

82 
cfi
.
chùshi·
 = cfi.
cfiq
->
DevSize
;

84 
cfi
.
öãæóve
) {

85 #ifde‡
CFIDEV_INTERLEAVE_1


89 #ifde‡
CFIDEV_INTERLEAVE_2


91 
cfi
.
chùshi·
++;

94 #ifde‡
CFIDEV_INTERLEAVE_4


96 
cfi
.
chùshi·
+=2;

100 
	`BUG
();

103 
cfi
.
numchùs
 = 1;

117 
ba£
 = (1<<
cfi
.
chùshi·
); ba£ + (1<<cfi.chùshi·Ë<
m≠
->
size
;

118 
ba£
 +(1<<
cfi
.
chùshi·
))

119 
˝
->
	`¥obe_chù
(
m≠
, 
ba£
, &
chù
[0], &
cfi
);

126 
ªtcfi
 = 
	`kmÆloc
((
cfi_¥iv©e
Ë+ 
cfi
.
numchùs
 * (
Êchù
), 
GFP_KERNEL
);

128 i‡(!
ªtcfi
) {

129 
	`¥ötk
(
KERN_WARNING
 "%s: kmÆlo¯Áûed f‹ CFIÖriv©ê°ru˘uª\n", 
m≠
->
«me
);

130 
	`k‰ì
(
cfi
.
cfiq
);

131  
NULL
;

134 
	`mem˝y
(
ªtcfi
, &
cfi
, (cfi));

135 
	`mem˝y
(&
ªtcfi
->
chùs
[0], 
chù
, (
Êchù
Ë* 
cfi
.
numchùs
);

138 
i
=0; i< 
ªtcfi
->
numchùs
; i++) {

139 
	`öô_waôqueue_hód
(&
ªtcfi
->
chùs
[
i
].
wq
);

140 
	`•ö_lock_öô
(&
ªtcfi
->
chùs
[
i
].
_•ölock
);

141 
ªtcfi
->
chùs
[
i
].
muãx
 = &ªtcfi->chùs[i].
_•ölock
;

144  
ªtcfi
;

145 
	}
}

148 
	$gí¥obe_√w_chù
(
m≠_öfo
 *
m≠
, 
chù_¥obe
 *
˝
,

149 
cfi_¥iv©e
 *
cfi
)

151 
m≠
->
buswidth
) {

152 #ifde‡
CFIDEV_BUSWIDTH_1


153 
CFIDEV_BUSWIDTH_1
:

154 
cfi
->
öãæóve
 = 
CFIDEV_INTERLEAVE_1
;

156 
cfi
->
devi˚_ty≥
 = 
CFI_DEVICETYPE_X8
;

157 i‡(
˝
->
	`¥obe_chù
(
m≠
, 0, 
NULL
, 
cfi
))

160 
cfi
->
devi˚_ty≥
 = 
CFI_DEVICETYPE_X16
;

161 i‡(
˝
->
	`¥obe_chù
(
m≠
, 0, 
NULL
, 
cfi
))

166 #ifde‡
CFIDEV_BUSWIDTH_2


167 
CFIDEV_BUSWIDTH_2
:

168 #ifde‡
CFIDEV_INTERLEAVE_1


169 
cfi
->
öãæóve
 = 
CFIDEV_INTERLEAVE_1
;

171 
cfi
->
devi˚_ty≥
 = 
CFI_DEVICETYPE_X16
;

172 i‡(
˝
->
	`¥obe_chù
(
m≠
, 0, 
NULL
, 
cfi
))

175 #ifde‡
CFIDEV_INTERLEAVE_2


176 
cfi
->
öãæóve
 = 
CFIDEV_INTERLEAVE_2
;

178 
cfi
->
devi˚_ty≥
 = 
CFI_DEVICETYPE_X8
;

179 i‡(
˝
->
	`¥obe_chù
(
m≠
, 0, 
NULL
, 
cfi
))

182 
cfi
->
devi˚_ty≥
 = 
CFI_DEVICETYPE_X16
;

183 i‡(
˝
->
	`¥obe_chù
(
m≠
, 0, 
NULL
, 
cfi
))

189 #ifde‡
CFIDEV_BUSWIDTH_4


190 
CFIDEV_BUSWIDTH_4
:

191 #i‡
	`deföed
(
CFIDEV_INTERLEAVE_1
Ë&& deföed(
SOMEONE_ACTUALLY_MAKES_THESE
)

192 
cfi
->
öãæóve
 = 
CFIDEV_INTERLEAVE_1
;

194 
cfi
->
devi˚_ty≥
 = 
CFI_DEVICETYPE_X32
;

195 i‡(
˝
->
	`¥obe_chù
(
m≠
, 0, 
NULL
, 
cfi
))

198 #ifde‡
CFIDEV_INTERLEAVE_2


199 
cfi
->
öãæóve
 = 
CFIDEV_INTERLEAVE_2
;

201 #ifde‡
SOMEONE_ACTUALLY_MAKES_THESE


202 
cfi
->
devi˚_ty≥
 = 
CFI_DEVICETYPE_X32
;

203 i‡(
˝
->
	`¥obe_chù
(
m≠
, 0, 
NULL
, 
cfi
))

206 
cfi
->
devi˚_ty≥
 = 
CFI_DEVICETYPE_X16
;

207 i‡(
˝
->
	`¥obe_chù
(
m≠
, 0, 
NULL
, 
cfi
))

210 
cfi
->
devi˚_ty≥
 = 
CFI_DEVICETYPE_X8
;

211 i‡(
˝
->
	`¥obe_chù
(
m≠
, 0, 
NULL
, 
cfi
))

214 #ifde‡
CFIDEV_INTERLEAVE_4


215 
cfi
->
öãæóve
 = 
CFIDEV_INTERLEAVE_4
;

217 #ifde‡
SOMEONE_ACTUALLY_MAKES_THESE


218 
cfi
->
devi˚_ty≥
 = 
CFI_DEVICETYPE_X32
;

219 i‡(
˝
->
	`¥obe_chù
(
m≠
, 0, 
NULL
, 
cfi
))

222 
cfi
->
devi˚_ty≥
 = 
CFI_DEVICETYPE_X16
;

223 i‡(
˝
->
	`¥obe_chù
(
m≠
, 0, 
NULL
, 
cfi
))

226 
cfi
->
devi˚_ty≥
 = 
CFI_DEVICETYPE_X8
;

227 i‡(
˝
->
	`¥obe_chù
(
m≠
, 0, 
NULL
, 
cfi
))

233 #ifde‡
CFIDEV_BUSWIDTH_8


234 
CFIDEV_BUSWIDTH_8
:

235 #i‡
	`deföed
(
CFIDEV_INTERLEAVE_2
Ë&& deföed(
SOMEONE_ACTUALLY_MAKES_THESE
)

236 
cfi
->
öãæóve
 = 
CFIDEV_INTERLEAVE_2
;

238 
cfi
->
devi˚_ty≥
 = 
CFI_DEVICETYPE_X32
;

239 i‡(
˝
->
	`¥obe_chù
(
m≠
, 0, 
NULL
, 
cfi
))

242 #ifde‡
CFIDEV_INTERLEAVE_4


243 
cfi
->
öãæóve
 = 
CFIDEV_INTERLEAVE_4
;

245 #ifde‡
SOMEONE_ACTUALLY_MAKES_THESE


246 
cfi
->
devi˚_ty≥
 = 
CFI_DEVICETYPE_X32
;

247 i‡(
˝
->
	`¥obe_chù
(
m≠
, 0, 
NULL
, 
cfi
))

250 
cfi
->
devi˚_ty≥
 = 
CFI_DEVICETYPE_X16
;

251 i‡(
˝
->
	`¥obe_chù
(
m≠
, 0, 
NULL
, 
cfi
))

254 #ifde‡
CFIDEV_INTERLEAVE_8


255 
cfi
->
öãæóve
 = 
CFIDEV_INTERLEAVE_8
;

257 
cfi
->
devi˚_ty≥
 = 
CFI_DEVICETYPE_X16
;

258 i‡(
˝
->
	`¥obe_chù
(
m≠
, 0, 
NULL
, 
cfi
))

261 
cfi
->
devi˚_ty≥
 = 
CFI_DEVICETYPE_X8
;

262 i‡(
˝
->
	`¥obe_chù
(
m≠
, 0, 
NULL
, 
cfi
))

269 
	`¥ötk
(
KERN_WARNING
 "gí¥obe_√w_chù cÆÀd wôh unsuµ‹ãd buswidth %d\n", 
m≠
->
buswidth
);

273 
	}
}

276 
mtd_öfo
 *
	tcfi_cmd£t_‚_t
(
	tm≠_öfo
 *, );

278 
cfi_cmd£t_‚_t
 
cfi_cmd£t_0001
;

279 
cfi_cmd£t_‚_t
 
cfi_cmd£t_0002
;

280 
cfi_cmd£t_‚_t
 
cfi_cmd£t_0020
;

282 
ölöe
 
mtd_öfo
 *
	$cfi_cmd£t_unknown
(
m≠_öfo
 *
m≠
,

283 
¥im¨y
)

285 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

286 
__u16
 
ty≥
 = 
¥im¨y
?
cfi
->
cfiq
->
P_ID
:cfi->cfiq->
A_ID
;

287 #i‡
	`deföed
(
CONFIG_MODULES
Ë&& deföed(
HAVE_INTER_MODULE
)

288 
¥obíame
[32];

289 
cfi_cmd£t_‚_t
 *
¥obe_fun˘i⁄
;

291 
	`•rötf
(
¥obíame
, "cfi_cmd£t_%4.4X", 
ty≥
);

293 
¥obe_fun˘i⁄
 = 
	`öãr_moduÀ_gë_ªque°
(
¥obíame
,Örobename);

295 i‡(
¥obe_fun˘i⁄
) {

296 
mtd_öfo
 *
mtd
;

298 
mtd
 = (*
¥obe_fun˘i⁄
)(
m≠
, 
¥im¨y
);

300 
	`öãr_moduÀ_put
(
¥obíame
);

301  
mtd
;

304 
	`¥ötk
(
KERN_NOTICE
 "Support for command set %04XÇotÖresent\n",

305 
ty≥
);

307  
NULL
;

308 
	}
}

310 
mtd_öfo
 *
	$check_cmd_£t
(
m≠_öfo
 *
m≠
, 
¥im¨y
)

312 
cfi_¥iv©e
 *
cfi
 = 
m≠
->
Êdrv_¥iv
;

313 
__u16
 
ty≥
 = 
¥im¨y
?
cfi
->
cfiq
->
P_ID
:cfi->cfiq->
A_ID
;

315 i‡(
ty≥
 =
P_ID_NONE
 ||Åy≥ =
P_ID_RESERVED
)

316  
NULL
;

318 
ty≥
){

325 #ifde‡
CONFIG_MTD_CFI_INTELEXT


328  
	`cfi_cmd£t_0001
(
m≠
, 
¥im¨y
);

330 #ifde‡
CONFIG_MTD_CFI_AMDSTD


332  
	`cfi_cmd£t_0002
(
m≠
, 
¥im¨y
);

334 #ifde‡
CONFIG_MTD_CFI_STAA


336  
	`cfi_cmd£t_0020
(
m≠
, 
¥im¨y
);

340  
	`cfi_cmd£t_unknown
(
m≠
, 
¥im¨y
);

341 
	}
}

343 
MODULE_LICENSE
("GPL");

344 
MODULE_AUTHOR
("David Woodhouse <dwmw2@infradead.org>");

345 
MODULE_DESCRIPTION
("HelperÑoutines for flash chipÖrobe code");

	@jedec.c

17 
	~<löux/mtd/jedec.h
>

19 
mtd_öfo
 *
jedec_¥obe
(
m≠_öfo
 *);

20 
jedec_¥obe8
(
m≠_öfo
 *
m≠
,
ba£
,

21 
jedec_¥iv©e
 *
¥iv
);

22 
jedec_¥obe16
(
m≠_öfo
 *
m≠
,
ba£
,

23 
jedec_¥iv©e
 *
¥iv
);

24 
jedec_¥obe32
(
m≠_öfo
 *
m≠
,
ba£
,

25 
jedec_¥iv©e
 *
¥iv
);

26 
jedec_Êash_chù_sˇn
(
jedec_¥iv©e
 *
¥iv
,
°¨t
,

27 
Àn
);

28 
Êash_îa£
(
mtd_öfo
 *
mtd
, 
îa£_öfo
 *
ö°r
);

29 
Êash_wrôe
(
mtd_öfo
 *
mtd
, 
loff_t
 
°¨t
, 
size_t
 
Àn
,

30 
size_t
 *
ªéí
, c⁄° 
u_ch¨
 *
buf
);

32 
	gmy_b™k_size
;

36 c⁄° 
JEDECTabÀ
 
	gJEDEC_èbÀ
[] =

37 {{0x013D,"AMD Am29F017D",2*1024*1024,64*1024,
MTD_CAP_NORFLASH
},

38 {0x01AD,"AMD Am29F016",2*1024*1024,64*1024,
MTD_CAP_NORFLASH
},

39 {0x01D5,"AMD Am29F080",1*1024*1024,64*1024,
MTD_CAP_NORFLASH
},

40 {0x01A4,"AMD Am29F040",512*1024,64*1024,
MTD_CAP_NORFLASH
},

41 {0x20E3,"AMD Am29W040B",512*1024,64*1024,
MTD_CAP_NORFLASH
},

42 {0xC2AD,"Ma¸⁄ix MX29F016",2*1024*1024,64*1024,
MTD_CAP_NORFLASH
},

45 c⁄° 
JEDECTabÀ
 *
jedec_idtoöf
(
__u8
 
m‰
,__u8 
id
);

46 
	$jedec_sync
(
mtd_öfo
 *
mtd
Ë{
	}
};

47 
jedec_ªad
(
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
,

48 
size_t
 *
ªéí
, 
u_ch¨
 *
buf
);

49 
jedec_ªad_b™ked
(
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
,

50 
size_t
 *
ªéí
, 
u_ch¨
 *
buf
);

52 
mtd_öfo
 *
jedec_¥obe
(
m≠_öfo
 *
m≠
);

56 
mtd_chù_drivî
 
	gjedec_chùdrv
 = {

57 
¥obe
: 
jedec_¥obe
,

58 
«me
: "jedec",

59 
moduÀ
: 
THIS_MODULE


64 
mtd_öfo
 *
	$jedec_¥obe
(
m≠_öfo
 *
m≠
)

66 
mtd_öfo
 *
MTD
;

67 
jedec_¥iv©e
 *
¥iv
;

68 
Ba£
;

69 
Se˘‹Size
;

70 
cou¡
;

71 
I
,
Uniq
;

72 
P¨t
[200];

73 
	`mem£t
(&
¥iv
,0,(priv));

75 
MTD
 = 
	`kmÆloc
((
mtd_öfo
Ë+ (
jedec_¥iv©e
), 
GFP_KERNEL
);

76 i‡(!
MTD
)

77  
NULL
;

79 
	`mem£t
(
MTD
, 0, (
mtd_öfo
Ë+ (
jedec_¥iv©e
));

80 
¥iv
 = (
jedec_¥iv©e
 *)&
MTD
[1];

82 
my_b™k_size
 = 
m≠
->
size
;

84 i‡(
m≠
->
size
/
my_b™k_size
 > 
MAX_JEDEC_CHIPS
)

86 
	`¥ötk
("mtd: Increase MAX_JEDEC_CHIPS,Åoo many banks.\n");

87 
	`k‰ì
(
MTD
);

91 
Ba£
 = 0; Ba£ < 
m≠
->
size
; Ba£ +
my_b™k_size
)

94 i‡(
m≠
->
buswidth
 == 0)

95 
m≠
->
buswidth
 = 1;

97 i‡(
m≠
->
buswidth
 == 1){

98 i‡(
	`jedec_¥obe8
(
m≠
,
Ba£
,
¥iv
) == 0) {

99 
	`¥ötk
("didÑecognize jedec chip\n");

100 
	`k‰ì
(
MTD
);

104 i‡(
m≠
->
buswidth
 == 2)

105 
	`jedec_¥obe16
(
m≠
,
Ba£
,
¥iv
);

106 i‡(
m≠
->
buswidth
 == 4)

107 
	`jedec_¥obe32
(
m≠
,
Ba£
,
¥iv
);

111 
Se˘‹Size
 = 0;

112 
I
 = 0; 
¥iv
->
chùs
[I].
jedec
 !0 && I < 
MAX_JEDEC_CHIPS
; I++)

116 i‡(
¥iv
->
chùs
[
I
].
£˘‹size
 > 
Se˘‹Size
)

117 
Se˘‹Size
 = 
¥iv
->
chùs
[
I
].
£˘‹size
;

121 
I
 = 0; 
¥iv
->
chùs
[I].
jedec
 !0 && I < 
MAX_JEDEC_CHIPS
; I++)

123 i‡((
Se˘‹Size
/
¥iv
->
chùs
[
I
].
£˘‹size
)*priv->chips[I].sectorsize != SectorSize)

125 
	`¥ötk
("mtd: Failed. Device has incompatible mixed sector sizes\n");

126 
	`k‰ì
(
MTD
);

133 
cou¡
 = 1;

134 
	`°∫˝y
(
P¨t
,
m≠
->
«me
,(Part)-10);

135 
P¨t
[(Part)-11] = 0;

136 
	`°rˇt
(
P¨t
," ");

137 
Uniq
 = 0;

138 
I
 = 0; 
¥iv
->
chùs
[I].
jedec
 !0 && I < 
MAX_JEDEC_CHIPS
; I++)

140 c⁄° 
JEDECTabÀ
 *
JEDEC
;

142 i‡(
¥iv
->
chùs
[
I
+1].
jedec
 ==Öriv->chips[I].jedec)

144 
cou¡
++;

149 
JEDEC
 = 
	`jedec_idtoöf
(
¥iv
->
chùs
[
I
].
jedec
 >> 8,priv->chips[I].jedec);

150 i‡(
JEDEC
 == 0)

152 
	`¥ötk
("mtd: Internal Error, JEDECÇot set\n");

153 
	`k‰ì
(
MTD
);

157 i‡(
Uniq
 != 0)

158 
	`°rˇt
(
P¨t
,",");

159 
Uniq
++;

161 i‡(
cou¡
 != 1)

162 
	`•rötf
(
P¨t
+
	`°æí
(P¨t),"%x*[%s]",
cou¡
,
JEDEC
->
«me
);

164 
	`•rötf
(
P¨t
+
	`°æí
(P¨t),"%s",
JEDEC
->
«me
);

165 i‡(
	`°æí
(
P¨t
) > (Part)*2/3)

167 
cou¡
 = 1;

174 i‡(
¥iv
->
size
 < 
my_b™k_size
)

175 
my_b™k_size
 = 
¥iv
->
size
;

176 
¥iv
->
is_b™ked
 = 0;

179 i‡(!
¥iv
->
size
) {

180 
	`¥ötk
("priv->size is zero\n");

181 
	`k‰ì
(
MTD
);

184 i‡(
¥iv
->
size
/
my_b™k_size
) {

185 i‡(
¥iv
->
size
/
my_b™k_size
 == 1) {

186 
¥iv
->
size
 = 
my_b™k_size
;

189 
I
 = 0; I !
¥iv
->
size
/
my_b™k_size
 - 1; I++)

191 i‡(
¥iv
->
b™k_fûl
[
I
] !
my_b™k_size
)

192 
¥iv
->
is_b™ked
 = 1;

196 
	`¥ötk
("¥iv->b™k_fûl[%d] i†%lx,Öriv->b™k_fûl[0] i†%lx\n",
I
,
¥iv
->
b™k_fûl
[I],priv->bank_fill[0]);

197 i‡(
¥iv
->
b™k_fûl
[
I
] !=Öriv->bank_fill[0])

199 
	`¥ötk
("mtd: Failed. Cannot handle unsymmetric banking\n");

200 
	`k‰ì
(
MTD
);

206 i‡(
¥iv
->
is_b™ked
 == 1)

207 
	`°rˇt
(
P¨t
,", banked");

211 
	`mem£t
(
MTD
,0,(*MTD));

214 
MTD
->
«me
 = 
m≠
->name;

215 
MTD
->
ty≥
 = 
MTD_NORFLASH
;

216 
MTD
->
Êags
 = 
MTD_CAP_NORFLASH
;

217 
MTD
->
îa£size
 = 
Se˘‹Size
*(
m≠
->
buswidth
);

219 
MTD
->
size
 = 
¥iv
->size;

222 
MTD
->
îa£
 = 
Êash_îa£
;

223 i‡(
¥iv
->
is_b™ked
 == 1)

224 
MTD
->
ªad
 = 
jedec_ªad_b™ked
;

226 
MTD
->
ªad
 = 
jedec_ªad
;

227 
MTD
->
wrôe
 = 
Êash_wrôe
;

228 
MTD
->
sync
 = 
jedec_sync
;

229 
MTD
->
¥iv
 = 
m≠
;

230 
m≠
->
Êdrv_¥iv
 = 
¥iv
;

231 
m≠
->
Êdrv
 = &
jedec_chùdrv
;

232 
MOD_INC_USE_COUNT
;

233  
MTD
;

234 
	}
}

237 
	$check∑rôy
(
u_ch¨
 
C
)

239 
u_ch¨
 
∑rôy
 = 0;

240 
C
 != 0)

242 
∑rôy
 ^
C
 & 1;

243 
C
 >>= 1;

246  
∑rôy
 == 1;

247 
	}
}

253 
	$h™dÀ_jedecs
(
m≠_öfo
 *
m≠
,
__u8
 *
Mfg
,__u8 *
Id
,
Cou¡
,

254 
ba£
,
jedec_¥iv©e
 *
¥iv
)

256 
I
,
J
;

257 
Size
;

258 
Se˘‹Size
;

259 c⁄° 
JEDECTabÀ
 *
JEDEC
;

262 
I
 = 0; I !
Cou¡
; I++)

264 i‡(
	`check∑rôy
(
Mfg
[
I
]Ë=0 || check∑rôy(
Id
[I]) == 0)

269 
JEDEC
 = 
	`jedec_idtoöf
(
Mfg
[0],
Id
[0]);

271 i‡(
JEDEC
 == 0)

273 
	`¥ötk
("mtd: Found JEDEC fœsh chù, buàdÿnŸ havê®èbÀÉ¡ry f‹ %x:%x\n",
Mfg
[0],Mfg[1]);

277 
Size
 = 
JEDEC
->
size
;

278 
Se˘‹Size
 = 
JEDEC
->
£˘‹size
;

279 
I
 = 0; I !
Cou¡
; I++)

281 
JEDEC
 = 
	`jedec_idtoöf
(
Mfg
[0],
Id
[0]);

282 i‡(
JEDEC
 == 0)

284 
	`¥ötk
("mtd: Found JEDEC fœsh chù, buàdÿnŸ havê®èbÀÉ¡ry f‹ %x:%x\n",
Mfg
[0],Mfg[1]);

288 i‡(
Size
 !
JEDEC
->
size
 || 
Se˘‹Size
 !JEDEC->
£˘‹size
)

290 
	`¥ötk
("mtd: Failed. Interleved flash doesÇot have matching characteristics\n");

296 
I
 = 0; I !
MAX_JEDEC_CHIPS
; I++)

298 i‡(
¥iv
->
chùs
[
I
].
jedec
 == 0)

302 i‡(
I
 + 
Cou¡
 > 
MAX_JEDEC_CHIPS
)

304 
	`¥ötk
("mtd: Device hasÅoo many chips. Increase MAX_JEDEC_CHIPS\n");

309 
J
 = 0; J !
Cou¡
; J++)

311 
B™k
;

313 
JEDEC
 = 
	`jedec_idtoöf
(
Mfg
[
J
],
Id
[J]);

314 
¥iv
->
chùs
[
I
].
jedec
 = (
Mfg
[
J
] << 8Ë| 
Id
[J];

315 
¥iv
->
chùs
[
I
].
size
 = 
JEDEC
->size;

316 
¥iv
->
chùs
[
I
].
£˘‹size
 = 
JEDEC
->sectorsize;

317 
¥iv
->
chùs
[
I
].
ba£
 = ba£ + 
J
;

318 
¥iv
->
chùs
[
I
].
d©ashi·
 = 
J
*8;

319 
¥iv
->
chùs
[
I
].
ˇ∑bûôõs
 = 
JEDEC
->capabilities;

320 
¥iv
->
chùs
[
I
].
off£t
 =Öriv->
size
 + 
J
;

323 
¥iv
->
chùs
[
I
].
addrshi·
 = 0;

324 
B™k
 = 
Cou¡
; B™k !1; B™k >>1, 
¥iv
->
chùs
[
I
].
addrshi·
++);

327 
B™k
 = 
ba£
 & (~(
my_b™k_size
-1));

328 i‡(
¥iv
->
b™k_fûl
[
B™k
/
my_b™k_size
] < 
ba£
 +

329 (
JEDEC
->
size
 << 
¥iv
->
chùs
[
I
].
addrshi·
Ë- 
B™k
)

330 
¥iv
->
b™k_fûl
[
B™k
/
my_b™k_size
] = 
ba£
 + (
JEDEC
->
size
 <<Öriv->
chùs
[
I
].
addrshi·
) - Bank;

331 
I
++;

334 
¥iv
->
size
 +¥iv->
chùs
[
I
-1].size*
Cou¡
;

336  
¥iv
->
chùs
[
I
-1].
size
;

337 
	}
}

340 c⁄° 
JEDECTabÀ
 *
	$jedec_idtoöf
(
__u8
 
m‰
,__u8 
id
)

342 
__u16
 
Id
 = (
m‰
 << 8Ë| 
id
;

343 
I
 = 0;

344 
I
 = 0; 
JEDEC_èbÀ
[I].
jedec
 != 0; I++)

345 i‡(
JEDEC_èbÀ
[
I
].
jedec
 =
Id
)

346  
JEDEC_èbÀ
 + 
I
;

348 
	}
}

351 
	$jedec_¥obe8
(
m≠_öfo
 *
m≠
,
ba£
,

352 
jedec_¥iv©e
 *
¥iv
)

354 
	#Êªad
(
x
Ë
m≠
->
	`ªad8
(m≠,
ba£
+x)

	)

355 
	#Êwrôe
(
v
,
x
Ë
m≠
->
	`wrôe8
(m≠,v,
ba£
+x)

	)

357 c⁄° 
AutoSñ1
 = 0xAA;

358 c⁄° 
AutoSñ2
 = 0x55;

359 c⁄° 
AutoSñ3
 = 0x90;

360 c⁄° 
Re£t
 = 0xF0;

361 
__u32
 
OldVÆ
;

362 
__u8
 
Mfg
[1];

363 
__u8
 
Id
[1];

364 
I
;

365 
Size
;

368 
OldVÆ
 = 
	`Êªad
(
ba£
);

369 
I
 = 0; 
OldVÆ
 !
	`Êªad
(
ba£
) && I < 10000; I++)

370 
OldVÆ
 = 
	`Êªad
(
ba£
);

373 
	`Êwrôe
(
Re£t
,0x555);

376 
	`Êwrôe
(
AutoSñ1
,0x555);

377 
	`Êwrôe
(
AutoSñ2
,0x2AA);

378 
	`Êwrôe
(
AutoSñ3
,0x555);

381 
Mfg
[0] = 
	`Êªad
(0);

382 
Id
[0] = 
	`Êªad
(1);

385 
Size
 = 
	`h™dÀ_jedecs
(
m≠
,
Mfg
,
Id
,1,
ba£
,
¥iv
);

387 i‡(
Size
 == 0)

389 
	`Êwrôe
(
Re£t
,0x555);

395 
	`Êwrôe
(
Re£t
,0x555);

399 #unde‡
Êªad


400 #unde‡
Êwrôe


401 
	}
}

404 
	$jedec_¥obe16
(
m≠_öfo
 *
m≠
,
ba£
,

405 
jedec_¥iv©e
 *
¥iv
)

408 
	}
}

411 
	$jedec_¥obe32
(
m≠_öfo
 *
m≠
,
ba£
,

412 
jedec_¥iv©e
 *
¥iv
)

414 
	#Êªad
(
x
Ë
m≠
->
	`ªad32
(m≠,
ba£
+((x)<<2))

	)

415 
	#Êwrôe
(
v
,
x
Ë
m≠
->
	`wrôe32
(m≠,v,
ba£
+((x)<<2))

	)

417 c⁄° 
AutoSñ1
 = 0xAAAAAAAA;

418 c⁄° 
AutoSñ2
 = 0x55555555;

419 c⁄° 
AutoSñ3
 = 0x90909090;

420 c⁄° 
Re£t
 = 0xF0F0F0F0;

421 
__u32
 
OldVÆ
;

422 
__u8
 
Mfg
[4];

423 
__u8
 
Id
[4];

424 
I
;

425 
Size
;

428 
OldVÆ
 = 
	`Êªad
(
ba£
);

429 
I
 = 0; 
OldVÆ
 !
	`Êªad
(
ba£
) && I < 10000; I++)

430 
OldVÆ
 = 
	`Êªad
(
ba£
);

433 
	`Êwrôe
(
Re£t
,0x555);

436 
	`Êwrôe
(
AutoSñ1
,0x555);

437 
	`Êwrôe
(
AutoSñ2
,0x2AA);

438 
	`Êwrôe
(
AutoSñ3
,0x555);

441 i‡(
	`Êªad
(0) != flread(0x100) ||

442 
	`Êªad
(1) != flread(0x101))

444 
	`Êwrôe
(
Re£t
,0x555);

449 
OldVÆ
 = 
	`Êªad
(0);

450 
I
 = 0; I != 4; I++)

451 
Mfg
[
I
] = (
OldVÆ
 >> (I*8));

452 
OldVÆ
 = 
	`Êªad
(1);

453 
I
 = 0; I != 4; I++)

454 
Id
[
I
] = (
OldVÆ
 >> (I*8));

456 
Size
 = 
	`h™dÀ_jedecs
(
m≠
,
Mfg
,
Id
,4,
ba£
,
¥iv
);

457 i‡(
Size
 == 0)

459 
	`Êwrôe
(
Re£t
,0x555);

468 i‡(
ba£
 + (
Size
<<2)+0x555 < 
m≠
->
size
 &&

469 
ba£
 + (
Size
<<2)+0x555 < (ba£ & (~(
my_b™k_size
-1))) + my_bank_size)

471 i‡(
	`Êªad
(
ba£
+
Size
) != flread(base+Size + 0x100) ||

472 
	`Êªad
(
ba£
+
Size
 + 1) != flread(base+Size + 0x101))

474 
	`jedec_¥obe32
(
m≠
,
ba£
+
Size
,
¥iv
);

479 
	`Êwrôe
(0xF0F0F0F0,0x555);

483 #unde‡
Êªad


484 #unde‡
Êwrôe


485 
	}
}

488 
	$jedec_ªad
(
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
,

489 
size_t
 *
ªéí
, 
u_ch¨
 *
buf
)

491 
m≠_öfo
 *
m≠
 = (m≠_öfÿ*)
mtd
->
¥iv
;

493 
m≠
->
	`c›y_‰om
(m≠, 
buf
, 
‰om
, 
Àn
);

494 *
ªéí
 = 
Àn
;

496 
	}
}

500 
	$jedec_ªad_b™ked
(
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
,

501 
size_t
 *
ªéí
, 
u_ch¨
 *
buf
)

503 
m≠_öfo
 *
m≠
 = (m≠_öfÿ*)
mtd
->
¥iv
;

504 
jedec_¥iv©e
 *
¥iv
 = (jedec_¥iv©ê*)
m≠
->
Êdrv_¥iv
;

506 *
ªéí
 = 0;

507 
Àn
 > 0)

510 
b™k
 = 
‰om
 & (~(
¥iv
->
b™k_fûl
[0]-1));

511 
off£t
 = 
‰om
 & (
¥iv
->
b™k_fûl
[0]-1);

512 
gë
 = 
Àn
;

513 i‡(
¥iv
->
b™k_fûl
[0] - 
off£t
 < 
Àn
)

514 
gë
 = 
¥iv
->
b™k_fûl
[0] - 
off£t
;

516 
b™k
 /
¥iv
->
b™k_fûl
[0];

517 
m≠
->
	`c›y_‰om
(m≠,
buf
 + *
ªéí
,
b™k
*
my_b™k_size
 + 
off£t
,
gë
);

519 
Àn
 -
gë
;

520 *
ªéí
 +
gë
;

521 
‰om
 +
gë
;

524 
	}
}

528 
	$jedec_Êash_Áûed
(
code
)

532 i‡((
code
 & (1 << 5)) != 0)

534 
	`¥ötk
("mtd: Internal Flash failure\n");

537 
	`¥ötk
("mtd: Programming didn'tÅake\n");

538 
	}
}

545 
	$Êash_îa£
(
mtd_öfo
 *
mtd
, 
îa£_öfo
 *
ö°r
)

548 
	#Êªad
(
x
Ë
m≠
->
	`ªad8
(m≠,
chù
->
ba£
+((x)<<chù->
addrshi·
))

	)

549 
	#Êwrôe
(
v
,
x
Ë
m≠
->
	`wrôe8
(m≠,v,
chù
->
ba£
+((x)<<chù->
addrshi·
))

	)

551 
Time
 = 0;

552 
NoTime
 = 0;

553 
°¨t
 = 
ö°r
->
addr
, 
Àn
 = instr->len;

554 
I
;

555 
m≠_öfo
 *
m≠
 = (m≠_öfÿ*)
mtd
->
¥iv
;

556 
jedec_¥iv©e
 *
¥iv
 = (jedec_¥iv©ê*)
m≠
->
Êdrv_¥iv
;

559 i‡(
°¨t
 + 
Àn
 > 
mtd
->
size
 ||

560 (
°¨t
 % 
mtd
->
îa£size
) != 0 ||

561 (
Àn
 % 
mtd
->
îa£size
) != 0 ||

562 (
Àn
/
mtd
->
îa£size
) == 0)

563  -
EINVAL
;

565 
	`jedec_Êash_chù_sˇn
(
¥iv
,
°¨t
,
Àn
);

568 
I
 = 0; 
¥iv
->
chùs
[I].
jedec
 !0 && I < 
MAX_JEDEC_CHIPS
; I++)

570 
off
;

571 
jedec_Êash_chù
 *
chù
 = 
¥iv
->
chùs
 + 
I
;

573 i‡(
chù
->
Àngth
 == 0)

576 i‡(
chù
->
°¨t
 + chù->
Àngth
 > chù->
size
)

578 
	`¥ötk
("DIE\n");

579  -
EIO
;

582 
	`Êwrôe
(0xF0,
chù
->
°¨t
 + 0x555);

583 
	`Êwrôe
(0xAA,
chù
->
°¨t
 + 0x555);

584 
	`Êwrôe
(0x55,
chù
->
°¨t
 + 0x2AA);

585 
	`Êwrôe
(0x80,
chù
->
°¨t
 + 0x555);

586 
	`Êwrôe
(0xAA,
chù
->
°¨t
 + 0x555);

587 
	`Êwrôe
(0x55,
chù
->
°¨t
 + 0x2AA);

592 
off
 = 0; of‡< 
Àn
; of‡+
chù
->
£˘‹size
)

595 
	`Êwrôe
(0x30,
chù
->
°¨t
 + 
off
);

596 i‡(
off
 == 0)

598 i‡((
	`Êªad
(
chù
->
°¨t
 + 
off
) & (1 << 3)) != 0)

600 
	`¥ötk
("mtd: Ack! WeÅimed outÅheÉraseÅimer!\n");

601  -
EIO
;

616 
Time
 = 0;

617 
NoTime
 = 0;

618 
I
 = 0; 
¥iv
->
chùs
[I].
jedec
 !0 && I < 
MAX_JEDEC_CHIPS
; I++)

620 
jedec_Êash_chù
 *
chù
 = 
¥iv
->
chùs
 + 
I
;

621 
off
 = 0;

622 
todo
[4] = {0,0,0,0};

623 
todo_À·
 = 0;

624 
J
;

626 i‡(
chù
->
Àngth
 == 0)

631 
J
 = 0; 
¥iv
->
chùs
[J].
jedec
 !0 && J < 
MAX_JEDEC_CHIPS
; J++)

633 i‡((
¥iv
->
chùs
[
J
].
ba£
 & (~((1<<
chù
->
addrshi·
)-1))) ==

634 (
chù
->
ba£
 & (~((1<<chù->
addrshi·
)-1))))

636 
todo_À·
++;

637 
todo
[
¥iv
->
chùs
[
J
].
ba£
 & ((1<<
chù
->
addrshi·
)-1)] = 1;

646 
__u32
 
La°
[4];

647 
Cou¡
 = 0;

652 
m≠
->
buswidth
) {

654 
La°
[0] = 
m≠
->
	`ªad8
(m≠,(
chù
->
ba£
 >> chù->
addrshi·
Ë+ chù->
°¨t
 + 
off
);

655 
La°
[1] = 
m≠
->
	`ªad8
(m≠,(
chù
->
ba£
 >> chù->
addrshi·
Ë+ chù->
°¨t
 + 
off
);

656 
La°
[2] = 
m≠
->
	`ªad8
(m≠,(
chù
->
ba£
 >> chù->
addrshi·
Ë+ chù->
°¨t
 + 
off
);

659 
La°
[0] = 
m≠
->
	`ªad16
(m≠,(
chù
->
ba£
 >> chù->
addrshi·
Ë+ chù->
°¨t
 + 
off
);

660 
La°
[1] = 
m≠
->
	`ªad16
(m≠,(
chù
->
ba£
 >> chù->
addrshi·
Ë+ chù->
°¨t
 + 
off
);

661 
La°
[2] = 
m≠
->
	`ªad16
(m≠,(
chù
->
ba£
 >> chù->
addrshi·
Ë+ chù->
°¨t
 + 
off
);

664 
La°
[0] = 
m≠
->
	`ªad32
(m≠,(
chù
->
ba£
 >> chù->
addrshi·
Ë+ chù->
°¨t
 + 
off
);

665 
La°
[1] = 
m≠
->
	`ªad32
(m≠,(
chù
->
ba£
 >> chù->
addrshi·
Ë+ chù->
°¨t
 + 
off
);

666 
La°
[2] = 
m≠
->
	`ªad32
(m≠,(
chù
->
ba£
 >> chù->
addrshi·
Ë+ chù->
°¨t
 + 
off
);

669 
Cou¡
 = 3;

670 
todo_À·
 != 0)

672 
J
 = 0; J != 4; J++)

674 
__u8
 
Byã1
 = (
La°
[(
Cou¡
-1)%4] >> (
J
*8)) & 0xFF;

675 
__u8
 
Byã2
 = (
La°
[(
Cou¡
-2)%4] >> (
J
*8)) & 0xFF;

676 
__u8
 
Byã3
 = (
La°
[(
Cou¡
-3)%4] >> (
J
*8)) & 0xFF;

677 i‡(
todo
[
J
] == 0)

680 i‡((
Byã1
 & (1 << 7)Ë=0 && Byã1 !
Byã2
)

686 i‡(
Byã1
 =
Byã2
)

688 
	`jedec_Êash_Áûed
(
Byã3
);

689  -
EIO
;

692 
todo
[
J
] = 0;

693 
todo_À·
--;

698 
NoTime
 = 0;

700 
m≠
->
buswidth
) {

702 
La°
[
Cou¡
 % 4] = 
m≠
->
	`ªad8
(m≠,(
chù
->
ba£
 >> chù->
addrshi·
Ë+ chù->
°¨t
 + 
off
);

705 
La°
[
Cou¡
 % 4] = 
m≠
->
	`ªad16
(m≠,(
chù
->
ba£
 >> chù->
addrshi·
Ë+ chù->
°¨t
 + 
off
);

708 
La°
[
Cou¡
 % 4] = 
m≠
->
	`ªad32
(m≠,(
chù
->
ba£
 >> chù->
addrshi·
Ë+ chù->
°¨t
 + 
off
);

711 
Cou¡
++;

722 i‡(
chù
->
Àngth
 =chù->
size
)

723 
off
 = 
chù
->
size
;

725 
off
 +
chù
->
£˘‹size
;

727 i‡(
off
 >
chù
->
Àngth
)

729 
NoTime
 = 1;

732 
J
 = 0; 
¥iv
->
chùs
[J].
jedec
 !0 && J < 
MAX_JEDEC_CHIPS
; J++)

734 i‡((
¥iv
->
chùs
[
J
].
ba£
 & (~((1<<
chù
->
addrshi·
)-1))) ==

735 (
chù
->
ba£
 & (~((1<<chù->
addrshi·
)-1))))

736 
¥iv
->
chùs
[
J
].
Àngth
 = 0;

741 
ö°r
->
°©e
 = 
MTD_ERASE_DONE
;

742 i‡(
ö°r
->
ˇŒback
)

743 
ö°r
->
	`ˇŒback
(instr);

746 #unde‡
Êªad


747 #unde‡
Êwrôe


748 
	}
}

754 
	$Êash_wrôe
(
mtd_öfo
 *
mtd
, 
loff_t
 
°¨t
, 
size_t
 
Àn
,

755 
size_t
 *
ªéí
, c⁄° 
u_ch¨
 *
buf
)

760 
	#Êªad
(
x
Ë
m≠
->
	`ªad8
(m≠,
ba£
+(
off
&((1<<
chù
->
addrshi·
)-1))+((x)<<chù->addrshi·))

	)

761 
	#Êwrôe
(
v
,
x
Ë
m≠
->
	`wrôe8
(m≠,v,
ba£
+(
off
&((1<<
chù
->
addrshi·
)-1))+((x)<<chù->addrshi·))

	)

763 
m≠_öfo
 *
m≠
 = (m≠_öfÿ*)
mtd
->
¥iv
;

764 
jedec_¥iv©e
 *
¥iv
 = (jedec_¥iv©ê*)
m≠
->
Êdrv_¥iv
;

765 
ba£
;

766 
off
;

767 
size_t
 
ßve_Àn
 = 
Àn
;

769 i‡(
°¨t
 + 
Àn
 > 
mtd
->
size
)

770  -
EIO
;

775 
Àn
 != 0)

777 
jedec_Êash_chù
 *
chù
 = 
¥iv
->
chùs
;

778 
b™k
;

779 
boff£t
;

782 
off
 = (()
°¨t
Ë% (
chù
->
size
 << chù->
addrshi·
);

783 
ba£
 = 
°¨t
 - 
off
;

786 
b™k
 = 
ba£
 & (~(
¥iv
->
b™k_fûl
[0]-1));

787 
boff£t
 = 
ba£
 & (
¥iv
->
b™k_fûl
[0]-1);

788 
b™k
 = (b™k/
¥iv
->
b™k_fûl
[0])*
my_b™k_size
;

789 
ba£
 = 
b™k
 + 
boff£t
;

795 ; 
off
 !(
chù
->
size
 << chù->
addrshi·
Ë&& 
Àn
 !0; 
°¨t
++,Üí--, off++,
buf
++)

797 
ﬁdbyã
 = 
m≠
->
	`ªad8
(m≠,
ba£
+
off
);

798 
La°
[4];

799 
Cou¡
 = 0;

801 i‡(
ﬁdbyã
 =*
buf
) {

805 i‡(((~
ﬁdbyã
Ë& *
buf
) != 0)

806 
	`¥ötk
("mtd: warn: TryingÅo setá 0Åoá 1\n");

809 
	`Êwrôe
(0xAA,0x555);

810 
	`Êwrôe
(0x55,0x2AA);

811 
	`Êwrôe
(0xA0,0x555);

812 
m≠
->
	`wrôe8
(m≠,*
buf
,
ba£
 + 
off
);

813 
La°
[0] = 
m≠
->
	`ªad8
(m≠,
ba£
 + 
off
);

814 
La°
[1] = 
m≠
->
	`ªad8
(m≠,
ba£
 + 
off
);

815 
La°
[2] = 
m≠
->
	`ªad8
(m≠,
ba£
 + 
off
);

821 
Cou¡
 = 3; 
La°
[(Count - 1) % 4] != Last[(Count - 2) % 4] &&

822 
Cou¡
 < 10000; Count++)

823 
La°
[
Cou¡
 % 4] = 
m≠
->
	`ªad8
(m≠,
ba£
 + 
off
);

824 i‡(
La°
[(
Cou¡
 - 1Ë% 4] !*
buf
)

826 
	`jedec_Êash_Áûed
(
La°
[(
Cou¡
 - 3) % 4]);

827  -
EIO
;

831 *
ªéí
 = 
ßve_Àn
;

833 
	}
}

839 
	$jedec_Êash_chù_sˇn
(
jedec_¥iv©e
 *
¥iv
,
°¨t
,

840 
Àn
)

842 
I
;

845 
I
 = 0; 
¥iv
->
chùs
[I].
jedec
 !0 && I < 
MAX_JEDEC_CHIPS
; I++)

846 
¥iv
->
chùs
[
I
].
°¨t
 =Öriv->chùs[I].
Àngth
 = 0;

849 
I
 = 0; 
¥iv
->
chùs
[I].
jedec
 !0 && I < 
MAX_JEDEC_CHIPS
; I++)

851 
jedec_Êash_chù
 *
chù
 = 
¥iv
->
chùs
 + 
I
;

852 
ByãSèπ
;

853 
ChùEndByã
 = 
chù
->
off£t
 + (chù->
size
 << chù->
addrshi·
);

856 i‡(
°¨t
+
Àn
 < 
chù
->
off£t
 ||

857 
ChùEndByã
 - (1 << 
chù
->
addrshi·
Ë< 
°¨t
)

860 i‡(
°¨t
 < 
chù
->
off£t
)

862 
ByãSèπ
 = 
chù
->
off£t
;

863 
chù
->
°¨t
 = 0;

867 
chù
->
°¨t
 = (°¨à- chù->
off£t
 + (1 << chù->
addrshi·
)-1) >> chip->addrshift;

868 
ByãSèπ
 = 
°¨t
;

871 i‡(
°¨t
 + 
Àn
 >
ChùEndByã
)

872 
chù
->
Àngth
 = (
ChùEndByã
 - 
ByãSèπ
Ë>> chù->
addrshi·
;

874 
chù
->
Àngth
 = (
°¨t
 + 
Àn
 - 
ByãSèπ
 + (1 << chù->
addrshi·
)-1) >> chip->addrshift;

876 
	}
}

878 
__öô
 
	$jedec_öô
()

880 
	`ªgi°î_mtd_chù_drivî
(&
jedec_chùdrv
);

882 
	}
}

884 
__exô
 
	$jedec_exô
()

886 
	`uƒegi°î_mtd_chù_drivî
(&
jedec_chùdrv
);

887 
	}
}

889 
moduÀ_öô
(
jedec_öô
);

890 
moduÀ_exô
(
jedec_exô
);

892 
MODULE_LICENSE
("GPL");

893 
MODULE_AUTHOR
("Jason Gunthorpe <jgg@deltatee.com>Étál.");

894 
MODULE_DESCRIPTION
("Old MTD chip driver for JEDEC-compliant flash chips");

	@jedec_probe.c

9 
	~<löux/c⁄fig.h
>

10 
	~<löux/moduÀ.h
>

11 
	~<löux/ty≥s.h
>

12 
	~<löux/kî√l.h
>

13 
	~<asm/io.h
>

14 
	~<asm/byã‹dî.h
>

15 
	~<löux/î∫o.h
>

16 
	~<löux/¶ab.h
>

17 
	~<löux/öãºu±.h
>

19 
	~<löux/mtd/m≠.h
>

20 
	~<löux/mtd/cfi.h
>

21 
	~<löux/mtd/gí_¥obe.h
>

24 
	#MANUFACTURER_AMD
 0x0001

	)

25 
	#MANUFACTURER_ATMEL
 0x001f

	)

26 
	#MANUFACTURER_FUJITSU
 0x0004

	)

27 
	#MANUFACTURER_INTEL
 0x0089

	)

28 
	#MANUFACTURER_MACRONIX
 0x00C2

	)

29 
	#MANUFACTURER_ST
 0x0020

	)

30 
	#MANUFACTURER_SST
 0x00BF

	)

31 
	#MANUFACTURER_TOSHIBA
 0x0098

	)

35 
	#AM29F800BB
 0x2258

	)

36 
	#AM29F800BT
 0x22D6

	)

37 
	#AM29LV800BB
 0x225B

	)

38 
	#AM29LV800BT
 0x22DA

	)

39 
	#AM29LV160DT
 0x22C4

	)

40 
	#AM29LV160DB
 0x2249

	)

41 
	#AM29F017D
 0x003D

	)

42 
	#AM29F016
 0x00AD

	)

43 
	#AM29F080
 0x00D5

	)

44 
	#AM29F040
 0x00A4

	)

45 
	#AM29LV040B
 0x004F

	)

46 
	#AM29F032B
 0x0041

	)

49 
	#AT49BV512
 0x0003

	)

50 
	#AT29LV512
 0x003d

	)

51 
	#AT49BV16X
 0x00C0

	)

52 
	#AT49BV16XT
 0x00C2

	)

53 
	#AT49BV32X
 0x00C8

	)

54 
	#AT49BV32XT
 0x00C9

	)

57 
	#MBM29LV650UE
 0x22D7

	)

58 
	#MBM29LV320TE
 0x22F6

	)

59 
	#MBM29LV320BE
 0x22F9

	)

60 
	#MBM29LV160TE
 0x22C4

	)

61 
	#MBM29LV160BE
 0x2249

	)

62 
	#MBM29LV800BA
 0x225B

	)

63 
	#MBM29LV800TA
 0x22DA

	)

66 
	#I28F004B3T
 0x00d4

	)

67 
	#I28F004B3B
 0x00d5

	)

68 
	#I28F400B3T
 0x8894

	)

69 
	#I28F400B3B
 0x8895

	)

70 
	#I28F008S5
 0x00a6

	)

71 
	#I28F016S5
 0x00a0

	)

72 
	#I28F008SA
 0x00a2

	)

73 
	#I28F008B3T
 0x00d2

	)

74 
	#I28F008B3B
 0x00d3

	)

75 
	#I28F800B3T
 0x8892

	)

76 
	#I28F800B3B
 0x8893

	)

77 
	#I28F016S3
 0x00Ø

	)

78 
	#I28F016B3T
 0x00d0

	)

79 
	#I28F016B3B
 0x00d1

	)

80 
	#I28F160B3T
 0x8890

	)

81 
	#I28F160B3B
 0x8891

	)

82 
	#I28F320B3T
 0x8896

	)

83 
	#I28F320B3B
 0x8897

	)

84 
	#I28F640B3T
 0x8898

	)

85 
	#I28F640B3B
 0x8899

	)

86 
	#I82802AB
 0x00ad

	)

87 
	#I82802AC
 0x00ac

	)

90 
	#MX29LV160T
 0x22C4

	)

91 
	#MX29LV160B
 0x2249

	)

92 
	#MX29F016
 0x00AD

	)

93 
	#MX29F004T
 0x0045

	)

94 
	#MX29F004B
 0x0046

	)

97 
	#M29W800T
 0x00D7

	)

98 
	#M29W160DT
 0x22C4

	)

99 
	#M29W160DB
 0x2249

	)

100 
	#M29W040B
 0x00E3

	)

103 
	#SST29EE512
 0x005d

	)

104 
	#SST29LE512
 0x003d

	)

105 
	#SST39LF800
 0x2781

	)

106 
	#SST39LF160
 0x2782

	)

107 
	#SST39LF512
 0x00D4

	)

108 
	#SST39LF010
 0x00D5

	)

109 
	#SST39LF020
 0x00D6

	)

110 
	#SST39LF040
 0x00D7

	)

111 
	#SST39SF010A
 0x00B5

	)

112 
	#SST39SF020A
 0x00B6

	)

113 
	#SST49LF030A
 0x001C

	)

114 
	#SST49LF040A
 0x0051

	)

115 
	#SST49LF080A
 0x005B

	)

116 
	#SST39VF3201
 0x235B

	)

119 
	#TC58FVT160
 0x00C2

	)

120 
	#TC58FVB160
 0x0043

	)

121 
	#TC58FVT321
 0x009A

	)

122 
	#TC58FVB321
 0x009C

	)

123 
	#TC58FVT641
 0x0093

	)

124 
	#TC58FVB641
 0x0095

	)

127 
	samd_Êash_öfo
 {

128 c⁄° 
__u16
 
	mm‰_id
;

129 c⁄° 
__u16
 
	mdev_id
;

130 c⁄° *
	m«me
;

131 c⁄° 
	mDevSize
;

132 c⁄° 
	mI¡îÁ˚Desc
;

133 c⁄° 
	mNumEø£Regi⁄s
;

134 c⁄° 
	mCmdSë
;

135 c⁄° 
ul⁄g
 
	mªgi⁄s
[4];

138 
	#ERASEINFO
(
size
,
blocks
Ë(size<<8)|(blocks-1)

	)

140 
	#SIZE_64KiB
 16

	)

141 
	#SIZE_128KiB
 17

	)

142 
	#SIZE_256KiB
 18

	)

143 
	#SIZE_512KiB
 19

	)

144 
	#SIZE_1MiB
 20

	)

145 
	#SIZE_2MiB
 21

	)

146 
	#SIZE_4MiB
 22

	)

147 
	#SIZE_8MiB
 23

	)

149 c⁄° 
amd_Êash_öfo
 
	gjedec_èbÀ
[] = {

151 
m‰_id
: 
MANUFACTURER_AMD
,

152 
dev_id
: 
AM29F032B
,

153 
«me
: "AMD AM29F032B",

154 
DevSize
: 
SIZE_4MiB
,

155 
CmdSë
: 
P_ID_AMD_STD
,

156 
NumEø£Regi⁄s
: 1,

157 
ªgi⁄s
: {
ERASEINFO
(0x10000,64)

160 
m‰_id
: 
MANUFACTURER_AMD
,

161 
dev_id
: 
AM29LV160DT
,

162 
«me
: "AMD AM29LV160DT",

163 
DevSize
: 
SIZE_2MiB
,

164 
CmdSë
: 
P_ID_AMD_STD
,

165 
NumEø£Regi⁄s
: 4,

166 
ªgi⁄s
: {
ERASEINFO
(0x10000,31),

167 
ERASEINFO
(0x08000,1),

168 
ERASEINFO
(0x02000,2),

169 
ERASEINFO
(0x04000,1)

172 
m‰_id
: 
MANUFACTURER_AMD
,

173 
dev_id
: 
AM29LV160DB
,

174 
«me
: "AMD AM29LV160DB",

175 
DevSize
: 
SIZE_2MiB
,

176 
CmdSë
: 
P_ID_AMD_STD
,

177 
NumEø£Regi⁄s
: 4,

178 
ªgi⁄s
: {
ERASEINFO
(0x04000,1),

179 
ERASEINFO
(0x02000,2),

180 
ERASEINFO
(0x08000,1),

181 
ERASEINFO
(0x10000,31)

184 
m‰_id
: 
MANUFACTURER_TOSHIBA
,

185 
dev_id
: 
TC58FVT160
,

186 
«me
: "Toshiba TC58FVT160",

187 
DevSize
: 
SIZE_2MiB
,

188 
CmdSë
: 
P_ID_AMD_STD
,

189 
NumEø£Regi⁄s
: 4,

190 
ªgi⁄s
: {
ERASEINFO
(0x10000,31),

191 
ERASEINFO
(0x08000,1),

192 
ERASEINFO
(0x02000,2),

193 
ERASEINFO
(0x04000,1)

196 
m‰_id
: 
MANUFACTURER_TOSHIBA
,

197 
dev_id
: 
TC58FVB160
,

198 
«me
: "Toshiba TC58FVB160",

199 
DevSize
: 
SIZE_2MiB
,

200 
CmdSë
: 
P_ID_AMD_STD
,

201 
NumEø£Regi⁄s
: 4,

202 
ªgi⁄s
: {
ERASEINFO
(0x04000,1),

203 
ERASEINFO
(0x02000,2),

204 
ERASEINFO
(0x08000,1),

205 
ERASEINFO
(0x10000,31)

208 
m‰_id
: 
MANUFACTURER_TOSHIBA
,

209 
dev_id
: 
TC58FVB321
,

210 
«me
: "Toshiba TC58FVB321",

211 
DevSize
: 
SIZE_4MiB
,

212 
CmdSë
: 
P_ID_AMD_STD
,

213 
NumEø£Regi⁄s
: 2,

214 
ªgi⁄s
: {
ERASEINFO
(0x02000,8),

215 
ERASEINFO
(0x10000,63)

218 
m‰_id
: 
MANUFACTURER_TOSHIBA
,

219 
dev_id
: 
TC58FVT321
,

220 
«me
: "Toshiba TC58FVT321",

221 
DevSize
: 
SIZE_4MiB
,

222 
CmdSë
: 
P_ID_AMD_STD
,

223 
NumEø£Regi⁄s
: 2,

224 
ªgi⁄s
: {
ERASEINFO
(0x10000,63),

225 
ERASEINFO
(0x02000,8)

228 
m‰_id
: 
MANUFACTURER_TOSHIBA
,

229 
dev_id
: 
TC58FVB641
,

230 
«me
: "Toshiba TC58FVB641",

231 
DevSize
: 
SIZE_8MiB
,

232 
CmdSë
: 
P_ID_AMD_STD
,

233 
NumEø£Regi⁄s
: 2,

234 
ªgi⁄s
: {
ERASEINFO
(0x02000,8),

235 
ERASEINFO
(0x10000,127)

238 
m‰_id
: 
MANUFACTURER_TOSHIBA
,

239 
dev_id
: 
TC58FVT641
,

240 
«me
: "Toshiba TC58FVT641",

241 
DevSize
: 
SIZE_8MiB
,

242 
CmdSë
: 
P_ID_AMD_STD
,

243 
NumEø£Regi⁄s
: 2,

244 
ªgi⁄s
: {
ERASEINFO
(0x10000,127),

245 
ERASEINFO
(0x02000,8)

248 
m‰_id
: 
MANUFACTURER_FUJITSU
,

249 
dev_id
: 
MBM29LV650UE
,

250 
«me
: "Fujitsu MBM29LV650UE",

251 
DevSize
: 
SIZE_8MiB
,

252 
CmdSë
: 
P_ID_AMD_STD
,

253 
NumEø£Regi⁄s
: 1,

254 
ªgi⁄s
: {
ERASEINFO
(0x10000,128)

257 
m‰_id
: 
MANUFACTURER_FUJITSU
,

258 
dev_id
: 
MBM29LV320TE
,

259 
«me
: "Fujitsu MBM29LV320TE",

260 
DevSize
: 
SIZE_4MiB
,

261 
CmdSë
: 
P_ID_AMD_STD
,

262 
NumEø£Regi⁄s
: 2,

263 
ªgi⁄s
: {
ERASEINFO
(0x10000,63),

264 
ERASEINFO
(0x02000,8)

267 
m‰_id
: 
MANUFACTURER_FUJITSU
,

268 
dev_id
: 
MBM29LV320BE
,

269 
«me
: "Fujitsu MBM29LV320BE",

270 
DevSize
: 
SIZE_4MiB
,

271 
CmdSë
: 
P_ID_AMD_STD
,

272 
NumEø£Regi⁄s
: 2,

273 
ªgi⁄s
: {
ERASEINFO
(0x02000,8),

274 
ERASEINFO
(0x10000,63)

277 
m‰_id
: 
MANUFACTURER_FUJITSU
,

278 
dev_id
: 
MBM29LV160TE
,

279 
«me
: "Fujitsu MBM29LV160TE",

280 
DevSize
: 
SIZE_2MiB
,

281 
CmdSë
: 
P_ID_AMD_STD
,

282 
NumEø£Regi⁄s
: 4,

283 
ªgi⁄s
: {
ERASEINFO
(0x10000,31),

284 
ERASEINFO
(0x08000,1),

285 
ERASEINFO
(0x02000,2),

286 
ERASEINFO
(0x04000,1)

289 
m‰_id
: 
MANUFACTURER_FUJITSU
,

290 
dev_id
: 
MBM29LV160BE
,

291 
«me
: "Fujitsu MBM29LV160BE",

292 
DevSize
: 
SIZE_2MiB
,

293 
CmdSë
: 
P_ID_AMD_STD
,

294 
NumEø£Regi⁄s
: 4,

295 
ªgi⁄s
: {
ERASEINFO
(0x04000,1),

296 
ERASEINFO
(0x02000,2),

297 
ERASEINFO
(0x08000,1),

298 
ERASEINFO
(0x10000,31)

301 
m‰_id
: 
MANUFACTURER_FUJITSU
,

302 
dev_id
: 
MBM29LV800BA
,

303 
«me
: "Fujitsu MBM29LV800BA",

304 
DevSize
: 
SIZE_1MiB
,

305 
CmdSë
: 
P_ID_AMD_STD
,

306 
NumEø£Regi⁄s
: 4,

307 
ªgi⁄s
: {
ERASEINFO
(0x04000,1),

308 
ERASEINFO
(0x02000,2),

309 
ERASEINFO
(0x08000,1),

310 
ERASEINFO
(0x10000,15)

313 
m‰_id
: 
MANUFACTURER_FUJITSU
,

314 
dev_id
: 
MBM29LV800TA
,

315 
«me
: "Fujitsu MBM29LV800TA",

316 
DevSize
: 
SIZE_1MiB
,

317 
CmdSë
: 
P_ID_AMD_STD
,

318 
NumEø£Regi⁄s
: 4,

319 
ªgi⁄s
: {
ERASEINFO
(0x10000,15),

320 
ERASEINFO
(0x08000,1),

321 
ERASEINFO
(0x02000,2),

322 
ERASEINFO
(0x04000,1)

325 
m‰_id
: 
MANUFACTURER_AMD
,

326 
dev_id
: 
AM29LV800BB
,

327 
«me
: "AMD AM29LV800BB",

328 
DevSize
: 
SIZE_1MiB
,

329 
CmdSë
: 
P_ID_AMD_STD
,

330 
NumEø£Regi⁄s
: 4,

331 
ªgi⁄s
: {
ERASEINFO
(0x04000,1),

332 
ERASEINFO
(0x02000,2),

333 
ERASEINFO
(0x08000,1),

334 
ERASEINFO
(0x10000,15),

337 
m‰_id
: 
MANUFACTURER_AMD
,

338 
dev_id
: 
AM29F800BB
,

339 
«me
: "AMD AM29F800BB",

340 
DevSize
: 
SIZE_1MiB
,

341 
CmdSë
: 
P_ID_AMD_STD
,

342 
NumEø£Regi⁄s
: 4,

343 
ªgi⁄s
: {
ERASEINFO
(0x04000,1),

344 
ERASEINFO
(0x02000,2),

345 
ERASEINFO
(0x08000,1),

346 
ERASEINFO
(0x10000,15),

349 
m‰_id
: 
MANUFACTURER_AMD
,

350 
dev_id
: 
AM29LV800BT
,

351 
«me
: "AMD AM29LV800BT",

352 
DevSize
: 
SIZE_1MiB
,

353 
CmdSë
: 
P_ID_AMD_STD
,

354 
NumEø£Regi⁄s
: 4,

355 
ªgi⁄s
: {
ERASEINFO
(0x10000,15),

356 
ERASEINFO
(0x08000,1),

357 
ERASEINFO
(0x02000,2),

358 
ERASEINFO
(0x04000,1)

361 
m‰_id
: 
MANUFACTURER_AMD
,

362 
dev_id
: 
AM29F800BT
,

363 
«me
: "AMD AM29F800BT",

364 
DevSize
: 
SIZE_1MiB
,

365 
CmdSë
: 
P_ID_AMD_STD
,

366 
NumEø£Regi⁄s
: 4,

367 
ªgi⁄s
: {
ERASEINFO
(0x10000,15),

368 
ERASEINFO
(0x08000,1),

369 
ERASEINFO
(0x02000,2),

370 
ERASEINFO
(0x04000,1)

373 
m‰_id
: 
MANUFACTURER_AMD
,

374 
dev_id
: 
AM29LV800BB
,

375 
«me
: "AMD AM29LV800BB",

376 
DevSize
: 
SIZE_1MiB
,

377 
CmdSë
: 
P_ID_AMD_STD
,

378 
NumEø£Regi⁄s
: 4,

379 
ªgi⁄s
: {
ERASEINFO
(0x10000,15),

380 
ERASEINFO
(0x08000,1),

381 
ERASEINFO
(0x02000,2),

382 
ERASEINFO
(0x04000,1)

385 
m‰_id
: 
MANUFACTURER_INTEL
,

386 
dev_id
: 
I28F004B3B
,

387 
«me
: "Intel 28F004B3B",

388 
DevSize
: 
SIZE_512KiB
,

389 
CmdSë
: 
P_ID_INTEL_STD
,

390 
NumEø£Regi⁄s
: 2,

391 
ªgi⁄s
: {

392 
ERASEINFO
(0x02000, 8),

393 
ERASEINFO
(0x10000, 7),

396 
m‰_id
: 
MANUFACTURER_INTEL
,

397 
dev_id
: 
I28F004B3T
,

398 
«me
: "Intel 28F004B3T",

399 
DevSize
: 
SIZE_512KiB
,

400 
CmdSë
: 
P_ID_INTEL_STD
,

401 
NumEø£Regi⁄s
: 2,

402 
ªgi⁄s
: {

403 
ERASEINFO
(0x10000, 7),

404 
ERASEINFO
(0x02000, 8),

407 
m‰_id
: 
MANUFACTURER_INTEL
,

408 
dev_id
: 
I28F400B3B
,

409 
«me
: "Intel 28F400B3B",

410 
DevSize
: 
SIZE_512KiB
,

411 
CmdSë
: 
P_ID_INTEL_STD
,

412 
NumEø£Regi⁄s
: 2,

413 
ªgi⁄s
: {

414 
ERASEINFO
(0x02000, 8),

415 
ERASEINFO
(0x10000, 7),

418 
m‰_id
: 
MANUFACTURER_INTEL
,

419 
dev_id
: 
I28F400B3T
,

420 
«me
: "Intel 28F400B3T",

421 
DevSize
: 
SIZE_512KiB
,

422 
CmdSë
: 
P_ID_INTEL_STD
,

423 
NumEø£Regi⁄s
: 2,

424 
ªgi⁄s
: {

425 
ERASEINFO
(0x10000, 7),

426 
ERASEINFO
(0x02000, 8),

429 
m‰_id
: 
MANUFACTURER_INTEL
,

430 
dev_id
: 
I28F008B3B
,

431 
«me
: "Intel 28F008B3B",

432 
DevSize
: 
SIZE_1MiB
,

433 
CmdSë
: 
P_ID_INTEL_STD
,

434 
NumEø£Regi⁄s
: 2,

435 
ªgi⁄s
: {

436 
ERASEINFO
(0x02000, 8),

437 
ERASEINFO
(0x10000, 15),

440 
m‰_id
: 
MANUFACTURER_INTEL
,

441 
dev_id
: 
I28F008B3T
,

442 
«me
: "Intel 28F008B3T",

443 
DevSize
: 
SIZE_1MiB
,

444 
CmdSë
: 
P_ID_INTEL_STD
,

445 
NumEø£Regi⁄s
: 2,

446 
ªgi⁄s
: {

447 
ERASEINFO
(0x10000, 15),

448 
ERASEINFO
(0x02000, 8),

451 
m‰_id
: 
MANUFACTURER_INTEL
,

452 
dev_id
: 
I28F008S5
,

453 
«me
: "Intel 28F008S5",

454 
DevSize
: 
SIZE_1MiB
,

455 
CmdSë
: 
P_ID_INTEL_EXT
,

456 
NumEø£Regi⁄s
: 1,

457 
ªgi⁄s
: {
ERASEINFO
(0x10000,16),

460 
m‰_id
: 
MANUFACTURER_INTEL
,

461 
dev_id
: 
I28F016S5
,

462 
«me
: "Intel 28F016S5",

463 
DevSize
: 
SIZE_2MiB
,

464 
CmdSë
: 
P_ID_INTEL_EXT
,

465 
NumEø£Regi⁄s
: 1,

466 
ªgi⁄s
: {
ERASEINFO
(0x10000,32),

469 
m‰_id
: 
MANUFACTURER_INTEL
,

470 
dev_id
: 
I28F008SA
,

471 
«me
: "Intel 28F008SA",

472 
DevSize
: 
SIZE_1MiB
,

473 
CmdSë
: 
P_ID_INTEL_STD
,

474 
NumEø£Regi⁄s
: 1,

475 
ªgi⁄s
: {

476 
ERASEINFO
(0x10000, 16),

479 
m‰_id
: 
MANUFACTURER_INTEL
,

480 
dev_id
: 
I28F800B3B
,

481 
«me
: "Intel 28F800B3B",

482 
DevSize
: 
SIZE_1MiB
,

483 
CmdSë
: 
P_ID_INTEL_STD
,

484 
NumEø£Regi⁄s
: 2,

485 
ªgi⁄s
: {

486 
ERASEINFO
(0x02000, 8),

487 
ERASEINFO
(0x10000, 15),

490 
m‰_id
: 
MANUFACTURER_INTEL
,

491 
dev_id
: 
I28F800B3T
,

492 
«me
: "Intel 28F800B3T",

493 
DevSize
: 
SIZE_1MiB
,

494 
CmdSë
: 
P_ID_INTEL_STD
,

495 
NumEø£Regi⁄s
: 2,

496 
ªgi⁄s
: {

497 
ERASEINFO
(0x10000, 15),

498 
ERASEINFO
(0x02000, 8),

501 
m‰_id
: 
MANUFACTURER_INTEL
,

502 
dev_id
: 
I28F016B3B
,

503 
«me
: "Intel 28F016B3B",

504 
DevSize
: 
SIZE_2MiB
,

505 
CmdSë
: 
P_ID_INTEL_STD
,

506 
NumEø£Regi⁄s
: 2,

507 
ªgi⁄s
: {

508 
ERASEINFO
(0x02000, 8),

509 
ERASEINFO
(0x10000, 31),

512 
m‰_id
: 
MANUFACTURER_INTEL
,

513 
dev_id
: 
I28F016S3
,

514 
«me
: "Intel I28F016S3",

515 
DevSize
: 
SIZE_2MiB
,

516 
CmdSë
: 
P_ID_INTEL_STD
,

517 
NumEø£Regi⁄s
: 1,

518 
ªgi⁄s
: {

519 
ERASEINFO
(0x10000, 32),

522 
m‰_id
: 
MANUFACTURER_INTEL
,

523 
dev_id
: 
I28F016B3T
,

524 
«me
: "Intel 28F016B3T",

525 
DevSize
: 
SIZE_2MiB
,

526 
CmdSë
: 
P_ID_INTEL_STD
,

527 
NumEø£Regi⁄s
: 2,

528 
ªgi⁄s
: {

529 
ERASEINFO
(0x10000, 31),

530 
ERASEINFO
(0x02000, 8),

533 
m‰_id
: 
MANUFACTURER_INTEL
,

534 
dev_id
: 
I28F160B3B
,

535 
«me
: "Intel 28F160B3B",

536 
DevSize
: 
SIZE_2MiB
,

537 
CmdSë
: 
P_ID_INTEL_STD
,

538 
NumEø£Regi⁄s
: 2,

539 
ªgi⁄s
: {

540 
ERASEINFO
(0x02000, 8),

541 
ERASEINFO
(0x10000, 31),

544 
m‰_id
: 
MANUFACTURER_INTEL
,

545 
dev_id
: 
I28F160B3T
,

546 
«me
: "Intel 28F160B3T",

547 
DevSize
: 
SIZE_2MiB
,

548 
CmdSë
: 
P_ID_INTEL_STD
,

549 
NumEø£Regi⁄s
: 2,

550 
ªgi⁄s
: {

551 
ERASEINFO
(0x10000, 31),

552 
ERASEINFO
(0x02000, 8),

555 
m‰_id
: 
MANUFACTURER_INTEL
,

556 
dev_id
: 
I28F320B3B
,

557 
«me
: "Intel 28F320B3B",

558 
DevSize
: 
SIZE_4MiB
,

559 
CmdSë
: 
P_ID_INTEL_STD
,

560 
NumEø£Regi⁄s
: 2,

561 
ªgi⁄s
: {

562 
ERASEINFO
(0x02000, 8),

563 
ERASEINFO
(0x10000, 63),

566 
m‰_id
: 
MANUFACTURER_INTEL
,

567 
dev_id
: 
I28F320B3T
,

568 
«me
: "Intel 28F320B3T",

569 
DevSize
: 
SIZE_4MiB
,

570 
CmdSë
: 
P_ID_INTEL_STD
,

571 
NumEø£Regi⁄s
: 2,

572 
ªgi⁄s
: {

573 
ERASEINFO
(0x10000, 63),

574 
ERASEINFO
(0x02000, 8),

577 
m‰_id
: 
MANUFACTURER_INTEL
,

578 
dev_id
: 
I28F640B3B
,

579 
«me
: "Intel 28F640B3B",

580 
DevSize
: 
SIZE_8MiB
,

581 
CmdSë
: 
P_ID_INTEL_STD
,

582 
NumEø£Regi⁄s
: 2,

583 
ªgi⁄s
: {

584 
ERASEINFO
(0x02000, 8),

585 
ERASEINFO
(0x10000, 127),

588 
m‰_id
: 
MANUFACTURER_INTEL
,

589 
dev_id
: 
I28F640B3T
,

590 
«me
: "Intel 28F640B3T",

591 
DevSize
: 
SIZE_8MiB
,

592 
CmdSë
: 
P_ID_INTEL_STD
,

593 
NumEø£Regi⁄s
: 2,

594 
ªgi⁄s
: {

595 
ERASEINFO
(0x10000, 127),

596 
ERASEINFO
(0x02000, 8),

599 
m‰_id
: 
MANUFACTURER_INTEL
,

600 
dev_id
: 
I82802AB
,

601 
«me
: "Intel 82802AB",

602 
DevSize
: 
SIZE_512KiB
,

603 
CmdSë
: 
P_ID_INTEL_EXT
,

604 
NumEø£Regi⁄s
: 1,

605 
ªgi⁄s
: {
ERASEINFO
(0x10000,8),

608 
m‰_id
: 
MANUFACTURER_INTEL
,

609 
dev_id
: 
I82802AC
,

610 
«me
: "Intel 82802AC",

611 
DevSize
: 
SIZE_1MiB
,

612 
CmdSë
: 
P_ID_INTEL_EXT
,

613 
NumEø£Regi⁄s
: 1,

614 
ªgi⁄s
: {
ERASEINFO
(0x10000,16),

617 
m‰_id
: 
MANUFACTURER_ST
,

618 
dev_id
: 
M29W800T
,

619 
«me
: "ST M29W800T",

620 
DevSize
: 
SIZE_1MiB
,

621 
CmdSë
: 
P_ID_AMD_STD
,

622 
NumEø£Regi⁄s
: 4,

623 
ªgi⁄s
: {
ERASEINFO
(0x10000,15),

624 
ERASEINFO
(0x08000,1),

625 
ERASEINFO
(0x02000,2),

626 
ERASEINFO
(0x04000,1)

629 
m‰_id
: 
MANUFACTURER_ST
,

630 
dev_id
: 
M29W160DT
,

631 
«me
: "ST M29W160DT",

632 
DevSize
: 
SIZE_2MiB
,

633 
CmdSë
: 
P_ID_AMD_STD
,

634 
NumEø£Regi⁄s
: 4,

635 
ªgi⁄s
: {
ERASEINFO
(0x10000,31),

636 
ERASEINFO
(0x08000,1),

637 
ERASEINFO
(0x02000,2),

638 
ERASEINFO
(0x04000,1)

641 
m‰_id
: 
MANUFACTURER_ST
,

642 
dev_id
: 
M29W160DB
,

643 
«me
: "ST M29W160DB",

644 
DevSize
: 
SIZE_2MiB
,

645 
CmdSë
: 
P_ID_AMD_STD
,

646 
NumEø£Regi⁄s
: 4,

647 
ªgi⁄s
: {
ERASEINFO
(0x04000,1),

648 
ERASEINFO
(0x02000,2),

649 
ERASEINFO
(0x08000,1),

650 
ERASEINFO
(0x10000,31)

653 
m‰_id
: 
MANUFACTURER_ATMEL
,

654 
dev_id
: 
AT49BV512
,

655 
«me
: "Atmel AT49BV512",

656 
DevSize
: 
SIZE_64KiB
,

657 
CmdSë
: 
P_ID_AMD_STD
,

658 
NumEø£Regi⁄s
: 1,

659 
ªgi⁄s
: {
ERASEINFO
(0x10000,1)

662 
m‰_id
: 
MANUFACTURER_ATMEL
,

663 
dev_id
: 
AT29LV512
,

664 
«me
: "Atmel AT29LV512",

665 
DevSize
: 
SIZE_64KiB
,

666 
CmdSë
: 
P_ID_AMD_STD
,

667 
NumEø£Regi⁄s
: 1,

668 
ªgi⁄s
: {

669 
ERASEINFO
(0x80,256),

670 
ERASEINFO
(0x80,256)

673 
m‰_id
: 
MANUFACTURER_ATMEL
,

674 
dev_id
: 
AT49BV16X
,

675 
«me
: "Atmel AT49BV16X",

676 
DevSize
: 
SIZE_2MiB
,

677 
CmdSë
: 
P_ID_AMD_STD
,

678 
NumEø£Regi⁄s
: 2,

679 
ªgi⁄s
: {
ERASEINFO
(0x02000,8),

680 
ERASEINFO
(0x10000,31)

683 
m‰_id
: 
MANUFACTURER_ATMEL
,

684 
dev_id
: 
AT49BV16XT
,

685 
«me
: "Atmel AT49BV16XT",

686 
DevSize
: 
SIZE_2MiB
,

687 
CmdSë
: 
P_ID_AMD_STD
,

688 
NumEø£Regi⁄s
: 2,

689 
ªgi⁄s
: {
ERASEINFO
(0x10000,31),

690 
ERASEINFO
(0x02000,8)

693 
m‰_id
: 
MANUFACTURER_ATMEL
,

694 
dev_id
: 
AT49BV32X
,

695 
«me
: "Atmel AT49BV32X",

696 
DevSize
: 
SIZE_4MiB
,

697 
CmdSë
: 
P_ID_AMD_STD
,

698 
NumEø£Regi⁄s
: 2,

699 
ªgi⁄s
: {
ERASEINFO
(0x02000,8),

700 
ERASEINFO
(0x10000,63)

703 
m‰_id
: 
MANUFACTURER_ATMEL
,

704 
dev_id
: 
AT49BV32XT
,

705 
«me
: "Atmel AT49BV32XT",

706 
DevSize
: 
SIZE_4MiB
,

707 
CmdSë
: 
P_ID_AMD_STD
,

708 
NumEø£Regi⁄s
: 2,

709 
ªgi⁄s
: {
ERASEINFO
(0x10000,63),

710 
ERASEINFO
(0x02000,8)

713 
m‰_id
: 
MANUFACTURER_AMD
,

714 
dev_id
: 
AM29F017D
,

715 
«me
: "AMD AM29F017D",

716 
DevSize
: 
SIZE_2MiB
,

717 
CmdSë
: 
P_ID_AMD_STD
,

718 
NumEø£Regi⁄s
: 1,

719 
ªgi⁄s
: {
ERASEINFO
(0x10000,32),

722 
m‰_id
: 
MANUFACTURER_AMD
,

723 
dev_id
: 
AM29F016
,

724 
«me
: "AMD AM29F016",

725 
DevSize
: 
SIZE_2MiB
,

726 
CmdSë
: 
P_ID_AMD_STD
,

727 
NumEø£Regi⁄s
: 1,

728 
ªgi⁄s
: {
ERASEINFO
(0x10000,32),

731 
m‰_id
: 
MANUFACTURER_AMD
,

732 
dev_id
: 
AM29F080
,

733 
«me
: "AMD AM29F080",

734 
DevSize
: 
SIZE_1MiB
,

735 
CmdSë
: 
P_ID_AMD_STD
,

736 
NumEø£Regi⁄s
: 1,

737 
ªgi⁄s
: {
ERASEINFO
(0x10000,16),

740 
m‰_id
: 
MANUFACTURER_AMD
,

741 
dev_id
: 
AM29F040
,

742 
«me
: "AMD AM29F040",

743 
DevSize
: 
SIZE_512KiB
,

744 
CmdSë
: 
P_ID_AMD_STD
,

745 
NumEø£Regi⁄s
: 1,

746 
ªgi⁄s
: {
ERASEINFO
(0x10000,8),

749 
m‰_id
: 
MANUFACTURER_AMD
,

750 
dev_id
: 
AM29LV040B
,

751 
«me
: "AMD AM29LV040B",

752 
DevSize
: 
SIZE_512KiB
,

753 
CmdSë
: 
P_ID_AMD_STD
,

754 
NumEø£Regi⁄s
: 1,

755 
ªgi⁄s
: {
ERASEINFO
(0x10000,8),

758 
m‰_id
: 
MANUFACTURER_ST
,

759 
dev_id
: 
M29W040B
,

760 
«me
: "ST M29W040B",

761 
DevSize
: 
SIZE_512KiB
,

762 
CmdSë
: 
P_ID_AMD_STD
,

763 
NumEø£Regi⁄s
: 1,

764 
ªgi⁄s
: {
ERASEINFO
(0x10000,8),

767 
m‰_id
: 
MANUFACTURER_MACRONIX
,

768 
dev_id
: 
MX29LV160T
,

769 
«me
: "MXIC MX29LV160T",

770 
DevSize
: 
SIZE_2MiB
,

771 
CmdSë
: 
P_ID_AMD_STD
,

772 
NumEø£Regi⁄s
: 4,

773 
ªgi⁄s
: {
ERASEINFO
(0x10000,31),

774 
ERASEINFO
(0x08000,1),

775 
ERASEINFO
(0x02000,2),

776 
ERASEINFO
(0x04000,1)

779 
m‰_id
: 
MANUFACTURER_MACRONIX
,

780 
dev_id
: 
MX29LV160B
,

781 
«me
: "MXIC MX29LV160B",

782 
DevSize
: 
SIZE_2MiB
,

783 
CmdSë
: 
P_ID_AMD_STD
,

784 
NumEø£Regi⁄s
: 4,

785 
ªgi⁄s
: {
ERASEINFO
(0x04000,1),

786 
ERASEINFO
(0x02000,2),

787 
ERASEINFO
(0x08000,1),

788 
ERASEINFO
(0x10000,31)

791 
m‰_id
: 
MANUFACTURER_MACRONIX
,

792 
dev_id
: 
MX29F016
,

793 
«me
: "Macronix MX29F016",

794 
DevSize
: 
SIZE_2MiB
,

795 
CmdSë
: 
P_ID_AMD_STD
,

796 
NumEø£Regi⁄s
: 1,

797 
ªgi⁄s
: {
ERASEINFO
(0x10000,32),

800 
m‰_id
: 
MANUFACTURER_MACRONIX
,

801 
dev_id
: 
MX29F004T
,

802 
«me
: "Macronix MX29F004T",

803 
DevSize
: 
SIZE_512KiB
,

804 
CmdSë
: 
P_ID_AMD_STD
,

805 
NumEø£Regi⁄s
: 4,

806 
ªgi⁄s
: {
ERASEINFO
(0x10000,7),

807 
ERASEINFO
(0x08000,1),

808 
ERASEINFO
(0x02000,2),

809 
ERASEINFO
(0x04000,1),

812 
m‰_id
: 
MANUFACTURER_MACRONIX
,

813 
dev_id
: 
MX29F004B
,

814 
«me
: "Macronix MX29F004B",

815 
DevSize
: 
SIZE_512KiB
,

816 
CmdSë
: 
P_ID_AMD_STD
,

817 
NumEø£Regi⁄s
: 4,

818 
ªgi⁄s
: {
ERASEINFO
(0x04000,1),

819 
ERASEINFO
(0x02000,2),

820 
ERASEINFO
(0x08000,1),

821 
ERASEINFO
(0x10000,7),

824 
m‰_id
: 
MANUFACTURER_SST
,

825 
dev_id
: 
SST39LF512
,

826 
«me
: "SST 39LF512",

827 
DevSize
: 
SIZE_64KiB
,

828 
CmdSë
: 
P_ID_AMD_STD
,

829 
NumEø£Regi⁄s
: 1,

830 
ªgi⁄s
: {
ERASEINFO
(0x01000,16),

833 
m‰_id
: 
MANUFACTURER_SST
,

834 
dev_id
: 
SST39LF010
,

835 
«me
: "SST 39LF010",

836 
DevSize
: 
SIZE_128KiB
,

837 
CmdSë
: 
P_ID_AMD_STD
,

838 
NumEø£Regi⁄s
: 1,

839 
ªgi⁄s
: {
ERASEINFO
(0x01000,32),

842 
m‰_id
: 
MANUFACTURER_SST
,

843 
dev_id
: 
SST39LF020
,

844 
«me
: "SST 39LF020",

845 
DevSize
: 
SIZE_256KiB
,

846 
CmdSë
: 
P_ID_AMD_STD
,

847 
NumEø£Regi⁄s
: 1,

848 
ªgi⁄s
: {
ERASEINFO
(0x01000,64),

851 
m‰_id
: 
MANUFACTURER_SST
,

852 
dev_id
: 
SST39LF040
,

853 
«me
: "SST 39LF040",

854 
DevSize
: 
SIZE_512KiB
,

855 
CmdSë
: 
P_ID_AMD_STD
,

856 
NumEø£Regi⁄s
: 1,

857 
ªgi⁄s
: {
ERASEINFO
(0x01000,128),

860 
m‰_id
: 
MANUFACTURER_SST
,

861 
dev_id
: 
SST39SF010A
,

862 
«me
: "SST 39SF010A",

863 
DevSize
: 
SIZE_128KiB
,

864 
CmdSë
: 
P_ID_AMD_STD
,

865 
NumEø£Regi⁄s
: 1,

866 
ªgi⁄s
: {
ERASEINFO
(0x01000,32),

869 
m‰_id
: 
MANUFACTURER_SST
,

870 
dev_id
: 
SST39SF020A
,

871 
«me
: "SST 39SF020A",

872 
DevSize
: 
SIZE_256KiB
,

873 
CmdSë
: 
P_ID_AMD_STD
,

874 
NumEø£Regi⁄s
: 1,

875 
ªgi⁄s
: {
ERASEINFO
(0x01000,64),

878 
m‰_id
: 
MANUFACTURER_SST
,

879 
dev_id
: 
SST49LF030A
,

880 
«me
: "SST 49LF030A",

881 
DevSize
: 
SIZE_512KiB
,

882 
CmdSë
: 
P_ID_AMD_STD
,

883 
NumEø£Regi⁄s
: 1,

884 
ªgi⁄s
: {
ERASEINFO
(0x01000,96),

887 
m‰_id
: 
MANUFACTURER_SST
,

888 
dev_id
: 
SST49LF040A
,

889 
«me
: "SST 49LF040A",

890 
DevSize
: 
SIZE_512KiB
,

891 
CmdSë
: 
P_ID_AMD_STD
,

892 
NumEø£Regi⁄s
: 1,

893 
ªgi⁄s
: {
ERASEINFO
(0x01000,128),

896 
m‰_id
: 
MANUFACTURER_SST
,

897 
dev_id
: 
SST49LF080A
,

898 
«me
: "SST 49LF080A",

899 
DevSize
: 
SIZE_1MiB
,

900 
CmdSë
: 
P_ID_AMD_STD
,

901 
NumEø£Regi⁄s
: 1,

902 
ªgi⁄s
: {
ERASEINFO
(0x01000,256),

905 
m‰_id
: 
MANUFACTURER_SST
,

906 
dev_id
: 
SST39LF160
,

907 
«me
: "SST 39LF160",

908 
DevSize
: 
SIZE_2MiB
,

909 
CmdSë
: 
P_ID_AMD_STD
,

910 
NumEø£Regi⁄s
: 1,

911 
ªgi⁄s
: {
ERASEINFO
(0x01000,512),

914 
m‰_id
: 
MANUFACTURER_SST
,

915 
dev_id
: 
SST39VF3201
,

916 
«me
: "SST 39VF3201",

917 
DevSize
: 
SIZE_4MiB
,

918 
CmdSë
: 
P_ID_AMD_STD
,

919 
NumEø£Regi⁄s
: 1,

920 
ªgi⁄s
: {
ERASEINFO
(0x01000,1024),

926 
cfi_jedec_£tup
(
cfi_¥iv©e
 *
p_cfi
, 
ödex
);

928 
jedec_¥obe_chù
(
m≠_öfo
 *
m≠
, 
__u32
 
ba£
,

929 
Êchù
 *
chùs
, 
cfi_¥iv©e
 *
cfi
);

931 
mtd_öfo
 *
jedec_¥obe
(
m≠_öfo
 *
m≠
);

933 
ölöe
 
u32
 
	$jedec_ªad_m‰
(
m≠_öfo
 *
m≠
, 
__u32
 
ba£
,

934 
cfi_¥iv©e
 *
cfi
)

936 
u32
 
ªsu…
, 
mask
;

937 
mask
 = (1 << (
cfi
->
devi˚_ty≥
 * 8)) -1;

938 
ªsu…
 = 
	`cfi_ªad
(
m≠
, 
ba£
);

939 
ªsu…
 &
mask
;

940  
ªsu…
;

941 
	}
}

943 
ölöe
 
u32
 
	$jedec_ªad_id
(
m≠_öfo
 *
m≠
, 
__u32
 
ba£
,

944 
cfi_¥iv©e
 *
cfi
)

946 
osf
;

947 
u32
 
ªsu…
, 
mask
;

948 
osf
 = 
cfi
->
öãæóve
 *cfi->
devi˚_ty≥
;

949 
mask
 = (1 << (
cfi
->
devi˚_ty≥
 * 8)) -1;

950 
ªsu…
 = 
	`cfi_ªad
(
m≠
, 
ba£
 + 
osf
);

951 
ªsu…
 &
mask
;

952  
ªsu…
;

953 
	}
}

955 
ölöe
 
	$jedec_ª£t
(
u32
 
ba£
, 
m≠_öfo
 *
m≠
,

956 
cfi_¥iv©e
 *
cfi
)

959 
	`cfi_£nd_gí_cmd
(0xF0, 0, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

965 
	`cfi_£nd_gí_cmd
(0xFF, 0, 
ba£
, 
m≠
, 
cfi
, cfi->
devi˚_ty≥
, 
NULL
);

967 
	}
}

968 
	$cfi_jedec_£tup
(
cfi_¥iv©e
 *
p_cfi
, 
ödex
)

970 
i
,
num_îa£_ªgi⁄s
;

972 
	`¥ötk
("Found: %s\n",
jedec_èbÀ
[
ödex
].
«me
);

974 
num_îa£_ªgi⁄s
 = 
jedec_èbÀ
[
ödex
].
NumEø£Regi⁄s
;

976 
p_cfi
->
cfiq
 = 
	`kmÆloc
((
cfi_idít
Ë+ 
num_îa£_ªgi⁄s
 * 4, 
GFP_KERNEL
);

977 i‡(!
p_cfi
->
cfiq
) {

982 
	`mem£t
(
p_cfi
->
cfiq
,0,(
cfi_idít
));

984 
p_cfi
->
cfiq
->
P_ID
 = 
jedec_èbÀ
[
ödex
].
CmdSë
;

985 
p_cfi
->
cfiq
->
NumEø£Regi⁄s
 = 
jedec_èbÀ
[
ödex
].NumEraseRegions;

986 
p_cfi
->
cfiq
->
DevSize
 = 
jedec_èbÀ
[
ödex
].DevSize;

987 
p_cfi
->
cfi_mode
 = 
CFI_MODE_JEDEC
;

989 
jedec_èbÀ
[
ödex
].
dev_id
) {

990 
SST39VF3201
:

991 
p_cfi
->
cfiq
->
W‹dWrôeTimeoutTyp
 = 3;

995 
i
=0; i<
num_îa£_ªgi⁄s
; i++){

996 
p_cfi
->
cfiq
->
Eø£Regi⁄Info
[
i
] = 
jedec_èbÀ
[
ödex
].
ªgi⁄s
[i];

998 
p_cfi
->
cmd£t_¥iv
 = 0;

1002 
	`jedec_¥obe_chù
(
m≠_öfo
 *
m≠
, 
__u32
 
ba£
,

1003 
Êchù
 *
chùs
, 
cfi_¥iv©e
 *
cfi
)

1005 
i
;

1006 
u∆ock∑ss
 = 0;

1008 i‡(!
cfi
->
numchùs
) {

1009 
cfi
->
devi˚_ty≥
) {

1010 
CFI_DEVICETYPE_X8
:

1011 
cfi
->
addr_u∆ock1
 = 0x555;

1012 
cfi
->
addr_u∆ock2
 = 0x2aa;

1014 
CFI_DEVICETYPE_X16
:

1015 
cfi
->
addr_u∆ock1
 = 0xaaa;

1016 i‡(
m≠
->
buswidth
 =
cfi
->
öãæóve
) {

1018 
cfi
->
addr_u∆ock2
 = 0x555;

1020 
cfi
->
addr_u∆ock2
 = 0x554;

1023 
CFI_DEVICETYPE_X32
:

1024 
cfi
->
addr_u∆ock1
 = 0x1555;

1025 
cfi
->
addr_u∆ock2
 = 0xaaa;

1028 
	`¥ötk
(
KERN_NOTICE
 "Eï. Unknow¿jedec_¥obêdevi˚Åy≥ %d\n", 
cfi
->
devi˚_ty≥
);

1033 
ªåy
:

1035 i‡(
ba£
 >
m≠
->
size
) {

1036 
	`¥ötk
(
KERN_NOTICE


1038 
ba£
, 
m≠
->
size
 -1);

1042 i‡((
ba£
 + 
cfi
->
addr_u∆ock1
Ë>
m≠
->
size
) {

1043 
	`¥ötk
(
KERN_NOTICE


1045 
ba£
, 
cfi
->
addr_u∆ock1
, 
m≠
->
size
 -1);

1049 i‡((
ba£
 + 
cfi
->
addr_u∆ock2
Ë>
m≠
->
size
) {

1050 
	`¥ötk
(
KERN_NOTICE


1052 
ba£
, 
cfi
->
addr_u∆ock2
, 
m≠
->
size
 -1);

1058 
	`jedec_ª£t
(
ba£
, 
m≠
, 
cfi
);

1061 if(
cfi
->
addr_u∆ock1
) {

1062 
	`cfi_£nd_gí_cmd
(0xØ, 
cfi
->
addr_u∆ock1
, 
ba£
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

1063 
	`cfi_£nd_gí_cmd
(0x55, 
cfi
->
addr_u∆ock2
, 
ba£
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

1065 
	`cfi_£nd_gí_cmd
(0x90, 
cfi
->
addr_u∆ock1
, 
ba£
, 
m≠
, cfi, 
CFI_DEVICETYPE_X8
, 
NULL
);

1067 i‡(!
cfi
->
numchùs
) {

1071 
cfi
->
m‰
 = 
	`jedec_ªad_m‰
(
m≠
, 
ba£
, cfi);

1072 
cfi
->
id
 = 
	`jedec_ªad_id
(
m≠
, 
ba£
, cfi);

1073 
	`¥ötk
(
KERN_INFO
 "Search for id:(%02x %02x) interleave(%d)Åype(%d)\n",

1074 
cfi
->
m‰
, cfi->
id
, cfi->
öãæóve
, cfi->
devi˚_ty≥
);

1075 
i
=0; i<(
jedec_èbÀ
)/(jedec_table[0]); i++) {

1076 i‡(
cfi
->
m‰
 =
jedec_èbÀ
[
i
].
m‰_id
 &&

1077 
cfi
->
id
 =
jedec_èbÀ
[
i
].
dev_id
) {

1078 i‡(!
	`cfi_jedec_£tup
(
cfi
, 
i
))

1080 
ok_out
;

1083 
u∆ock∑ss
++) {

1085 
cfi
->
addr_u∆ock1
 |= cfi->addr_unlock1 << 4;

1086 
cfi
->
addr_u∆ock2
 |= cfi->addr_unlock2 << 4;

1087 
ªåy
;

1089 
cfi
->
addr_u∆ock1
 = cfi->
addr_u∆ock2
 = 0;

1090 
ªåy
;

1094 
__u16
 
m‰
;

1095 
__u16
 
id
;

1098 
m‰
 = 
	`jedec_ªad_m‰
(
m≠
, 
ba£
, 
cfi
);

1099 
id
 = 
	`jedec_ªad_id
(
m≠
, 
ba£
, 
cfi
);

1101 i‡((
m‰
 !
cfi
->m‰Ë|| (
id
 != cfi->id)) {

1102 
	`¥ötk
(
KERN_DEBUG
 "%s: Found different chip orÇo chipátáll (mfr 0x%x, id 0x%x)át 0x%x\n",

1103 
m≠
->
«me
, 
m‰
, 
id
, 
ba£
);

1104 
	`jedec_ª£t
(
ba£
, 
m≠
, 
cfi
);

1110 
i
=0; i<
cfi
->
numchùs
; i++) {

1113 i‡(
	`jedec_ªad_m‰
(
m≠
, 
chùs
[
i
].
°¨t
, 
cfi
Ë=cfi->
m‰
 &&

1114 
	`jedec_ªad_id
(
m≠
, 
chùs
[
i
].
°¨t
, 
cfi
Ë=cfi->
id
) {

1117 
	`jedec_ª£t
(
chùs
[
i
].
°¨t
, 
m≠
, 
cfi
);

1120 i‡(
	`jedec_ªad_m‰
(
m≠
, 
ba£
, 
cfi
Ë!cfi->
m‰
 ||

1121 
	`jedec_ªad_id
(
m≠
, 
ba£
, 
cfi
Ë!cfi->
id
) {

1122 
	`¥ötk
(
KERN_DEBUG
 "%s: Foundánáliasát 0x%x forÅhe chipát 0x%lx\n",

1123 
m≠
->
«me
, 
ba£
, 
chùs
[
i
].
°¨t
);

1131 
	`jedec_ª£t
(
ba£
, 
m≠
, 
cfi
);

1132 i‡(
	`jedec_ªad_m‰
(
m≠
, 
ba£
, 
cfi
Ë=cfi->
m‰
 &&

1133 
	`jedec_ªad_id
(
m≠
, 
ba£
, 
cfi
Ë=cfi->
id
) {

1134 
	`¥ötk
(
KERN_DEBUG
 "%s: Foundánáliasát 0x%x forÅhe chipát 0x%lx\n",

1135 
m≠
->
«me
, 
ba£
, 
chùs
[
i
].
°¨t
);

1143 i‡(
cfi
->
numchùs
 =
MAX_CFI_CHIPS
) {

1144 
	`¥ötk
(
KERN_WARNING
"%s: Toÿm™y fœsh chù†dëe˘ed. In¸ó£ MAX_CFI_CHIPS from %d.\n", 
m≠
->
«me
, 
MAX_CFI_CHIPS
);

1148 
chùs
[
cfi
->
numchùs
].
°¨t
 = 
ba£
;

1149 
chùs
[
cfi
->
numchùs
].
°©e
 = 
FL_READY
;

1150 
cfi
->
numchùs
++;

1152 
ok_out
:

1154 
	`jedec_ª£t
(
ba£
, 
m≠
, 
cfi
);

1156 
	`¥ötk
(
KERN_INFO
 "%s: Found %d x%d devicesát 0x%x in %d-bit mode\n",

1157 
m≠
->
«me
, 
cfi
->
öãæóve
, cfi->
devi˚_ty≥
*8, 
ba£
,

1158 
m≠
->
buswidth
*8);

1163 
chù_¥obe
 
jedec_chù_¥obe
 = {

1164 
«me
: "JEDEC",

1165 
¥obe_chù
: 
jedec_¥obe_chù


1168 
mtd_öfo
 *
	`jedec_¥obe
(
m≠_öfo
 *
m≠
)

1174  
	`mtd_do_chù_¥obe
(
m≠
, &
jedec_chù_¥obe
);

1177 
mtd_chù_drivî
 
jedec_chùdrv
 = {

1178 
¥obe
: 
jedec_¥obe
,

1179 
«me
: "jedec_probe",

1180 
moduÀ
: 
THIS_MODULE


1183 
__öô
 
	`jedec_¥obe_öô
()

1185 
	`ªgi°î_mtd_chù_drivî
(&
jedec_chùdrv
);

1189 
__exô
 
	`jedec_¥obe_exô
()

1191 
	`uƒegi°î_mtd_chù_drivî
(&
jedec_chùdrv
);

1194 
	`moduÀ_öô
(
jedec_¥obe_öô
);

1195 
	`moduÀ_exô
(
jedec_¥obe_exô
);

1197 
	`MODULE_LICENSE
("GPL");

1198 
	`MODULE_AUTHOR
("Erwin Authried <eauth@softsys.co.at>Étál.");

1199 
	`MODULE_DESCRIPTION
("Probe code for JEDEC-compliant flash chips");

	@map_absent.c

21 
	~<löux/moduÀ.h
>

22 
	~<löux/ty≥s.h
>

23 
	~<löux/kî√l.h
>

24 
	~<löux/î∫o.h
>

25 
	~<löux/¶ab.h
>

27 
	~<löux/mtd/m≠.h
>

30 
m≠_ab£¡_ªad
 (
mtd_öfo
 *, 
loff_t
, 
size_t
, size_à*, 
u_ch¨
 *);

31 
m≠_ab£¡_wrôe
 (
mtd_öfo
 *, 
loff_t
, 
size_t
, size_à*, c⁄° 
u_ch¨
 *);

32 
m≠_ab£¡_îa£
 (
mtd_öfo
 *, 
îa£_öfo
 *);

33 
m≠_ab£¡_sync
 (
mtd_öfo
 *);

34 
mtd_öfo
 *
m≠_ab£¡_¥obe
(
m≠_öfo
 *
m≠
);

35 
m≠_ab£¡_de°roy
 (
mtd_öfo
 *);

38 
mtd_chù_drivî
 
	gm≠_ab£¡_chùdrv
 = {

39 
¥obe
: 
m≠_ab£¡_¥obe
,

40 
de°roy
: 
m≠_ab£¡_de°roy
,

41 
«me
: "map_absent",

42 
moduÀ
: 
THIS_MODULE


45 
mtd_öfo
 *
	$m≠_ab£¡_¥obe
(
m≠_öfo
 *
m≠
)

47 
mtd_öfo
 *
mtd
;

49 
mtd
 = 
	`kmÆloc
((*mtd), 
GFP_KERNEL
);

50 i‡(!
mtd
) {

51  
NULL
;

54 
	`mem£t
(
mtd
, 0, (*mtd));

56 
m≠
->
Êdrv
 = &
m≠_ab£¡_chùdrv
;

57 
mtd
->
¥iv
 = 
m≠
;

58 
mtd
->
«me
 = 
m≠
->name;

59 
mtd
->
ty≥
 = 
MTD_ABSENT
;

60 
mtd
->
size
 = 
m≠
->size;

61 
mtd
->
îa£
 = 
m≠_ab£¡_îa£
;

62 
mtd
->
ªad
 = 
m≠_ab£¡_ªad
;

63 
mtd
->
wrôe
 = 
m≠_ab£¡_wrôe
;

64 
mtd
->
sync
 = 
m≠_ab£¡_sync
;

65 
mtd
->
Êags
 = 0;

66 
mtd
->
îa£size
 = 
PAGE_SIZE
;

68 
MOD_INC_USE_COUNT
;

69  
mtd
;

70 
	}
}

73 
	$m≠_ab£¡_ªad
(
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
, size_à*
ªéí
, 
u_ch¨
 *
buf
)

75 *
ªéí
 = 0;

76  -
ENODEV
;

77 
	}
}

79 
	$m≠_ab£¡_wrôe
(
mtd_öfo
 *
mtd
, 
loff_t
 
to
, 
size_t
 
Àn
, size_à*
ªéí
, c⁄° 
u_ch¨
 *
buf
)

81 *
ªéí
 = 0;

82  -
ENODEV
;

83 
	}
}

85 
	$m≠_ab£¡_îa£
(
mtd_öfo
 *
mtd
, 
îa£_öfo
 *
ö°r
)

87  -
ENODEV
;

88 
	}
}

90 
	$m≠_ab£¡_sync
(
mtd_öfo
 *
mtd
)

93 
	}
}

95 
	$m≠_ab£¡_de°roy
(
mtd_öfo
 *
mtd
)

98 
	}
}

100 
__öô
 
	$m≠_ab£¡_öô
()

102 
	`ªgi°î_mtd_chù_drivî
(&
m≠_ab£¡_chùdrv
);

104 
	}
}

106 
__exô
 
	$m≠_ab£¡_exô
()

108 
	`uƒegi°î_mtd_chù_drivî
(&
m≠_ab£¡_chùdrv
);

109 
	}
}

111 
moduÀ_öô
(
m≠_ab£¡_öô
);

112 
moduÀ_exô
(
m≠_ab£¡_exô
);

114 
MODULE_LICENSE
("GPL");

115 
MODULE_AUTHOR
("Resilience Corporation - Eric Brower <ebrower@resilience.com>");

116 
MODULE_DESCRIPTION
("Placeholder MTD chip driver for 'absent' chips");

	@map_ram.c

7 
	~<löux/moduÀ.h
>

8 
	~<löux/ty≥s.h
>

9 
	~<löux/kî√l.h
>

10 
	~<asm/io.h
>

11 
	~<asm/byã‹dî.h
>

12 
	~<löux/î∫o.h
>

13 
	~<löux/¶ab.h
>

15 
	~<löux/mtd/m≠.h
>

18 
m≠øm_ªad
 (
mtd_öfo
 *, 
loff_t
, 
size_t
, size_à*, 
u_ch¨
 *);

19 
m≠øm_wrôe
 (
mtd_öfo
 *, 
loff_t
, 
size_t
, size_à*, c⁄° 
u_ch¨
 *);

20 
m≠øm_îa£
 (
mtd_öfo
 *, 
îa£_öfo
 *);

21 
m≠øm_n›
 (
mtd_öfo
 *);

22 
mtd_öfo
 *
m≠_øm_¥obe
(
m≠_öfo
 *
m≠
);

25 
mtd_chù_drivî
 
	gm≠øm_chùdrv
 = {

26 
¥obe
: 
m≠_øm_¥obe
,

27 
«me
: "map_ram",

28 
moduÀ
: 
THIS_MODULE


31 
mtd_öfo
 *
	$m≠_øm_¥obe
(
m≠_öfo
 *
m≠
)

33 
mtd_öfo
 *
mtd
;

37 
m≠
->
	`wrôe8
(map, 0x55, 0);

38 i‡(
m≠
->
	`ªad8
(map, 0) != 0x55)

39  
NULL
;

41 
m≠
->
	`wrôe8
(map, 0xAA, 0);

42 i‡(
m≠
->
	`ªad8
(map, 0) != 0xAA)

43  
NULL
;

46 
m≠
->
	`wrôe8
(m≠, 0x55, m≠->
size
-1);

47 i‡(
m≠
->
	`ªad8
(m≠, m≠->
size
-1) != 0x55)

48  
NULL
;

50 
m≠
->
	`wrôe8
(m≠, 0xAA, m≠->
size
-1);

51 i‡(
m≠
->
	`ªad8
(m≠, m≠->
size
-1) != 0xAA)

52  
NULL
;

56 
mtd
 = 
	`kmÆloc
((*mtd), 
GFP_KERNEL
);

57 i‡(!
mtd
)

58  
NULL
;

60 
	`mem£t
(
mtd
, 0, (*mtd));

62 
m≠
->
Êdrv
 = &
m≠øm_chùdrv
;

63 
mtd
->
¥iv
 = 
m≠
;

64 
mtd
->
«me
 = 
m≠
->name;

65 
mtd
->
ty≥
 = 
MTD_RAM
;

66 
mtd
->
size
 = 
m≠
->size;

67 
mtd
->
îa£
 = 
m≠øm_îa£
;

68 
mtd
->
ªad
 = 
m≠øm_ªad
;

69 
mtd
->
wrôe
 = 
m≠øm_wrôe
;

70 
mtd
->
sync
 = 
m≠øm_n›
;

71 
mtd
->
Êags
 = 
MTD_CAP_RAM
 | 
MTD_VOLATILE
;

73 
mtd
->
îa£size
 = 
PAGE_SIZE
;

74 
mtd
->
size
 & (mtd->
îa£size
 - 1))

75 
mtd
->
îa£size
 >>= 1;

77 
MOD_INC_USE_COUNT
;

78  
mtd
;

79 
	}
}

82 
	$m≠øm_ªad
 (
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
, size_à*
ªéí
, 
u_ch¨
 *
buf
)

84 
m≠_öfo
 *
m≠
 = (m≠_öfÿ*)
mtd
->
¥iv
;

86 
m≠
->
	`c›y_‰om
(m≠, 
buf
, 
‰om
, 
Àn
);

87 *
ªéí
 = 
Àn
;

89 
	}
}

91 
	$m≠øm_wrôe
 (
mtd_öfo
 *
mtd
, 
loff_t
 
to
, 
size_t
 
Àn
, size_à*
ªéí
, c⁄° 
u_ch¨
 *
buf
)

93 
m≠_öfo
 *
m≠
 = (m≠_öfÿ*)
mtd
->
¥iv
;

95 
m≠
->
	`c›y_to
(m≠, 
to
, 
buf
, 
Àn
);

96 *
ªéí
 = 
Àn
;

98 
	}
}

100 
	$m≠øm_îa£
 (
mtd_öfo
 *
mtd
, 
îa£_öfo
 *
ö°r
)

104 
m≠_öfo
 *
m≠
 = (m≠_öfÿ*)
mtd
->
¥iv
;

105 
i
;

107 
i
=0; i<
ö°r
->
Àn
; i++)

108 
m≠
->
	`wrôe8
(m≠, 0xFF, 
ö°r
->
addr
 + 
i
);

110 i‡(
ö°r
->
ˇŒback
)

111 
ö°r
->
	`ˇŒback
(instr);

114 
	}
}

116 
	$m≠øm_n›
(
mtd_öfo
 *
mtd
)

119 
	}
}

121 
__öô
 
	$m≠_øm_öô
()

123 
	`ªgi°î_mtd_chù_drivî
(&
m≠øm_chùdrv
);

125 
	}
}

127 
__exô
 
	$m≠_øm_exô
()

129 
	`uƒegi°î_mtd_chù_drivî
(&
m≠øm_chùdrv
);

130 
	}
}

132 
moduÀ_öô
(
m≠_øm_öô
);

133 
moduÀ_exô
(
m≠_øm_exô
);

135 
MODULE_LICENSE
("GPL");

136 
MODULE_AUTHOR
("David Woodhouse <dwmw2@infradead.org>");

137 
MODULE_DESCRIPTION
("MTD chip driver for RAM chips");

	@map_rom.c

7 
	~<löux/vîsi⁄.h
>

8 
	~<löux/moduÀ.h
>

9 
	~<löux/ty≥s.h
>

10 
	~<löux/kî√l.h
>

11 
	~<asm/io.h
>

12 
	~<asm/byã‹dî.h
>

13 
	~<löux/î∫o.h
>

14 
	~<löux/¶ab.h
>

16 
	~<löux/mtd/m≠.h
>

18 
m≠rom_ªad
 (
mtd_öfo
 *, 
loff_t
, 
size_t
, size_à*, 
u_ch¨
 *);

19 
m≠rom_wrôe
 (
mtd_öfo
 *, 
loff_t
, 
size_t
, size_à*, c⁄° 
u_ch¨
 *);

20 
m≠rom_n›
 (
mtd_öfo
 *);

21 
mtd_öfo
 *
m≠_rom_¥obe
(
m≠_öfo
 *
m≠
);

23 
mtd_chù_drivî
 
	gm≠rom_chùdrv
 = {

24 
¥obe
: 
m≠_rom_¥obe
,

25 
«me
: "map_rom",

26 
moduÀ
: 
THIS_MODULE


29 
mtd_öfo
 *
	$m≠_rom_¥obe
(
m≠_öfo
 *
m≠
)

31 
mtd_öfo
 *
mtd
;

33 
mtd
 = 
	`kmÆloc
((*mtd), 
GFP_KERNEL
);

34 i‡(!
mtd
)

35  
NULL
;

37 
	`mem£t
(
mtd
, 0, (*mtd));

39 
m≠
->
Êdrv
 = &
m≠rom_chùdrv
;

40 
mtd
->
¥iv
 = 
m≠
;

41 
mtd
->
«me
 = 
m≠
->name;

42 
mtd
->
ty≥
 = 
MTD_ROM
;

43 
mtd
->
size
 = 
m≠
->size;

44 
mtd
->
ªad
 = 
m≠rom_ªad
;

45 
mtd
->
wrôe
 = 
m≠rom_wrôe
;

46 
mtd
->
sync
 = 
m≠rom_n›
;

47 
mtd
->
Êags
 = 
MTD_CAP_ROM
;

48 
mtd
->
îa£size
 = 131072;

49 
mtd
->
size
 & (mtd->
îa£size
 - 1))

50 
mtd
->
îa£size
 >>= 1;

52 
MOD_INC_USE_COUNT
;

53  
mtd
;

54 
	}
}

57 
	$m≠rom_ªad
 (
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
, size_à*
ªéí
, 
u_ch¨
 *
buf
)

59 
m≠_öfo
 *
m≠
 = (m≠_öfÿ*)
mtd
->
¥iv
;

61 
m≠
->
	`c›y_‰om
(m≠, 
buf
, 
‰om
, 
Àn
);

62 *
ªéí
 = 
Àn
;

64 
	}
}

66 
	$m≠rom_n›
(
mtd_öfo
 *
mtd
)

69 
	}
}

71 
	$m≠rom_wrôe
 (
mtd_öfo
 *
mtd
, 
loff_t
 
to
, 
size_t
 
Àn
, size_à*
ªéí
, c⁄° 
u_ch¨
 *
buf
)

73 
	`¥ötk
(
KERN_NOTICE
 "maprom_write called\n");

74  -
EIO
;

75 
	}
}

77 
__öô
 
	$m≠_rom_öô
()

79 
	`ªgi°î_mtd_chù_drivî
(&
m≠rom_chùdrv
);

81 
	}
}

83 
__exô
 
	$m≠_rom_exô
()

85 
	`uƒegi°î_mtd_chù_drivî
(&
m≠rom_chùdrv
);

86 
	}
}

88 
moduÀ_öô
(
m≠_rom_öô
);

89 
moduÀ_exô
(
m≠_rom_exô
);

91 
MODULE_LICENSE
("GPL");

92 
MODULE_AUTHOR
("David Woodhouse <dwmw2@infradead.org>");

93 
MODULE_DESCRIPTION
("MTD chip driver for ROM chips");

	@sharp.c

23 
	~<löux/kî√l.h
>

24 
	~<löux/moduÀ.h
>

25 
	~<löux/vîsi⁄.h
>

26 
	~<löux/ty≥s.h
>

27 
	~<löux/sched.h
>

28 
	~<löux/î∫o.h
>

29 
	~<löux/öãºu±.h
>

30 
	~<löux/mtd/m≠.h
>

31 
	~<löux/mtd/cfi.h
>

32 
	~<löux/dñay.h
>

34 
	#CMD_RESET
 0xffffffff

	)

35 
	#CMD_READ_ID
 0x90909090

	)

36 
	#CMD_READ_STATUS
 0x70707070

	)

37 
	#CMD_CLEAR_STATUS
 0x50505050

	)

38 
	#CMD_BLOCK_ERASE_1
 0x20202020

	)

39 
	#CMD_BLOCK_ERASE_2
 0xd0d0d0d0

	)

40 
	#CMD_BYTE_WRITE
 0x40404040

	)

41 
	#CMD_SUSPEND
 0xb0b0b0b0

	)

42 
	#CMD_RESUME
 0xd0d0d0d0

	)

43 
	#CMD_SET_BLOCK_LOCK_1
 0x60606060

	)

44 
	#CMD_SET_BLOCK_LOCK_2
 0x01010101

	)

45 
	#CMD_SET_MASTER_LOCK_1
 0x60606060

	)

46 
	#CMD_SET_MASTER_LOCK_2
 0xf1f1f1f1

	)

47 
	#CMD_CLEAR_BLOCK_LOCKS_1
 0x60606060

	)

48 
	#CMD_CLEAR_BLOCK_LOCKS_2
 0xd0d0d0d0

	)

50 
	#SR_READY
 0x80808080

51 
	#SR_ERASE_SUSPEND
 0x40404040

52 
	#SR_ERROR_ERASE
 0x20202020

53 
	#SR_ERROR_WRITE
 0x10101010

54 
	#SR_VPP
 0x08080808

55 
	#SR_WRITE_SUSPEND
 0x04040404

56 
	#SR_PROTECT
 0x02020202

57 
	#SR_RESERVED
 0x01010101

	)

59 
	#SR_ERRORS
 (
SR_ERROR_ERASE
|
SR_ERROR_WRITE
|
SR_VPP
|
SR_PROTECT
)

	)

63 #unde‡
AUTOUNLOCK


65 
mtd_öfo
 *
sh¨p_¥obe
(
m≠_öfo
 *);

67 
sh¨p_¥obe_m≠
(
m≠_öfo
 *
m≠
,
mtd_öfo
 *
mtd
);

69 
sh¨p_ªad
(
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
,

70 
size_t
 *
ªéí
, 
u_ch¨
 *
buf
);

71 
sh¨p_wrôe
(
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
,

72 
size_t
 *
ªéí
, c⁄° 
u_ch¨
 *
buf
);

73 
sh¨p_îa£
(
mtd_öfo
 *
mtd
, 
îa£_öfo
 *
ö°r
);

74 
sh¨p_sync
(
mtd_öfo
 *
mtd
);

75 
sh¨p_su•íd
(
mtd_öfo
 *
mtd
);

76 
sh¨p_ªsume
(
mtd_öfo
 *
mtd
);

77 
sh¨p_de°roy
(
mtd_öfo
 *
mtd
);

79 
sh¨p_wrôe_⁄ew‹d
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
,

80 
adr
, 
__u32
 
d©um
);

81 
sh¨p_îa£_⁄eblock
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
,

82 
adr
);

83 #ifde‡
AUTOUNLOCK


84 
sh¨p_u∆ock_⁄eblock
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
,

85 
adr
);

89 
	ssh¨p_öfo
{

90 
Êchù
 *
	mchù
;

91 
	mbogus
;

92 
	mchùshi·
;

93 
	mnumchùs
;

94 
Êchù
 
	mchùs
[1];

97 
mtd_öfo
 *
sh¨p_¥obe
(
m≠_öfo
 *
m≠
);

98 
sh¨p_de°roy
(
mtd_öfo
 *
mtd
);

100 
mtd_chù_drivî
 
	gsh¨p_chùdrv
 = {

101 
¥obe
: 
sh¨p_¥obe
,

102 
de°roy
: 
sh¨p_de°roy
,

103 
«me
: "sharp",

104 
moduÀ
: 
THIS_MODULE


108 
mtd_öfo
 *
	$sh¨p_¥obe
(
m≠_öfo
 *
m≠
)

110 
mtd_öfo
 *
mtd
 = 
NULL
;

111 
sh¨p_öfo
 *
sh¨p
 = 
NULL
;

112 
width
;

114 
mtd
 = 
	`kmÆloc
((*mtd), 
GFP_KERNEL
);

115 if(!
mtd
)

116  
NULL
;

118 
sh¨p
 = 
	`kmÆloc
((*sh¨p), 
GFP_KERNEL
);

119 if(!
sh¨p
)

120  
NULL
;

122 
	`mem£t
(
mtd
, 0, (*mtd));

124 
width
 = 
	`sh¨p_¥obe_m≠
(
m≠
,
mtd
);

125 if(!
width
){

126 
	`k‰ì
(
mtd
);

127 
	`k‰ì
(
sh¨p
);

128  
NULL
;

131 
mtd
->
¥iv
 = 
m≠
;

132 
mtd
->
ty≥
 = 
MTD_NORFLASH
;

133 
mtd
->
îa£
 = 
sh¨p_îa£
;

134 
mtd
->
ªad
 = 
sh¨p_ªad
;

135 
mtd
->
wrôe
 = 
sh¨p_wrôe
;

136 
mtd
->
sync
 = 
sh¨p_sync
;

137 
mtd
->
su•íd
 = 
sh¨p_su•íd
;

138 
mtd
->
ªsume
 = 
sh¨p_ªsume
;

139 
mtd
->
Êags
 = 
MTD_CAP_NORFLASH
;

140 
mtd
->
«me
 = 
m≠
->name;

142 
	`mem£t
(
sh¨p
, 0, (*sharp));

143 
sh¨p
->
chùshi·
 = 23;

144 
sh¨p
->
numchùs
 = 1;

145 
sh¨p
->
chùs
[0].
°¨t
 = 0;

146 
sh¨p
->
chùs
[0].
°©e
 = 
FL_READY
;

147 
sh¨p
->
chùs
[0].
muãx
 = &sh¨p->chùs[0].
_•ölock
;

148 
sh¨p
->
chùs
[0].
w‹d_wrôe_time
 = 0;

149 
	`öô_waôqueue_hód
(&
sh¨p
->
chùs
[0].
wq
);

150 
	`•ö_lock_öô
(&
sh¨p
->
chùs
[0].
_•ölock
);

152 
m≠
->
Êdrv
 = &
sh¨p_chùdrv
;

153 
m≠
->
Êdrv_¥iv
 = 
sh¨p
;

155 
MOD_INC_USE_COUNT
;

156  
mtd
;

157 
	}
}

159 
	$sh¨p_¥obe_m≠
(
m≠_öfo
 *
m≠
,
mtd_öfo
 *
mtd
)

161 
tmp
;

162 
ba£
 = 0;

163 
u32
 
ªad0
, 
ªad4
;

164 
width
 = 4;

166 
tmp
 = 
m≠
->
	`ªad32
(m≠, 
ba£
+0);

168 
m≠
->
	`wrôe32
(m≠, 
CMD_READ_ID
, 
ba£
+0);

170 
ªad0
=
m≠
->
	`ªad32
(m≠, 
ba£
+0);

171 
ªad4
=
m≠
->
	`ªad32
(m≠, 
ba£
+4);

172 if(
ªad0
 == 0x89898989){

173 
	`¥ötk
("LooksÜike sharp flash\n");

174 
ªad4
){

179 
mtd
->
îa£size
 = 0x10000 * 
width
;

180 
mtd
->
size
 = 0x200000 * 
width
;

181  
width
;

185 
mtd
->
îa£size
 = 0x10000 * 
width
;

186 
mtd
->
size
 = 0x100000 * 
width
;

187  
width
;

191 
mtd
->
îa£size
 = 0x10000 * 
width
;

192 
mtd
->
size
 = 0x80000 * 
width
;

193  
width
;

196 
	`¥ötk
("Sort-ofÜooksÜike sharp flash, 0x%08x 0x%08x\n",

197 
ªad0
,
ªad4
);

199 }if((
m≠
->
	`ªad32
(m≠, 
ba£
+0Ë=
CMD_READ_ID
)){

201 
	`¥ötk
("LooksÜike RAM\n");

202 
m≠
->
	`wrôe32
(m≠, 
tmp
, 
ba£
+0);

204 
	`¥ötk
("Doesn'tÜookÜike sharp flash, 0x%08x 0x%08x\n",

205 
ªad0
,
ªad4
);

209 
	}
}

212 
	$sh¨p_waô
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
)

214 
__u16
 
°©us
;

215 
timeo
 = 
jiffõs
 + 
HZ
;

216 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

217 
adr
 = 0;

219 
ªåy
:

220 
	`•ö_lock_bh
(
chù
->
muãx
);

222 
chù
->
°©e
){

223 
FL_READY
:

224 
m≠
->
	`wrôe32
(m≠,
CMD_READ_STATUS
,
adr
);

225 
chù
->
°©e
 = 
FL_STATUS
;

226 
FL_STATUS
:

227 
°©us
 = 
m≠
->
	`ªad32
(m≠,
adr
);

230 
	`udñay
(100);

231 if((
°©us
 & 
SR_READY
)!=SR_READY){

233 
	`udñay
(100);

237 
	`¥ötk
("Waiting for chip\n");

239 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

240 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

242 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

244 
	`scheduÀ
();

245 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

247 if(
	`sig«l_≥ndög
(
cuºít
))

248  -
EINTR
;

250 
timeo
 = 
jiffõs
 + 
HZ
;

252 
ªåy
;

255 
m≠
->
	`wrôe32
(m≠,
CMD_RESET
, 
adr
);

257 
chù
->
°©e
 = 
FL_READY
;

260 
	}
}

262 
	$sh¨p_ªÀa£
(
Êchù
 *
chù
)

264 
	`wake_up
(&
chù
->
wq
);

265 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

266 
	}
}

268 
	$sh¨p_ªad
(
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
,

269 
size_t
 *
ªéí
, 
u_ch¨
 *
buf
)

271 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

272 
sh¨p_öfo
 *
sh¨p
 = 
m≠
->
Êdrv_¥iv
;

273 
chùnum
;

274 
ªt
 = 0;

275 
ofs
 = 0;

277 
chùnum
 = (
‰om
 >> 
sh¨p
->
chùshi·
);

278 
ofs
 = 
‰om
 & ((1 << 
sh¨p
->
chùshi·
)-1);

280 *
ªéí
 = 0;

282 
Àn
){

283 
thi¶í
;

285 if(
chùnum
>=
sh¨p
->
numchùs
)

288 
thi¶í
 = 
Àn
;

289 if(
ofs
+
thi¶í
 >(1<<
sh¨p
->
chùshi·
))

290 
thi¶í
 = (1<<
sh¨p
->
chùshi·
Ë- 
ofs
;

292 
ªt
 = 
	`sh¨p_waô
(
m≠
,&
sh¨p
->
chùs
[
chùnum
]);

293 if(
ªt
<0)

296 
m≠
->
	`c›y_‰om
(m≠,
buf
,
ofs
,
thi¶í
);

298 
	`sh¨p_ªÀa£
(&
sh¨p
->
chùs
[
chùnum
]);

300 *
ªéí
 +
thi¶í
;

301 
Àn
 -
thi¶í
;

302 
buf
 +
thi¶í
;

304 
ofs
 = 0;

305 
chùnum
++;

307  
ªt
;

308 
	}
}

310 
	$sh¨p_wrôe
(
mtd_öfo
 *
mtd
, 
loff_t
 
to
, 
size_t
 
Àn
,

311 
size_t
 *
ªéí
, c⁄° 
u_ch¨
 *
buf
)

313 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

314 
sh¨p_öfo
 *
sh¨p
 = 
m≠
->
Êdrv_¥iv
;

315 
ªt
 = 0;

316 
i
,
j
;

317 
chùnum
;

318 
ofs
;

319 uni⁄ { 
u32
 
l
; 
uc
[4]; } 
tbuf
;

321 *
ªéí
 = 0;

323 
Àn
){

324 
tbuf
.
l
 = 0xffffffff;

325 
chùnum
 = 
to
 >> 
sh¨p
->
chùshi·
;

326 
ofs
 = 
to
 & ((1<<
sh¨p
->
chùshi·
)-1);

328 
j
=0;

329 
i
=
ofs
&3;i<4 && 
Àn
;i++){

330 
tbuf
.
uc
[
i
] = *
buf
;

331 
buf
++;

332 
to
++;

333 
Àn
--;

334 
j
++;

336 
	`sh¨p_wrôe_⁄ew‹d
(
m≠
, &
sh¨p
->
chùs
[
chùnum
], 
ofs
&~3, 
tbuf
.
l
);

337 if(
ªt
<0)

338  
ªt
;

339 (*
ªéí
)+=
j
;

343 
	}
}

345 
	$sh¨p_wrôe_⁄ew‹d
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
,

346 
adr
, 
__u32
 
d©um
)

348 
ªt
;

349 
timeo
;

350 
åy
;

351 
i
;

352 
°©us
 = 0;

354 
ªt
 = 
	`sh¨p_waô
(
m≠
,
chù
);

356 
åy
=0;try<10;try++){

357 
m≠
->
	`wrôe32
(m≠,
CMD_BYTE_WRITE
,
adr
);

359 
m≠
->
	`wrôe32
(m≠,
	`˝u_to_À32
(
d©um
),
adr
);

361 
chù
->
°©e
 = 
FL_WRITING
;

363 
timeo
 = 
jiffõs
 + (
HZ
/2);

365 
m≠
->
	`wrôe32
(m≠,
CMD_READ_STATUS
,
adr
);

366 
i
=0;i<100;i++){

367 
°©us
 = 
m≠
->
	`ªad32
(m≠,
adr
);

368 if((
°©us
 & 
SR_READY
)==SR_READY)

371 if(
i
==100){

372 
	`¥ötk
("sharp:Åimed out writing\n");

375 if(!(
°©us
&
SR_ERRORS
))

378 
	`¥ötk
("sh¨p:Éº‹ wrôög byãáàaddr=%08lx sètus=%08x\n",
adr
,
°©us
);

380 
m≠
->
	`wrôe32
(m≠,
CMD_CLEAR_STATUS
,
adr
);

382 
m≠
->
	`wrôe32
(m≠,
CMD_RESET
,
adr
);

383 
chù
->
°©e
 = 
FL_READY
;

385 
	`wake_up
(&
chù
->
wq
);

386 
	`•ö_u∆ock_bh
(
chù
->
muãx
);

389 
	}
}

391 
	$sh¨p_îa£
(
mtd_öfo
 *
mtd
, 
îa£_öfo
 *
ö°r
)

393 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

394 
sh¨p_öfo
 *
sh¨p
 = 
m≠
->
Êdrv_¥iv
;

395 
adr
,
Àn
;

396 
chùnum
, 
ªt
=0;

399 if(
ö°r
->
addr
 & (
mtd
->
îa£size
 - 1))

400  -
EINVAL
;

401 if(
ö°r
->
Àn
 & (
mtd
->
îa£size
 - 1))

402  -
EINVAL
;

403 if(
ö°r
->
Àn
 + in°r->
addr
 > 
mtd
->
size
)

404  -
EINVAL
;

406 
chùnum
 = 
ö°r
->
addr
 >> 
sh¨p
->
chùshi·
;

407 
adr
 = 
ö°r
->
addr
 & ((1<<
sh¨p
->
chùshi·
)-1);

408 
Àn
 = 
ö°r
->len;

410 
Àn
){

411 
ªt
 = 
	`sh¨p_îa£_⁄eblock
(
m≠
, &
sh¨p
->
chùs
[
chùnum
], 
adr
);

412 if(
ªt
)Ñet;

414 
adr
 +
mtd
->
îa£size
;

415 
Àn
 -
mtd
->
îa£size
;

416 if(
adr
 >> 
sh¨p
->
chùshi·
){

417 
adr
 = 0;

418 
chùnum
++;

419 if(
chùnum
>=
sh¨p
->
numchùs
)

424 
ö°r
->
°©e
 = 
MTD_ERASE_DONE
;

425 if(
ö°r
->
ˇŒback
)

426 
ö°r
->
	`ˇŒback
(instr);

429 
	}
}

431 
	$sh¨p_do_waô_f‹_ªady
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
,

432 
adr
)

434 
ªt
;

435 
timeo
;

436 
°©us
;

437 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

439 
m≠
->
	`wrôe32
(m≠,
CMD_READ_STATUS
,
adr
);

440 
°©us
 = 
m≠
->
	`ªad32
(m≠,
adr
);

442 
timeo
 = 
jiffõs
 + 
HZ
;

444 
	`time_bef‹e
(
jiffõs
, 
timeo
)){

445 
m≠
->
	`wrôe32
(m≠,
CMD_READ_STATUS
,
adr
);

446 
°©us
 = 
m≠
->
	`ªad32
(m≠,
adr
);

447 if((
°©us
 & 
SR_READY
)==SR_READY){

448 
ªt
 = 0;

449 
out
;

451 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

452 
	`add_waô_queue
(&
chù
->
wq
, &
waô
);

456 
	`scheduÀ_timeout
(1);

457 
	`scheduÀ
();

458 
	`ªmove_waô_queue
(&
chù
->
wq
, &
waô
);

462 i‡(
	`sig«l_≥ndög
(
cuºít
)){

463 
ªt
 = -
EINTR
;

464 
out
;

468 
ªt
 = -
ETIME
;

469 
out
:

470  
ªt
;

471 
	}
}

473 
	$sh¨p_îa£_⁄eblock
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
,

474 
adr
)

476 
ªt
;

478 
°©us
;

483 #ifde‡
AUTOUNLOCK


485 
	`sh¨p_u∆ock_⁄eblock
(
m≠
,
chù
,
adr
);

488 
m≠
->
	`wrôe32
(m≠,
CMD_BLOCK_ERASE_1
,
adr
);

489 
m≠
->
	`wrôe32
(m≠,
CMD_BLOCK_ERASE_2
,
adr
);

491 
chù
->
°©e
 = 
FL_ERASING
;

493 
ªt
 = 
	`sh¨p_do_waô_f‹_ªady
(
m≠
,
chù
,
adr
);

494 if(
ªt
<0)Ñet;

496 
m≠
->
	`wrôe32
(m≠,
CMD_READ_STATUS
,
adr
);

497 
°©us
 = 
m≠
->
	`ªad32
(m≠,
adr
);

499 if(!(
°©us
&
SR_ERRORS
)){

500 
m≠
->
	`wrôe32
(m≠,
CMD_RESET
,
adr
);

501 
chù
->
°©e
 = 
FL_READY
;

506 
	`¥ötk
("sh¨p:Éº‹Éøsög blockáàaddr=%08lx sètus=%08x\n",
adr
,
°©us
);

507 
m≠
->
	`wrôe32
(m≠,
CMD_CLEAR_STATUS
,
adr
);

511  -
EIO
;

512 
	}
}

514 #ifde‡
AUTOUNLOCK


515 
	$sh¨p_u∆ock_⁄eblock
(
m≠_öfo
 *
m≠
, 
Êchù
 *
chù
,

516 
adr
)

518 
i
;

519 
°©us
;

521 
m≠
->
	`wrôe32
(m≠,
CMD_CLEAR_BLOCK_LOCKS_1
,
adr
);

522 
m≠
->
	`wrôe32
(m≠,
CMD_CLEAR_BLOCK_LOCKS_2
,
adr
);

524 
	`udñay
(100);

526 
°©us
 = 
m≠
->
	`ªad32
(m≠,
adr
);

527 
	`¥ötk
("°©us=%08x\n",
°©us
);

529 
i
=0;i<1000;i++){

531 
°©us
 = 
m≠
->
	`ªad32
(m≠,
adr
);

532 if((
°©us
 & 
SR_READY
)==SR_READY)

534 
	`udñay
(100);

536 if(
i
==1000){

537 
	`¥ötk
("sharp:Åimed out unlocking block\n");

540 if(!(
°©us
&
SR_ERRORS
)){

541 
m≠
->
	`wrôe32
(m≠,
CMD_RESET
,
adr
);

542 
chù
->
°©e
 = 
FL_READY
;

546 
	`¥ötk
("sh¨p:Éº‹ u∆ockög blockáàaddr=%08lx sètus=%08x\n",
adr
,
°©us
);

547 
m≠
->
	`wrôe32
(m≠,
CMD_CLEAR_STATUS
,
adr
);

548 
	}
}

551 
	$sh¨p_sync
(
mtd_öfo
 *
mtd
)

554 
	}
}

556 
	$sh¨p_su•íd
(
mtd_öfo
 *
mtd
)

558 
	`¥ötk
("sharp_suspend()\n");

559  -
EINVAL
;

560 
	}
}

562 
	$sh¨p_ªsume
(
mtd_öfo
 *
mtd
)

564 
	`¥ötk
("sharp_resume()\n");

566 
	}
}

568 
	$sh¨p_de°roy
(
mtd_öfo
 *
mtd
)

570 
	`¥ötk
("sharp_destroy()\n");

572 
	}
}

574 
__öô
 
	$sh¨p_¥obe_öô
()

576 
	`¥ötk
("MTD Sharp chip driver <ds@lineo.com>\n");

578 
	`ªgi°î_mtd_chù_drivî
(&
sh¨p_chùdrv
);

581 
	}
}

583 
__exô
 
	$sh¨p_¥obe_exô
()

585 
	`uƒegi°î_mtd_chù_drivî
(&
sh¨p_chùdrv
);

586 
	}
}

588 
moduÀ_öô
(
sh¨p_¥obe_öô
);

589 
moduÀ_exô
(
sh¨p_¥obe_exô
);

592 
MODULE_LICENSE
("GPL");

593 
MODULE_AUTHOR
("David Schleef <ds@schleef.org>");

594 
MODULE_DESCRIPTION
("Old MTD chip driver forÖre-CFI Sharp flash chips");

	@/usr/include/asm/byteorder.h

1 #i‚de‡
_I386_BYTEORDER_H


2 
	#_I386_BYTEORDER_H


	)

4 
	~<asm/ty≥s.h
>

6 #ifde‡
__GNUC__


10 
__ölöe__
 
__c⁄°__
 
__u32
 
	$___¨ch__swab32
(
__u32
 
x
)

12 
	`__asm__
("bsw≠ %0" : "Ù" (
x
) : "0" (x));

13  
x
;

14 
	}
}

16 
__ölöe__
 
__c⁄°__
 
__u16
 
	$___¨ch__swab16
(
__u16
 
x
)

18 
	`__asm__
("xchgb %b0,%h0" \

19 : "=q" (
x
) \

20 : "0" (
x
)); \

21  
x
;

22 
	}
}

24 
	#__¨ch__swab32
(
x
Ë
	`___¨ch__swab32
(x)

	)

25 
	#__¨ch__swab16
(
x
Ë
	`___¨ch__swab16
(x)

	)

27 #i‡!
deföed
(
__STRICT_ANSI__
Ë|| deföed(
__KERNEL__
)

28 
	#__BYTEORDER_HAS_U64__


	)

29 
	#__SWAB_64_THRU_32__


	)

34 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/asm/io.h

1 #i‚de‡
_ASM_IO_H


2 
	#_ASM_IO_H


	)

4 
	~<löux/c⁄fig.h
>

39 #ifde‡
SLOW_IO_BY_JUMPING


40 
	#__SLOW_DOWN_IO
 "\njm∞1f\n1:\tjm∞1f\n1:"

	)

42 
	#__SLOW_DOWN_IO
 "\noutb %%Æ,$0x80"

	)

45 #ifde‡
REALLY_SLOW_IO


46 
	#__FULL_SLOW_DOWN_IO
 
__SLOW_DOWN_IO
 __SLOW_DOWN_IO __SLOW_DOWN_IO 
	)
__SLOW_DOWN_IO

48 
	#__FULL_SLOW_DOWN_IO
 
__SLOW_DOWN_IO


	)

54 
	#__OUT1
(
s
,
x
) \

55 
ölöe
 
out
##
	`s
(
x
 
vÆue
, 
p‹t
Ë{

	)

57 
	#__OUT2
(
s
,
s1
,
s2
) \

58 
__asm__
 
	`__vﬁ©ûe__
 ("out" #†" %" 
s1
 "0,%" 
s2
 "1"

	)

60 
	#__OUT
(
s
,
s1
,
x
) \

61 
	`__OUT1
(
s
,
x
Ë
	`__OUT2
(s,
s1
,"w"Ë: : "a" (
vÆue
), "Nd" (
p‹t
)); } \

62 
	`__OUT1
(
s
##
_p
,
x
Ë
	`__OUT2
(s,
s1
,"w"Ë
__FULL_SLOW_DOWN_IO
 : : "a" (
vÆue
), "Nd" (
p‹t
));} \

63 

	)

64 
	#__IN1
(
s
) \

65 
ölöe
 
RETURN_TYPE
 
ö
##
	`s
(
p‹t
Ë{ RETURN_TYPE 
_v
;

	)

67 
	#__IN2
(
s
,
s1
,
s2
) \

68 
__asm__
 
	`__vﬁ©ûe__
 ("ö" #†" %" 
s2
 "1,%" 
s1
 "0"

	)

70 
	#__IN
(
s
,
s1
,
i
...) \

71 
	`__IN1
(
s
Ë
	`__IN2
(s,
s1
,"w"Ë: "˜" (
_v
Ë: "Nd" (
p‹t
Ë,##
i
 );  _v; } \

72 
	`__IN1
(
s
##
_p
Ë
	`__IN2
(s,
s1
,"w"Ë
__FULL_SLOW_DOWN_IO
 : "˜" (
_v
Ë: "Nd" (
p‹t
Ë,##
i
 );  _v; } \

73 

	)

74 
	#__INS
(
s
) \

75 
ölöe
 
ös
##
	`s
(
p‹t
, * 
addr
, 
cou¡
) \

76 { 
__asm__
 
	`__vﬁ©ûe__
 ("rep ; ins" #s \

77 : "=D" (
addr
), "=c" (
cou¡
Ë: "d" (
p‹t
),"0" (addr),"1" (cou¡)); }

	)

79 
	#__OUTS
(
s
) \

80 
ölöe
 
outs
##
	`s
(
p‹t
, c⁄° * 
addr
, 
cou¡
) \

81 { 
__asm__
 
	`__vﬁ©ûe__
 ("rep ; outs" #s \

82 : "=S" (
addr
), "=c" (
cou¡
Ë: "d" (
p‹t
),"0" (addr),"1" (cou¡)); }

	)

84 
	#RETURN_TYPE
 

	)

85 
__IN
(
b
,"")

86 #unde‡
RETURN_TYPE


87 
	#RETURN_TYPE
 

	)

88 
__IN
(
w
,"")

89 #unde‡
RETURN_TYPE


90 
	#RETURN_TYPE
 

	)

91 
__IN
(
l
,"")

92 #unde‡
RETURN_TYPE


94 
__OUT
(
b
,"b",)

95 
__OUT
(
w
,"w",)

96 
	$__OUT
(
l
,,)

98 
	$__INS
(
b
)

99 
	$__INS
(
w
)

100 
	$__INS
(
l
)

102 
	$__OUTS
(
b
)

103 
	$__OUTS
(
w
)

104 
	$__OUTS
(
l
)

106 
	#IO_SPACE_LIMIT
 0xffff

	)

	@/usr/include/linux/config.h

1 #i‚de‡
_LINUX_CONFIG_H


2 
	#_LINUX_CONFIG_H


	)

	@/usr/include/linux/delay.h

1 #i‚de‡
_LINUX_DELAY_H


2 
	#_LINUX_DELAY_H


	)

10 
lo›s_≥r_jiffy
;

12 
	~<löux/sched.h
>

13 
	~<asm/dñay.h
>

25 #i‚de‡
MAX_UDELAY_MS


26 
	#MAX_UDELAY_MS
 5

	)

29 #ifde‡
nŸdef


30 
	#mdñay
(
n
) (\

31 {
m£c
=(
n
); m£c--Ë
	`udñay
(1000);})

	)

33 
	#mdñay
(
n
) (\

34 (
	`__buûtö_c⁄°™t_p
(
n
Ë&& (n)<=
MAX_UDELAY_MS
Ë? 
	`udñay
((n)*1000) : \

35 ({
m£c
=(
n
); m£c--Ë
	`udñay
(1000);}))

	)

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/interrupt.h

2 #i‚de‡
_LINUX_INTERRUPT_H


3 
	#_LINUX_INTERRUPT_H


	)

5 
	~<löux/c⁄fig.h
>

6 
	~<löux/kî√l.h
>

7 
	~<löux/smp.h
>

8 
	~<löux/ˇche.h
>

10 
	~<asm/bô›s.h
>

11 
	~<asm/±ø˚.h
>

13 
	súqa˘i⁄
 {

14 (*
	mh™dÀr
)(, *, 
	m±_ªgs
 *);

15 
	mÊags
;

16 
	mmask
;

17 c⁄° *
	m«me
;

18 *
	mdev_id
;

19 
úqa˘i⁄
 *
	m√xt
;

27 
	mTIMER_BH
 = 0,

28 
	mTQUEUE_BH
,

29 
	mDIGI_BH
,

30 
	mSERIAL_BH
,

31 
	mRISCOM8_BH
,

32 
	mSPECIALIX_BH
,

33 
	mAURORA_BH
,

34 
	mESP_BH
,

35 
	mSCSI_BH
,

36 
	mIMMEDIATE_BH
,

37 
	mCYCLADES_BH
,

38 
	mCM206_BH
,

39 
	mJS_BH
,

40 
	mMACSERIAL_BH
,

41 
	mISICOM_BH


44 
	~<asm/h¨dúq.h
>

45 
	~<asm/so·úq.h
>

57 
	mHI_SOFTIRQ
=0,

58 
	mNET_TX_SOFTIRQ
,

59 
	mNET_RX_SOFTIRQ
,

60 
	mTASKLET_SOFTIRQ


67 
	sso·úq_a˘i⁄


69 (*
	ma˘i⁄
)(
	mso·úq_a˘i⁄
 *);

70 *
	md©a
;

73 
asmlökage
 
do_so·úq
();

74 
›í_so·úq
(
ƒ
, (*
a˘i⁄
)(
so·úq_a˘i⁄
*), *
d©a
);

75 
	`so·úq_öô
();

76 
	#__˝u_øi£_so·úq
(
˝u
, 
ƒ
Ëdÿ{ 
	`so·úq_≥ndög
(˝uË|1UL << (ƒ); 
	}
} 0)

	)

77 
FASTCALL
(
˝u_øi£_so·úq
(
˝u
, 
ƒ
));

78 
FASTCALL
(
øi£_so·úq
(
ƒ
));

102 
	sèskÀt_°ru˘


104 
èskÀt_°ru˘
 *
	m√xt
;

105 
	m°©e
;

106 
©omic_t
 
	mcou¡
;

107 (*
	mfunc
)();

108 
	md©a
;

111 
	#DECLARE_TASKLET
(
«me
, 
func
, 
d©a
) \

112 
èskÀt_°ru˘
 
«me
 = { 
NULL
, 0, 
	`ATOMIC_INIT
(0), 
func
, 
d©a
 }

	)

114 
	#DECLARE_TASKLET_DISABLED
(
«me
, 
func
, 
d©a
) \

115 
èskÀt_°ru˘
 
«me
 = { 
NULL
, 0, 
	`ATOMIC_INIT
(1), 
func
, 
d©a
 }

	)

120 
	mTASKLET_STATE_SCHED
,

121 
	mTASKLET_STATE_RUN


124 
	sèskÀt_hód


126 
èskÀt_°ru˘
 *
	mli°
;

127 } 
__©åibuã__
 ((
__Æig√d__
(
SMP_CACHE_BYTES
)));

129 
èskÀt_hód
 
èskÀt_vec
[
NR_CPUS
];

130 
èskÀt_hód
 
èskÀt_hi_vec
[
NR_CPUS
];

132 #ifde‡
CONFIG_SMP


133 
ölöe
 
	$èskÀt_åylock
(
èskÀt_°ru˘
 *
t
)

135  !
	`ã°_™d_£t_bô
(
TASKLET_STATE_RUN
, &(
t
)->
°©e
);

136 
	}
}

138 
ölöe
 
	$èskÀt_u∆ock
(
èskÀt_°ru˘
 *
t
)

140 
	`smp_mb__bef‹e_˛ór_bô
();

141 
	`˛ór_bô
(
TASKLET_STATE_RUN
, &(
t
)->
°©e
);

142 
	}
}

144 
ölöe
 
	$èskÀt_u∆ock_waô
(
èskÀt_°ru˘
 *
t
)

146 
	`ã°_bô
(
TASKLET_STATE_RUN
, &(
t
)->
°©e
)Ë{ 
	`b¨rõr
(); }

147 
	}
}

149 
	#èskÀt_åylock
(
t
Ë1

	)

150 
	#èskÀt_u∆ock_waô
(
t
Ëdÿ{ } 0)

	)

151 
	#èskÀt_u∆ock
(
t
Ëdÿ{ } 0)

	)

154 
FASTCALL
(
__èskÀt_scheduÀ
(
èskÀt_°ru˘
 *
t
));

156 
ölöe
 
	$èskÀt_scheduÀ
(
èskÀt_°ru˘
 *
t
)

158 i‡(!
	`ã°_™d_£t_bô
(
TASKLET_STATE_SCHED
, &
t
->
°©e
))

159 
	`__èskÀt_scheduÀ
(
t
);

160 
	}
}

162 
FASTCALL
(
__èskÀt_hi_scheduÀ
(
èskÀt_°ru˘
 *
t
));

164 
ölöe
 
	$èskÀt_hi_scheduÀ
(
èskÀt_°ru˘
 *
t
)

166 i‡(!
	`ã°_™d_£t_bô
(
TASKLET_STATE_SCHED
, &
t
->
°©e
))

167 
	`__èskÀt_hi_scheduÀ
(
t
);

168 
	}
}

171 
ölöe
 
	$èskÀt_dißbÀ_nosync
(
èskÀt_°ru˘
 *
t
)

173 
	`©omic_öc
(&
t
->
cou¡
);

174 
	`smp_mb__a·î_©omic_öc
();

175 
	}
}

177 
ölöe
 
	$èskÀt_dißbÀ
(
èskÀt_°ru˘
 *
t
)

179 
	`èskÀt_dißbÀ_nosync
(
t
);

180 
	`èskÀt_u∆ock_waô
(
t
);

181 
	`smp_mb
();

182 
	}
}

184 
ölöe
 
	$èskÀt_íabÀ
(
èskÀt_°ru˘
 *
t
)

186 
	`smp_mb__bef‹e_©omic_dec
();

187 
	`©omic_dec
(&
t
->
cou¡
);

188 
	}
}

190 
ölöe
 
	$èskÀt_hi_íabÀ
(
èskÀt_°ru˘
 *
t
)

192 
	`smp_mb__bef‹e_©omic_dec
();

193 
	`©omic_dec
(&
t
->
cou¡
);

194 
	}
}

196 
èskÀt_kûl
(
èskÀt_°ru˘
 *
t
);

197 
èskÀt_öô
(
èskÀt_°ru˘
 *
t
,

198 (*
func
)(), 
d©a
);

200 #ifde‡
CONFIG_SMP


202 
	#SMP_TIMER_NAME
(
«me
Ë«me##
__thr


	)

204 
	#SMP_TIMER_DEFINE
(
«me
, 
èsk
) \

205 
	`DECLARE_TASKLET
(
èsk
, 
«me
##
__thr
, 0); \

206 
	`«me
 (
dummy
) \

208 
	`èskÀt_scheduÀ
(&(
èsk
)); \

209 
	}

	)
}

213 
	#SMP_TIMER_NAME
(
«me
Ë
	)
name

214 
	#SMP_TIMER_DEFINE
(
«me
, 
èsk
)

	)

221 
èskÀt_°ru˘
 
bh_èsk_vec
[];

224 
•ölock_t
 
globÆ_bh_lock
;

226 
ölöe
 
	$m¨k_bh
(
ƒ
)

228 
	`èskÀt_hi_scheduÀ
(
bh_èsk_vec
+
ƒ
);

229 
	}
}

231 
öô_bh
(
ƒ
, (*
routöe
)());

232 
	`ªmove_bh
(
ƒ
);

262 
	`¥obe_úq_⁄
();

263 
	`¥obe_úq_off
();

264 
	`¥obe_úq_mask
();

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

9 
	#SI_LOAD_SHIFT
 16

	)

10 
	ssysöfo
 {

11 
	mu±ime
;

12 
	mlﬂds
[3];

13 
	mtŸÆøm
;

14 
	m‰ìøm
;

15 
	msh¨edøm
;

16 
	mbuf„ºam
;

17 
	mtŸÆsw≠
;

18 
	m‰ìsw≠
;

19 
	m¥ocs
;

20 
	m∑d
;

21 
	mtŸÆhigh
;

22 
	m‰ìhigh
;

23 
	mmem_unô
;

24 
	m_f
[20-2*()-()];

	@/usr/include/linux/kmod.h

1 #i‚de‡
__LINUX_KMOD_H__


2 
	#__LINUX_KMOD_H__


	)

22 
	~<löux/c⁄fig.h
>

23 
	~<löux/î∫o.h
>

25 #ifde‡
CONFIG_KMOD


26 
ªque°_moduÀ
(c⁄° * 
«me
);

28 
ölöe
 
	$ªque°_moduÀ
(c⁄° * 
«me
Ë{  -
ENOSYS
; 
	}
}

31 
exec_u£rmodehñ≥r
(*
¥ogøm_∑th
, *
¨gv
[], *
ívp
[]);

32 
ˇŒ_u£rmodehñ≥r
(*
∑th
, *
¨gv
[], *
ívp
[]);

34 #ifde‡
CONFIG_HOTPLUG


35 
hŸ∂ug_∑th
 [];

37 
dev_¥obe_lock
();

38 
dev_¥obe_u∆ock
();

	@/usr/include/linux/module.h

7 #i‚de‡
_LINUX_MODULE_H


8 
	#_LINUX_MODULE_H


	)

10 
	~<löux/c⁄fig.h
>

11 
	~<löux/li°.h
>

13 #ifde‡
__GENKSYMS__


14 
	#_£t_vî
(
sym
Ë
	)
sym

15 #unde‡
MODVERSIONS


16 
	#MODVERSIONS


	)

18 #i‡!
deföed
(
MODVERSIONS
Ë&& deföed(
EXPORT_SYMTAB
)

19 
	#_£t_vî
(
sym
Ë
	)
sym

20 
	~<löux/modvîsi⁄s.h
>

26 
	gex˚±i⁄_èbÀ_íåy
;

29 
	skî√l_sym


31 
	mvÆue
;

32 
	m«me
[60];

35 
	smoduÀ_symbﬁ


37 
	mvÆue
;

38 c⁄° *
	m«me
;

41 
	smoduÀ_ªf


43 
moduÀ
 *
	mdï
;

44 
moduÀ
 *
	mªf
;

45 
moduÀ_ªf
 *
	m√xt_ªf
;

49 
	gmoduÀ_≥rsi°
;

51 
	smoduÀ


53 
	msize_of_°ru˘
;

54 
moduÀ
 *
	m√xt
;

55 c⁄° *
	m«me
;

56 
	msize
;

60 
	m∑d
;

61 } 
	muc
;

63 
	mÊags
;

65 
	mnsyms
;

66 
	mndïs
;

68 
moduÀ_symbﬁ
 *
	msyms
;

69 
moduÀ_ªf
 *
	mdïs
;

70 
moduÀ_ªf
 *
	mªfs
;

71 (*
	möô
)();

72 (*
	m˛ónup
)();

73 c⁄° 
ex˚±i⁄_èbÀ_íåy
 *
	mex_èbÀ_°¨t
;

74 c⁄° 
ex˚±i⁄_èbÀ_íåy
 *
	mex_èbÀ_íd
;

75 #ifde‡
__Æpha__


76 
	mgp
;

81 c⁄° 
moduÀ_≥rsi°
 *
	m≥rsi°_°¨t
;

82 c⁄° 
moduÀ_≥rsi°
 *
	m≥rsi°_íd
;

83 (*
	mˇn_u∆ﬂd
)();

84 
	mrunsize
;

85 c⁄° *
	mkÆlsyms_°¨t
;

86 c⁄° *
	mkÆlsyms_íd
;

87 c⁄° *
	m¨chd©a_°¨t
;

88 c⁄° *
	m¨chd©a_íd
;

89 c⁄° *
	mkî√l_d©a
;

92 
	smoduÀ_öfo


94 
	maddr
;

95 
	msize
;

96 
	mÊags
;

97 
	mu£cou¡
;

102 
	#MOD_UNINITIALIZED
 0

	)

103 
	#MOD_RUNNING
 1

	)

104 
	#MOD_DELETED
 2

	)

105 
	#MOD_AUTOCLEAN
 4

	)

106 
	#MOD_VISITED
 8

	)

107 
	#MOD_USED_ONCE
 16

	)

108 
	#MOD_JUST_FREED
 32

	)

109 
	#MOD_INITIALIZING
 64

	)

113 
	#QM_MODULES
 1

	)

114 
	#QM_DEPS
 2

	)

115 
	#QM_REFS
 3

	)

116 
	#QM_SYMBOLS
 4

	)

117 
	#QM_INFO
 5

	)

120 
	#MOD_CAN_QUERY
(
mod
Ë(((mod)->
Êags
 & (
MOD_RUNNING
 | 
MOD_INITIALIZING
)Ë&& !((mod)->Êag†& 
MOD_DELETED
))

	)

126 
	#mod_membî_¥e£¡
(
mod
,
membî
) \

127 (()(&((
moduÀ
 *)0L)->
membî
 + 1) \

128 <(
mod
)->
size_of_°ru˘
)

	)

134 
	#mod_¨chd©a_membî_¥e£¡
(
mod
, 
ty≥
, 
membî
) \

135 ((()(&((
ty≥
 *)0L)->
membî
) + \

136 (((
ty≥
 *)0L)->
membî
)) <= \

137 ((
mod
)->
¨chd©a_íd
 - (mod)->
¨chd©a_°¨t
))

	)

141 
	#mod_bound
(
p
, 
n
, 
m
Ë(()’Ë>(()(mË+ ((m)->
size_of_°ru˘
)) && \

142 ()((
p
)+(
n
)Ë<()(
m
Ë+ (m)->
size
)

	)

146 
	#GET_USE_COUNT
(
moduÀ
Ë(
	`©omic_ªad
(&(moduÀ)->
uc
.
u£cou¡
))

	)

150 
	#__MOD_INC_USE_COUNT
(
mod
) \

151 (
	`©omic_öc
(&(
mod
)->
uc
.
u£cou¡
), (mod)->
Êags
 |
MOD_VISITED
|
MOD_USED_ONCE
)

	)

152 
	#__MOD_DEC_USE_COUNT
(
mod
) \

153 (
	`©omic_dec
(&(
mod
)->
uc
.
u£cou¡
), (mod)->
Êags
 |
MOD_VISITED
)

	)

154 
	#__MOD_IN_USE
(
mod
) \

155 (
	`mod_membî_¥e£¡
((
mod
), 
ˇn_u∆ﬂd
) && (mod)->can_unload \

156 ? (
mod
)->
	`ˇn_u∆ﬂd
(Ë: 
	`©omic_ªad
(&(mod)->
uc
.
u£cou¡
))

	)

160 
	#__MODULE_STRING_1
(
x
Ë#x

	)

161 
	#__MODULE_STRING
(
x
Ë
	`__MODULE_STRING_1
(x)

	)

179 #i‡
deföed
(
MODULE
Ë&& !deföed(
__GENKSYMS__
)

185 
	#MODULE_AUTHOR
(
«me
) \

186 c⁄° 
__moduÀ_auth‹
[] 
	`__©åibuã__
((
	`£˘i⁄
(".modinfo"))) = \

187 "auth‹=" 
«me


	)

189 
	#MODULE_DESCRIPTION
(
desc
) \

190 c⁄° 
__moduÀ_des¸ùti⁄
[] 
	`__©åibuã__
((
	`£˘i⁄
(".modinfo"))) = \

191 "des¸ùti⁄=" 
desc


	)

195 
	#MODULE_SUPPORTED_DEVICE
(
dev
) \

196 c⁄° 
__moduÀ_devi˚
[] 
	`__©åibuã__
((
	`£˘i⁄
(".modinfo"))) = \

197 "devi˚=" 
dev


	)

212 
	#MODULE_PARM
(
v¨
,
ty≥
) \

213 c⁄° 
__moduÀ_∑rm_
##
v¨
[] \

214 
	`__©åibuã__
((
	`£˘i⁄
(".modinfo"))) = \

215 "∑rm_" 
	`__MODULE_STRING
(
v¨
Ë"=" 
ty≥


	)

217 
	#MODULE_PARM_DESC
(
v¨
,
desc
) \

218 c⁄° 
__moduÀ_∑rm_desc_
##
v¨
[] \

219 
	`__©åibuã__
((
	`£˘i⁄
(".modinfo"))) = \

220 "∑rm_desc_" 
	`__MODULE_STRING
(
v¨
Ë"=" 
desc


	)

235 
	#MODULE_GENERIC_TABLE
(
gty≥
,
«me
) \

236 c⁄° 
__moduÀ_
##
gty≥
##
_size
 \

237 
	`__©åibuã__
 ((
unu£d
)Ë(
gty≥
##
_id
); \

238 c⁄° 
gty≥
##
_id
 * 
__moduÀ_
##gty≥##
_èbÀ
 \

239 
	`__©åibuã__
 ((
unu£d
)Ë
«me


	)

240 
	#MODULE_DEVICE_TABLE
(
ty≥
,
«me
) \

241 
	`MODULE_GENERIC_TABLE
(
ty≥
##
_devi˚
,
«me
)

	)

267 
	#MODULE_LICENSE
(
li˚n£
) \

268 c⁄° 
__moduÀ_li˚n£
[] 
	`__©åibuã__
((
	`£˘i⁄
(".modinfo"))) = \

269 "li˚n£=" 
li˚n£


	)

272 
moduÀ
 
__this_moduÀ
;

274 
	#THIS_MODULE
 (&
__this_moduÀ
)

	)

275 
	#MOD_INC_USE_COUNT
 
	`__MOD_INC_USE_COUNT
(
THIS_MODULE
)

	)

276 
	#MOD_DEC_USE_COUNT
 
	`__MOD_DEC_USE_COUNT
(
THIS_MODULE
)

	)

277 
	#MOD_IN_USE
 
	`__MOD_IN_USE
(
THIS_MODULE
)

	)

279 
	~<löux/vîsi⁄.h
>

280 c⁄° 
	g__moduÀ_kî√l_vîsi⁄
[] 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

281 "kî√l_vîsi⁄=" 
UTS_RELEASE
;

282 #ifde‡
MODVERSIONS


283 c⁄° 
	g__moduÀ_usög_checksums
[] 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

289 
	#MODULE_AUTHOR
(
«me
)

	)

290 
	#MODULE_LICENSE
(
li˚n£
)

	)

291 
	#MODULE_DESCRIPTION
(
desc
)

	)

292 
	#MODULE_SUPPORTED_DEVICE
(
«me
)

	)

293 
	#MODULE_PARM
(
v¨
,
ty≥
)

	)

294 
	#MODULE_PARM_DESC
(
v¨
,
desc
)

	)

295 
	#MODULE_GENERIC_TABLE
(
gty≥
,
«me
)

	)

296 
	#MODULE_DEVICE_TABLE
(
ty≥
,
«me
)

	)

298 #i‚de‡
__GENKSYMS__


300 
	#THIS_MODULE
 
NULL


	)

301 
	#MOD_INC_USE_COUNT
 dÿ{ } 0)

	)

302 
	#MOD_DEC_USE_COUNT
 dÿ{ } 0)

	)

303 
	#MOD_IN_USE
 1

	)

305 
moduÀ
 *
moduÀ_li°
;

320 #i‡
deföed
(
__GENKSYMS__
)

324 #ñi‡!
deföed
(
AUTOCONF_INCLUDED
)

326 
	#__EXPORT_SYMBOL
(
sym
,
°r
Ë
îr‹
 
c⁄fig_mu°_be_ö˛uded_bef‹e_moduÀ


	)

327 
	#EXPORT_SYMBOL
(
v¨
Ë
îr‹
 
c⁄fig_mu°_be_ö˛uded_bef‹e_moduÀ


	)

328 
	#EXPORT_SYMBOL_NOVERS
(
v¨
Ë
îr‹
 
c⁄fig_mu°_be_ö˛uded_bef‹e_moduÀ


	)

330 
	#EXPORT_SYMBOL_GPL
(
v¨
Ë
îr‹
 
c⁄fig_mu°_be_ö˛uded_bef‹e_moduÀ


	)

331 #ñi‡!
deföed
(
CONFIG_MODULES
)

333 
	#__EXPORT_SYMBOL
(
sym
,
°r
)

	)

334 
	#EXPORT_SYMBOL
(
v¨
)

	)

335 
	#EXPORT_SYMBOL_NOVERS
(
v¨
)

	)

336 
	#EXPORT_SYMBOL_GPL
(
v¨
)

	)

340 
	#__EXPORT_SYMBOL
(
sym
, 
°r
) \

341 c⁄° 
__k°πab_
##
sym
[] \

342 
	`__©åibuã__
((
	`£˘i⁄
(".k°πab"))Ë
°r
; \

343 c⁄° 
moduÀ_symbﬁ
 
__ksymèb_
##
sym
 \

344 
	`__©åibuã__
((
	`£˘i⁄
("__ksymtab"))) = \

345 { ()&
sym
, 
__k°πab_
##sym }

	)

347 
	#__EXPORT_SYMBOL_GPL
(
sym
, 
°r
) \

348 c⁄° 
__k°πab_
##
sym
[] \

349 
	`__©åibuã__
((
	`£˘i⁄
(".k°πab"))Ë"GPLONLY_" 
°r
; \

350 c⁄° 
moduÀ_symbﬁ
 
__ksymèb_
##
sym
 \

351 
	`__©åibuã__
((
	`£˘i⁄
("__ksymtab"))) = \

352 { ()&
sym
, 
__k°πab_
##sym }

	)

354 #i‡
deföed
(
MODVERSIONS
Ë|| !deföed(
CONFIG_MODVERSIONS
)

355 
	#EXPORT_SYMBOL
(
v¨
Ë
	`__EXPORT_SYMBOL
(v¨, 
	`__MODULE_STRING
(v¨))

	)

356 
	#EXPORT_SYMBOL_GPL
(
v¨
Ë
	`__EXPORT_SYMBOL_GPL
(v¨, 
	`__MODULE_STRING
(v¨))

	)

358 
	#EXPORT_SYMBOL
(
v¨
Ë
	`__EXPORT_SYMBOL
(v¨, 
	`__MODULE_STRING
(
	`__VERSIONED_SYMBOL
(v¨)))

	)

359 
	#EXPORT_SYMBOL_GPL
(
v¨
Ë
	`__EXPORT_SYMBOL_GPL
(v¨, 
	`__MODULE_STRING
(
	`__VERSIONED_SYMBOL
(v¨)))

	)

362 
	#EXPORT_SYMBOL_NOVERS
(
v¨
Ë
	`__EXPORT_SYMBOL
(v¨, 
	`__MODULE_STRING
(v¨))

	)

366 #ifde‡
MODULE


368 
	#EXPORT_NO_SYMBOLS
 
	`__asm__
(".£˘i⁄ __ksymèb\n.¥evious")

	)

370 
	#EXPORT_NO_SYMBOLS


	)

373 #ifde‡
CONFIG_MODULES


374 
	#SET_MODULE_OWNER
(
some_°ru˘
Ëdÿ{ (some_°ru˘)->
ow√r
 = 
THIS_MODULE
; } 0)

	)

376 
	#SET_MODULE_OWNER
(
some_°ru˘
Ëdÿ{ } 0)

	)

	@/usr/include/linux/mtd/cfi.h

7 #i‚de‡
__MTD_CFI_H__


8 
	#__MTD_CFI_H__


	)

10 
	~<löux/c⁄fig.h
>

11 
	~<löux/dñay.h
>

12 
	~<löux/ty≥s.h
>

13 
	~<löux/öãºu±.h
>

14 
	~<löux/mtd/Êashchù.h
>

15 
	~<löux/mtd/cfi_ídün.h
>

26 #i‚de‡
CONFIG_MTD_CFI_GEOMETRY


28 
	#CFIDEV_INTERLEAVE_1
 (1)

	)

29 
	#CFIDEV_INTERLEAVE_2
 (2)

	)

30 
	#CFIDEV_INTERLEAVE_4
 (4)

	)

32 
	#CFIDEV_BUSWIDTH_1
 (1)

	)

33 
	#CFIDEV_BUSWIDTH_2
 (2)

	)

34 
	#CFIDEV_BUSWIDTH_4
 (4)

	)

38 #ifde‡
CONFIG_MTD_CFI_I1


39 
	#CFIDEV_INTERLEAVE_1
 (1)

	)

41 #ifde‡
CONFIG_MTD_CFI_I2


42 
	#CFIDEV_INTERLEAVE_2
 (2)

	)

44 #ifde‡
CONFIG_MTD_CFI_I4


45 
	#CFIDEV_INTERLEAVE_4
 (4)

	)

48 #ifde‡
CONFIG_MTD_CFI_B1


49 
	#CFIDEV_BUSWIDTH_1
 (1)

	)

51 #ifde‡
CONFIG_MTD_CFI_B2


52 
	#CFIDEV_BUSWIDTH_2
 (2)

	)

54 #ifde‡
CONFIG_MTD_CFI_B4


55 
	#CFIDEV_BUSWIDTH_4
 (4)

	)

72 #ifde‡
CFIDEV_INTERLEAVE_1


73 #ifde‡
CFIDEV_INTERLEAVE


74 #unde‡
CFIDEV_INTERLEAVE


75 
	#CFIDEV_INTERLEAVE
 (
cfi
->
öãæóve
)

	)

77 
	#CFIDEV_INTERLEAVE
 
CFIDEV_INTERLEAVE_1


	)

79 
	#cfi_öãæóve_is_1
(Ë(
CFIDEV_INTERLEAVE
 =
CFIDEV_INTERLEAVE_1
)

	)

81 
	#cfi_öãæóve_is_1
(Ë(0)

	)

84 #ifde‡
CFIDEV_INTERLEAVE_2


85 #ifde‡
CFIDEV_INTERLEAVE


86 #unde‡
CFIDEV_INTERLEAVE


87 
	#CFIDEV_INTERLEAVE
 (
cfi
->
öãæóve
)

	)

89 
	#CFIDEV_INTERLEAVE
 
CFIDEV_INTERLEAVE_2


	)

91 
	#cfi_öãæóve_is_2
(Ë(
CFIDEV_INTERLEAVE
 =
CFIDEV_INTERLEAVE_2
)

	)

93 
	#cfi_öãæóve_is_2
(Ë(0)

	)

96 #ifde‡
CFIDEV_INTERLEAVE_4


97 #ifde‡
CFIDEV_INTERLEAVE


98 #unde‡
CFIDEV_INTERLEAVE


99 
	#CFIDEV_INTERLEAVE
 (
cfi
->
öãæóve
)

	)

101 
	#CFIDEV_INTERLEAVE
 
CFIDEV_INTERLEAVE_4


	)

103 
	#cfi_öãæóve_is_4
(Ë(
CFIDEV_INTERLEAVE
 =
CFIDEV_INTERLEAVE_4
)

	)

105 
	#cfi_öãæóve_is_4
(Ë(0)

	)

108 #i‚de‡
CFIDEV_INTERLEAVE


109 #îr‹ 
You
 
mu°
 
deföe
 
©
 
Àa°
 
⁄e
 
öãæóve
 
to
 
suµ‹t
!

112 #ifde‡
CFIDEV_BUSWIDTH_1


113 #ifde‡
CFIDEV_BUSWIDTH


114 #unde‡
CFIDEV_BUSWIDTH


115 
	#CFIDEV_BUSWIDTH
 (
m≠
->
buswidth
)

	)

117 
	#CFIDEV_BUSWIDTH
 
CFIDEV_BUSWIDTH_1


	)

119 
	#cfi_buswidth_is_1
(Ë(
CFIDEV_BUSWIDTH
 =
CFIDEV_BUSWIDTH_1
)

	)

121 
	#cfi_buswidth_is_1
(Ë(0)

	)

124 #ifde‡
CFIDEV_BUSWIDTH_2


125 #ifde‡
CFIDEV_BUSWIDTH


126 #unde‡
CFIDEV_BUSWIDTH


127 
	#CFIDEV_BUSWIDTH
 (
m≠
->
buswidth
)

	)

129 
	#CFIDEV_BUSWIDTH
 
CFIDEV_BUSWIDTH_2


	)

131 
	#cfi_buswidth_is_2
(Ë(
CFIDEV_BUSWIDTH
 =
CFIDEV_BUSWIDTH_2
)

	)

133 
	#cfi_buswidth_is_2
(Ë(0)

	)

136 #ifde‡
CFIDEV_BUSWIDTH_4


137 #ifde‡
CFIDEV_BUSWIDTH


138 #unde‡
CFIDEV_BUSWIDTH


139 
	#CFIDEV_BUSWIDTH
 (
m≠
->
buswidth
)

	)

141 
	#CFIDEV_BUSWIDTH
 
CFIDEV_BUSWIDTH_4


	)

143 
	#cfi_buswidth_is_4
(Ë(
CFIDEV_BUSWIDTH
 =
CFIDEV_BUSWIDTH_4
)

	)

145 
	#cfi_buswidth_is_4
(Ë(0)

	)

148 #i‚de‡
CFIDEV_BUSWIDTH


149 #îr‹ 
You
 
mu°
 
deföe
 
©
 
Àa°
 
⁄e
 
bus
 
width
 
to
 
suµ‹t
!

156 
	#CFI_DEVICETYPE_X8
 (8 / 8)

	)

157 
	#CFI_DEVICETYPE_X16
 (16 / 8)

	)

158 
	#CFI_DEVICETYPE_X32
 (32 / 8)

	)

165 
	scfi_idít
 {

166 
__u8
 
	mqry
[3];

167 
__u16
 
	mP_ID
;

168 
__u16
 
	mP_ADR
;

169 
__u16
 
	mA_ID
;

170 
__u16
 
	mA_ADR
;

171 
__u8
 
	mVccMö
;

172 
__u8
 
	mVccMax
;

173 
__u8
 
	mVµMö
;

174 
__u8
 
	mVµMax
;

175 
__u8
 
	mW‹dWrôeTimeoutTyp
;

176 
__u8
 
	mBufWrôeTimeoutTyp
;

177 
__u8
 
	mBlockEø£TimeoutTyp
;

178 
__u8
 
	mChùEø£TimeoutTyp
;

179 
__u8
 
	mW‹dWrôeTimeoutMax
;

180 
__u8
 
	mBufWrôeTimeoutMax
;

181 
__u8
 
	mBlockEø£TimeoutMax
;

182 
__u8
 
	mChùEø£TimeoutMax
;

183 
__u8
 
	mDevSize
;

184 
__u16
 
	mI¡îÁ˚Desc
;

185 
__u16
 
	mMaxBufWrôeSize
;

186 
__u8
 
	mNumEø£Regi⁄s
;

187 
__u32
 
	mEø£Regi⁄Info
[0];

188 } 
__©åibuã__
((
∑cked
));

192 
	scfi_extquîy
 {

193 
__u8
 
	m¥i
[3];

194 
__u8
 
	mMaj‹Vîsi⁄
;

195 
__u8
 
	mMö‹Vîsi⁄
;

196 } 
__©åibuã__
((
∑cked
));

200 
	scfi_¥i_öãÀxt
 {

201 
__u8
 
	m¥i
[3];

202 
__u8
 
	mMaj‹Vîsi⁄
;

203 
__u8
 
	mMö‹Vîsi⁄
;

204 
__u32
 
	mFótuªSuµ‹t
;

205 
__u8
 
	mSu•ídCmdSuµ‹t
;

206 
__u16
 
	mBlkSètusRegMask
;

207 
__u8
 
	mVccO±imÆ
;

208 
__u8
 
	mVµO±imÆ
;

209 } 
__©åibuã__
((
∑cked
));

211 
	scfi_¥i_quîy
 {

212 
__u8
 
	mNumFõlds
;

213 
__u32
 
	mPrŸFõld
[1];

214 } 
__©åibuã__
((
∑cked
));

216 
	scfi_bri_quîy
 {

217 
__u8
 
	mPageModeRódC≠
;

218 
__u8
 
	mNumFõlds
;

219 
__u32
 
	mC⁄fFõld
[1];

220 } 
__©åibuã__
((
∑cked
));

222 
	#P_ID_NONE
 0

	)

223 
	#P_ID_INTEL_EXT
 1

	)

224 
	#P_ID_AMD_STD
 2

	)

225 
	#P_ID_INTEL_STD
 3

	)

226 
	#P_ID_AMD_EXT
 4

	)

227 
	#P_ID_MITSUBISHI_STD
 256

	)

228 
	#P_ID_MITSUBISHI_EXT
 257

	)

229 
	#P_ID_RESERVED
 65535

	)

232 
	#CFI_MODE_CFI
 0

	)

233 
	#CFI_MODE_JEDEC
 1

	)

235 
	scfi_¥iv©e
 {

236 
__u16
 
	mcmd£t
;

237 *
	mcmd£t_¥iv
;

238 
	möãæóve
;

239 
	mdevi˚_ty≥
;

240 
	mcfi_mode
;

241 
	maddr_u∆ock1
;

242 
	maddr_u∆ock2
;

243 
	mÁ°_¥og
;

244 
	mmtd_öfo
 *(*
	mcmd£t_£tup
)(
	mm≠_öfo
 *);

245 
cfi_idít
 *
	mcfiq
;

247 
__u8
 
	mm‰
, 
	mid
;

248 
	mnumchùs
;

249 
	mchùshi·
;

250 c⁄° *
	mim_«me
;

251 
Êchù
 
	mchùs
[0];

254 
	#MAX_CFI_CHIPS
 8

	)

259 
ölöe
 
__u32
 
	$cfi_buûd_cmd_addr
(
__u32
 
cmd_ofs
, 
öãæóve
, 
ty≥
)

261  (
cmd_ofs
 * 
ty≥
Ë* 
öãæóve
;

262 
	}
}

267 
ölöe
 
__u32
 
	$cfi_buûd_cmd
(
u_ch¨
 
cmd
, 
m≠_öfo
 *
m≠
, 
cfi_¥iv©e
 *
cfi
)

269 
__u32
 
vÆ
 = 0;

271 i‡(
	`cfi_buswidth_is_1
()) {

273 
vÆ
 = 
cmd
;

274 } i‡(
	`cfi_buswidth_is_2
()) {

275 i‡(
	`cfi_öãæóve_is_1
()) {

277 
vÆ
 = 
	`˝u_to_cfi16
(
cmd
);

278 } i‡(
	`cfi_öãæóve_is_2
()) {

280 
vÆ
 = 
	`˝u_to_cfi16
((
cmd
 << 8) | cmd);

282 } i‡(
	`cfi_buswidth_is_4
()) {

283 i‡(
	`cfi_öãæóve_is_1
()) {

285 
vÆ
 = 
	`˝u_to_cfi32
(
cmd
);

286 } i‡(
	`cfi_öãæóve_is_2
()) {

288 
vÆ
 = 
	`˝u_to_cfi32
((
cmd
 << 16) | cmd);

289 } i‡(
	`cfi_öãæóve_is_4
()) {

291 
vÆ
 = (
cmd
 << 16) | cmd;

292 
vÆ
 = 
	`˝u_to_cfi32
((val << 8) | val);

295  
vÆ
;

296 
	}
}

297 
	#CMD
(
x
Ë
	`cfi_buûd_cmd
((x), 
m≠
, 
cfi
)

	)

303 
ölöe
 
__u32
 
	$cfi_ªad
(
m≠_öfo
 *
m≠
, 
__u32
 
addr
)

305 i‡(
	`cfi_buswidth_is_1
()) {

306  
m≠
->
	`ªad8
(m≠, 
addr
);

307 } i‡(
	`cfi_buswidth_is_2
()) {

308  
m≠
->
	`ªad16
(m≠, 
addr
);

309 } i‡(
	`cfi_buswidth_is_4
()) {

310  
m≠
->
	`ªad32
(m≠, 
addr
);

314 
	}
}

320 
ölöe
 
	$cfi_wrôe
(
m≠_öfo
 *
m≠
, 
__u32
 
vÆ
, __u32 
addr
)

322 i‡(
	`cfi_buswidth_is_1
()) {

323 
m≠
->
	`wrôe8
(m≠, 
vÆ
, 
addr
);

324 } i‡(
	`cfi_buswidth_is_2
()) {

325 
m≠
->
	`wrôe16
(m≠, 
vÆ
, 
addr
);

326 } i‡(
	`cfi_buswidth_is_4
()) {

327 
m≠
->
	`wrôe32
(m≠, 
vÆ
, 
addr
);

329 
	}
}

338 
ölöe
 
__u32
 
	$cfi_£nd_gí_cmd
(
u_ch¨
 
cmd
, 
__u32
 
cmd_addr
, __u32 
ba£
,

339 
m≠_öfo
 *
m≠
, 
cfi_¥iv©e
 *
cfi
,

340 
ty≥
, 
__u32
 *
¥ev_vÆ
)

342 
__u32
 
vÆ
;

343 
__u32
 
addr
 = 
ba£
 + 
	`cfi_buûd_cmd_addr
(
cmd_addr
, 
CFIDEV_INTERLEAVE
, 
ty≥
);

345 
vÆ
 = 
	`cfi_buûd_cmd
(
cmd
, 
m≠
, 
cfi
);

347 i‡(
¥ev_vÆ
)

348 *
¥ev_vÆ
 = 
	`cfi_ªad
(
m≠
, 
addr
);

350 
	`cfi_wrôe
(
m≠
, 
vÆ
, 
addr
);

352  
addr
 - 
ba£
;

353 
	}
}

355 
ölöe
 
__u8
 
	$cfi_ªad_quîy
(
m≠_öfo
 *
m≠
, 
__u32
 
addr
)

357 i‡(
	`cfi_buswidth_is_1
()) {

358  
m≠
->
	`ªad8
(m≠, 
addr
);

359 } i‡(
	`cfi_buswidth_is_2
()) {

360  
	`cfi16_to_˝u
(
m≠
->
	`ªad16
(m≠, 
addr
));

361 } i‡(
	`cfi_buswidth_is_4
()) {

362  
	`cfi32_to_˝u
(
m≠
->
	`ªad32
(m≠, 
addr
));

366 
	}
}

368 #i‚de‡
mö


369 
	#mö
(
x
,
y
Ë–(x)<(y)?(x):(yË)

	)

372 
ölöe
 
	$cfi_udñay
(
us
)

374 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,2,0)

375 i‡(
cuºít
->
√ed_ªsched
)

376 
	`scheduÀ
();

379 
	`udñay
(
us
);

380 
	}
}

381 
ölöe
 
	$cfi_•ö_lock
(
•ölock_t
 *
muãx
)

383 
	`•ö_lock_bh
(
muãx
);

384 
	}
}

386 
ölöe
 
	$cfi_•ö_u∆ock
(
•ölock_t
 *
muãx
)

388 
	`•ö_u∆ock_bh
(
muãx
);

389 
	}
}

	@/usr/include/linux/mtd/compatmac.h

17 #i‚de‡
__LINUX_MTD_COMPATMAC_H__


18 
	#__LINUX_MTD_COMPATMAC_H__


	)

20 
	~<löux/com∑tmac.h
>

21 
	~<löux/ty≥s.h
>

22 
	~<löux/moduÀ.h
>

23 #i‚de‡
LINUX_VERSION_CODE


24 
	~<löux/vîsi⁄.h
>

27 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,1,0)

28 
	~<löux/vmÆloc.h
>

31 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,0,0)

36 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,1,18)

37 
	#__USE_OLD_SYMTAB__


	)

38 
	#EXPORT_NO_SYMBOLS
 
	`ªgi°î_symèb
(
NULL
);

	)

39 
	#REGISTER_SYMTAB
(
èb
Ë
	`ªgi°î_symèb
—ab)

	)

41 
	#REGISTER_SYMTAB
(
èb
Ë

	)

44 #ifde‡
__USE_OLD_SYMTAB__


45 
	#__MODULE_STRING
(
s
Ë

	)

46 
	#MODULE_PARM
(
v
,
t
Ë

	)

47 
	#MODULE_PARM_DESC
(
v
,
t
Ë

	)

48 
	#MODULE_AUTHOR
(
n
Ë

	)

49 
	#MODULE_DESCRIPTION
(
d
Ë

	)

50 
	#MODULE_SUPPORTED_DEVICE
(
n
Ë

	)

57 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,1,22)

58 
	~<löux/pﬁl.h
>

60 
	#__USE_OLD_SELECT__


	)

64 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,1,0)

65 
	#l£ek_t
 

	)

66 
	#l£ek_off_t
 

	)

68 
	#l£ek_t
 

	)

69 
	#l£ek_off_t
 
off_t


	)

74 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,1,0Ë|| 
deföed
(
__Æpha__
)

75 
	#cou¡_t
 

	)

76 
	#ªad_wrôe_t
 

	)

78 
	#cou¡_t
 

	)

79 
	#ªad_wrôe_t
 

	)

83 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,1,31)

84 
	#ªÀa£_t
 

	)

85 
	#ªÀa£_ªtu∫
(
x
Ë

	)

87 
	#ªÀa£_t
 

	)

88 
	#ªÀa£_ªtu∫
(
x
Ë (x)

	)

91 #i‡
LINUX_VERSION_CODE
 < 0x20300

92 
	#__exô


	)

94 #i‡
LINUX_VERSION_CODE
 < 0x20200

95 
	#__öô


	)

97 
	~<löux/öô.h
>

100 #i‡
LINUX_VERSION_CODE
 < 0x20300

101 
	#öô_MUTEX
(
x
Ëdÿ{*(xË
MUTEX
;} 0)

	)

102 
	#RQFUNC_ARG
 

	)

103 
	#blkdev_dequeue_ªque°
(
ªq
Ëdÿ{
CURRENT
 =Ñeq->
√xt
;} 0)

	)

105 
	#RQFUNC_ARG
 
ªque°_queue_t
 *
q


	)

108 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,2,0)

109 
	#__MOD_INC_USE_COUNT
(
mod
) \

110 (
	`©omic_öc
(&(
mod
)->
uc
.
u£cou¡
), (mod)->
Êags
 |
MOD_VISITED
|
MOD_USED_ONCE
)

	)

111 
	#__MOD_DEC_USE_COUNT
(
mod
) \

112 (
	`©omic_dec
(&(
mod
)->
uc
.
u£cou¡
), (mod)->
Êags
 |
MOD_VISITED
)

	)

117 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,3,0)

119 
	#DECLARE_WAIT_QUEUE_HEAD
(
x
Ë
waô_queue
 *x = 
NULL


	)

120 
	#öô_waôqueue_hód
 
öô_waôqueue


	)

122 
ölöe
 
	$åy_öc_mod_cou¡
(
moduÀ
 *
mod
)

124 i‡(
mod
)

125 
	`__MOD_INC_USE_COUNT
(
mod
);

127 
	}
}

137 
	~<asm/byã‹dî.h
>

139 #i‚de‡
__c⁄°™t_˝u_to_À16


141 #ifde‡
__BIG_ENDIAN


142 
	#__c⁄°™t_˝u_to_À64
(
x
Ë
	`___swab64
((x))

	)

143 
	#__c⁄°™t_À64_to_˝u
(
x
Ë
	`___swab64
((x))

	)

144 
	#__c⁄°™t_˝u_to_À32
(
x
Ë
	`___swab32
((x))

	)

145 
	#__c⁄°™t_À32_to_˝u
(
x
Ë
	`___swab32
((x))

	)

146 
	#__c⁄°™t_˝u_to_À16
(
x
Ë
	`___swab16
((x))

	)

147 
	#__c⁄°™t_À16_to_˝u
(
x
Ë
	`___swab16
((x))

	)

148 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__u64
)(x))

	)

149 
	#__c⁄°™t_be64_to_˝u
(
x
Ë((
__u64
)(x))

	)

150 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__u32
)(x))

	)

151 
	#__c⁄°™t_be32_to_˝u
(
x
Ë((
__u32
)(x))

	)

152 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__u16
)(x))

	)

153 
	#__c⁄°™t_be16_to_˝u
(
x
Ë((
__u16
)(x))

	)

155 #ifde‡
__LITTLE_ENDIAN


156 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__u64
)(x))

	)

157 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(x))

	)

158 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__u32
)(x))

	)

159 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(x))

	)

160 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__u16
)(x))

	)

161 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(x))

	)

162 
	#__c⁄°™t_˝u_to_be64
(
x
Ë
	`___swab64
((x))

	)

163 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___swab64
((x))

	)

164 
	#__c⁄°™t_˝u_to_be32
(
x
Ë
	`___swab32
((x))

	)

165 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___swab32
((x))

	)

166 
	#__c⁄°™t_˝u_to_be16
(
x
Ë
	`___swab16
((x))

	)

167 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___swab16
((x))

	)

169 #îr‹ 
No
 (
ªcogni£d
Ë
ídü¬ess
 
deföed
 (
u∆ess
 
ô
,
s
 
PDP
)

175 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,3,0)

176 
	#mod_öô_t
 
__öô


	)

177 
	#mod_exô_t
 

	)

179 
	#mod_öô_t
 
__öô


	)

180 
	#mod_exô_t
 
__exô


	)

183 #i‚de‡
THIS_MODULE


184 #ifde‡
MODULE


185 
	#THIS_MODULE
 (&
__this_moduÀ
)

	)

187 
	#THIS_MODULE
 (
NULL
)

	)

191 #i‡
LINUX_VERSION_CODE
 < 0x20300

192 
	~<löux/öãºu±.h
>

193 
	#•ö_lock_bh
(
lock
Ëdÿ{
	`°¨t_bh_©omic
();
	`•ö_lock
÷ock);}0);

	)

194 
	#•ö_u∆ock_bh
(
lock
Ëdÿ{
	`•ö_u∆ock
÷ock);
	`íd_bh_©omic
();}0);

	)

196 
	~<asm/so·úq.h
>

197 
	~<löux/•ölock.h
>

	@/usr/include/linux/mtd/flashchip.h

13 #i‚de‡
__MTD_FLASHCHIP_H__


14 
	#__MTD_FLASHCHIP_H__


	)

20 
	~<löux/sched.h
>

23 
	mFL_READY
,

24 
	mFL_STATUS
,

25 
	mFL_CFI_QUERY
,

26 
	mFL_JEDEC_QUERY
,

27 
	mFL_ERASING
,

28 
	mFL_ERASE_SUSPENDING
,

29 
	mFL_ERASE_SUSPENDED
,

30 
	mFL_WRITING
,

31 
	mFL_WRITING_TO_BUFFER
,

32 
	mFL_WRITE_SUSPENDING
,

33 
	mFL_WRITE_SUSPENDED
,

34 
	mFL_PM_SUSPENDED
,

35 
	mFL_SYNCING
,

36 
	mFL_UNLOADING
,

37 
	mFL_LOCKING
,

38 
	mFL_UNLOCKING
,

39 
	mFL_UNKNOWN


40 } 
	tÊ°©e_t
;

47 
	sÊchù
 {

48 
	m°¨t
;

57 
Ê°©e_t
 
	m°©e
;

58 
Ê°©e_t
 
	mﬁd°©e
;

59 
•ölock_t
 *
	mmuãx
;

60 
•ölock_t
 
	m_•ölock
;

61 
waô_queue_hód_t
 
	mwq
;

63 
	mw‹d_wrôe_time
;

64 
	mbuf„r_wrôe_time
;

65 
	mîa£_time
;

	@/usr/include/linux/mtd/jedec.h

13 #i‚de‡
__LINUX_MTD_JEDEC_H__


14 
	#__LINUX_MTD_JEDEC_H__


	)

16 
	~<löux/ty≥s.h
>

17 
	~<löux/mtd/m≠.h
>

19 
	#MAX_JEDEC_CHIPS
 16

	)

22 
	sJEDECTabÀ


24 
__u16
 
	mjedec
;

25 *
	m«me
;

26 
	msize
;

27 
	m£˘‹size
;

28 
__u32
 
	mˇ∑bûôõs
;

32 
	sjedec_Êash_chù


34 
__u16
 
	mjedec
;

35 
	msize
;

36 
	m£˘‹size
;

40 
	mba£
;

41 
	md©ashi·
;

42 
	maddrshi·
;

43 
	moff£t
;

45 
__u32
 
	mˇ∑bûôõs
;

48 
	m°¨t
;

49 
	mÀngth
;

52 
	sjedec_¥iv©e


54 
	msize
;

61 
	mis_b™ked
;

62 
	mb™k_fûl
[
MAX_JEDEC_CHIPS
];

64 
jedec_Êash_chù
 
	mchùs
[
MAX_JEDEC_CHIPS
];

67 c⁄° 
JEDECTabÀ
 *
jedec_idtoöf
(
__u8
 
m‰
,__u8 
id
);

	@/usr/include/linux/mtd/map.h

5 #i‚de‡
__LINUX_MTD_MAP_H__


6 
	#__LINUX_MTD_MAP_H__


	)

8 
	~<löux/c⁄fig.h
>

9 
	~<löux/ty≥s.h
>

10 
	~<löux/mtd/mtd.h
>

11 
	~<löux/¶ab.h
>

29 
	sm≠_öfo
 {

30 *
	m«me
;

31 
	msize
;

32 
	mbuswidth
;

33 
__u8
 (*
ªad8
)(
	mm≠_öfo
 *, );

34 
__u16
 (*
ªad16
)(
	mm≠_öfo
 *, );

35 
__u32
 (*
ªad32
)(
	mm≠_öfo
 *, );

41 (*
	mc›y_‰om
)(
	mm≠_öfo
 *, *, , 
	mssize_t
);

42 (*
	mwrôe8
)(
	mm≠_öfo
 *, 
	m__u8
, );

43 (*
	mwrôe16
)(
	mm≠_öfo
 *, 
	m__u16
, );

44 (*
	mwrôe32
)(
	mm≠_öfo
 *, 
	m__u32
, );

45 (*
	mc›y_to
)(
	mm≠_öfo
 *, , c⁄° *, 
	mssize_t
);

47 (*
	m£t_vµ
)(
	mm≠_öfo
 *, );

53 
	mm≠_¥iv_1
;

54 
	mm≠_¥iv_2
;

55 *
	mÊdrv_¥iv
;

56 
mtd_chù_drivî
 *
	mÊdrv
;

60 
	smtd_chù_drivî
 {

61 
	mmtd_öfo
 *(*
	m¥obe
)(
m≠_öfo
 *
	mm≠
);

62 (*
	mde°roy
)(
	mmtd_öfo
 *);

63 
moduÀ
 *
	mmoduÀ
;

64 *
	m«me
;

65 
li°_hód
 
	mli°
;

68 
ªgi°î_mtd_chù_drivî
(
mtd_chù_drivî
 *);

69 
uƒegi°î_mtd_chù_drivî
(
mtd_chù_drivî
 *);

71 
mtd_öfo
 *
do_m≠_¥obe
(*
«me
, 
m≠_öfo
 *
m≠
);

78 
ölöe
 
	$m≠_de°roy
(
mtd_öfo
 *
mtd
)

80 
m≠_öfo
 *
m≠
 = 
mtd
->
¥iv
;

82 
m≠
->
Êdrv
->
	`de°roy
(
mtd
);

83 #ifde‡
CONFIG_MODULES


84 i‡(
m≠
->
Êdrv
->
moduÀ
)

85 
	`__MOD_DEC_USE_COUNT
(
m≠
->
Êdrv
->
moduÀ
);

87 
	`k‰ì
(
mtd
);

88 
	}
}

90 
	#ENABLE_VPP
(
m≠
Ëdÿ{ if(m≠->
£t_vµ
Ëm≠->
	`£t_vµ
(m≠, 1); } 0)

	)

91 
	#DISABLE_VPP
(
m≠
Ëdÿ{ if(m≠->
£t_vµ
Ëm≠->
	`£t_vµ
(m≠, 0); } 0)

	)

	@/usr/include/linux/mtd/mtd.h

4 #i‚de‡
__MTD_MTD_H__


5 
	#__MTD_MTD_H__


	)

7 #ifde‡
__KERNEL__


9 
	~<löux/c⁄fig.h
>

10 
	~<löux/vîsi⁄.h
>

11 
	~<löux/ty≥s.h
>

12 
	~<löux/mtd/com∑tmac.h
>

13 
	~<löux/moduÀ.h
>

14 
	~<löux/uio.h
>

18 
	sîa£_öfo_u£r
 {

19 
u_öt32_t
 
	m°¨t
;

20 
u_öt32_t
 
	mÀngth
;

23 
	smtd_oob_buf
 {

24 
u_öt32_t
 
	m°¨t
;

25 
u_öt32_t
 
	mÀngth
;

26 *
	m±r
;

30 
	#MTD_CHAR_MAJOR
 90

	)

31 
	#MTD_BLOCK_MAJOR
 31

	)

32 
	#MAX_MTD_DEVICES
 16

	)

36 
	#MTD_ABSENT
 0

	)

37 
	#MTD_RAM
 1

	)

38 
	#MTD_ROM
 2

	)

39 
	#MTD_NORFLASH
 3

	)

40 
	#MTD_NANDFLASH
 4

	)

41 
	#MTD_PEROM
 5

	)

42 
	#MTD_OTHER
 14

	)

43 
	#MTD_UNKNOWN
 15

	)

47 
	#MTD_CLEAR_BITS
 1

48 
	#MTD_SET_BITS
 2

49 
	#MTD_ERASEABLE
 4

50 
	#MTD_WRITEB_WRITEABLE
 8

51 
	#MTD_VOLATILE
 16

52 
	#MTD_XIP
 32

53 
	#MTD_OOB
 64

54 
	#MTD_ECC
 128

55 

	)

57 
	#MTD_CAP_ROM
 0

	)

58 
	#MTD_CAP_RAM
 (
MTD_CLEAR_BITS
|
MTD_SET_BITS
|
MTD_WRITEB_WRITEABLE
)

	)

59 
	#MTD_CAP_NORFLASH
 (
MTD_CLEAR_BITS
|
MTD_ERASEABLE
)

	)

60 
	#MTD_CAP_NANDFLASH
 (
MTD_CLEAR_BITS
|
MTD_ERASEABLE
|
MTD_OOB
)

	)

61 
	#MTD_WRITEABLE
 (
MTD_CLEAR_BITS
|
MTD_SET_BITS
)

	)

65 
	#MTD_ECC_NONE
 0

66 
	#MTD_ECC_RS_DiskOnChù
 1

67 
	#MTD_ECC_SW
 2

68 

	)

69 
	smtd_öfo_u£r
 {

70 
u_ch¨
 
	mty≥
;

71 
u_öt32_t
 
	mÊags
;

72 
u_öt32_t
 
	msize
;

73 
u_öt32_t
 
	mîa£size
;

74 
u_öt32_t
 
	moobblock
;

75 
u_öt32_t
 
	moobsize
;

76 
u_öt32_t
 
	mec˘y≥
;

77 
u_öt32_t
 
	meccsize
;

80 
	sªgi⁄_öfo_u£r
 {

81 
u_öt32_t
 
	moff£t
;

83 
u_öt32_t
 
	mîa£size
;

84 
u_öt32_t
 
	mnumblocks
;

85 
u_öt32_t
 
	mªgi⁄ödex
;

88 
	#MEMGETINFO
 
	`_IOR
('M', 1, 
mtd_öfo_u£r
)

	)

89 
	#MEMERASE
 
	`_IOW
('M', 2, 
îa£_öfo_u£r
)

	)

90 
	#MEMWRITEOOB
 
	`_IOWR
('M', 3, 
mtd_oob_buf
)

	)

91 
	#MEMREADOOB
 
	`_IOWR
('M', 4, 
mtd_oob_buf
)

	)

92 
	#MEMLOCK
 
	`_IOW
('M', 5, 
îa£_öfo_u£r
)

	)

93 
	#MEMUNLOCK
 
	`_IOW
('M', 6, 
îa£_öfo_u£r
)

	)

94 
	#MEMGETREGIONCOUNT
 
	`_IOR
('M', 7, )

	)

95 
	#MEMGETREGIONINFO
 
	`_IOWR
('M', 8, 
ªgi⁄_öfo_u£r
)

	)

97 #i‚de‡
__KERNEL__


99 
mtd_öfo_u£r
 
	tmtd_öfo_t
;

100 
îa£_öfo_u£r
 
	tîa£_öfo_t
;

101 
ªgi⁄_öfo_u£r
 
	tªgi⁄_öfo_t
;

109 
	#MTD_ERASE_PENDING
 0x01

	)

110 
	#MTD_ERASING
 0x02

	)

111 
	#MTD_ERASE_SUSPEND
 0x04

	)

112 
	#MTD_ERASE_DONE
 0x08

	)

113 
	#MTD_ERASE_FAILED
 0x10

	)

115 
	sîa£_öfo
 {

116 
mtd_öfo
 *
	mmtd
;

117 
u_öt32_t
 
	maddr
;

118 
u_öt32_t
 
	mÀn
;

119 
u_l⁄g
 
	mtime
;

120 
u_l⁄g
 
	mªåõs
;

121 
u_öt
 
	mdev
;

122 
u_öt
 
	m˚Œ
;

123 (*
	mˇŒback
Ë(
îa£_öfo
 *
	m£lf
);

124 
u_l⁄g
 
	m¥iv
;

125 
u_ch¨
 
	m°©e
;

126 
îa£_öfo
 *
	m√xt
;

129 
	smtd_îa£_ªgi⁄_öfo
 {

130 
u_öt32_t
 
	moff£t
;

131 
u_öt32_t
 
	mîa£size
;

132 
u_öt32_t
 
	mnumblocks
;

135 
	smtd_öfo
 {

136 
u_ch¨
 
	mty≥
;

137 
u_öt32_t
 
	mÊags
;

138 
u_öt32_t
 
	msize
;

144 
u_öt32_t
 
	mîa£size
;

146 
u_öt32_t
 
	moobblock
;

147 
u_öt32_t
 
	moobsize
;

148 
u_öt32_t
 
	mec˘y≥
;

149 
u_öt32_t
 
	meccsize
;

152 *
	m«me
;

153 
	mödex
;

158 
	mnumîa£ªgi⁄s
;

159 
mtd_îa£_ªgi⁄_öfo
 *
	mîa£ªgi⁄s
;

162 
u_öt32_t
 
	mb™k_size
;

164 
moduÀ
 *
	mmoduÀ
;

165 (*
	mîa£
Ë(
mtd_öfo
 *
	mmtd
, 
îa£_öfo
 *
	mö°r
);

168 (*
	mpoöt
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
, size_à*
	mªéí
, 
u_ch¨
 **
	mmtdbuf
);

171 (*
	mu≈oöt
Ë(
mtd_öfo
 *
	mmtd
, 
u_ch¨
 * 
	maddr
);

174 (*
	mªad
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
, size_à*
	mªéí
, 
u_ch¨
 *
	mbuf
);

175 (*
	mwrôe
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mto
, 
size_t
 
	mÀn
, size_à*
	mªéí
, c⁄° 
u_ch¨
 *
	mbuf
);

177 (*
	mªad_ecc
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
, size_à*
	mªéí
, 
u_ch¨
 *
	mbuf
, u_ch¨ *
	meccbuf
);

178 (*
	mwrôe_ecc
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mto
, 
size_t
 
	mÀn
, size_à*
	mªéí
, c⁄° 
u_ch¨
 *
	mbuf
, u_ch¨ *
	meccbuf
);

180 (*
	mªad_oob
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
, size_à*
	mªéí
, 
u_ch¨
 *
	mbuf
);

181 (*
	mwrôe_oob
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mto
, 
size_t
 
	mÀn
, size_à*
	mªéí
, c⁄° 
u_ch¨
 *
	mbuf
);

188 (*
	mªadv
Ë(
mtd_öfo
 *
	mmtd
, 
iovec
 *
	mvecs
, 
	mcou¡
, 
loff_t
 
	m‰om
, 
size_t
 *
	mªéí
);

189 (*
	mwrôev
Ë(
mtd_öfo
 *
	mmtd
, c⁄° 
iovec
 *
	mvecs
, 
	mcou¡
, 
loff_t
 
	mto
, 
size_t
 *
	mªéí
);

192 (*
	msync
Ë(
mtd_öfo
 *
	mmtd
);

195 (*
	mlock
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mofs
, 
size_t
 
	mÀn
);

196 (*
	mu∆ock
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mofs
, 
size_t
 
	mÀn
);

199 (*
	msu•íd
Ë(
mtd_öfo
 *
	mmtd
);

200 (*
	mªsume
Ë(
mtd_öfo
 *
	mmtd
);

202 *
	m¥iv
;

208 
add_mtd_devi˚
(
mtd_öfo
 *
mtd
);

209 
dñ_mtd_devi˚
 (
mtd_öfo
 *
mtd
);

211 
mtd_öfo
 *
__gë_mtd_devi˚
(mtd_öfÿ*
mtd
, 
num
);

213 
ölöe
 
mtd_öfo
 *
	$gë_mtd_devi˚
(
mtd_öfo
 *
mtd
, 
num
)

215 
mtd_öfo
 *
ªt
;

217 
ªt
 = 
	`__gë_mtd_devi˚
(
mtd
, 
num
);

219 i‡(
ªt
 &&Ñë->
moduÀ
 && !
	`åy_öc_mod_cou¡
(ret->module))

220  
NULL
;

222  
ªt
;

223 
	}
}

225 
ölöe
 
	$put_mtd_devi˚
(
mtd_öfo
 *
mtd
)

227 i‡(
mtd
->
moduÀ
)

228 
	`__MOD_DEC_USE_COUNT
(
mtd
->
moduÀ
);

229 
	}
}

232 
	smtd_nŸifõr
 {

233 (*
	madd
)(
mtd_öfo
 *
	mmtd
);

234 (*
	mªmove
)(
mtd_öfo
 *
	mmtd
);

235 
mtd_nŸifõr
 *
	m√xt
;

239 
ªgi°î_mtd_u£r
 (
mtd_nŸifõr
 *
√w
);

240 
uƒegi°î_mtd_u£r
 (
mtd_nŸifõr
 *
ﬁd
);

243 #i‚de‡
MTDC


244 
	#MTD_ERASE
(
mtd
, 
¨gs
...Ë(*(mtd->
îa£
))(mtd,árgs)

	)

245 
	#MTD_POINT
(
mtd
, 
a
,
b
,
c
,
d
Ë(*(mtd->
poöt
))(mtd,á,b,c, (
u_ch¨
 **)(d))

	)

246 
	#MTD_UNPOINT
(
mtd
, 
¨g
Ë(*(mtd->
u≈oöt
))(mtd, (
u_ch¨
 *Ôrg)

	)

247 
	#MTD_READ
(
mtd
, 
¨gs
...Ë(*(mtd->
ªad
))(mtd,árgs)

	)

248 
	#MTD_WRITE
(
mtd
, 
¨gs
...Ë(*(mtd->
wrôe
))(mtd,árgs)

	)

249 
	#MTD_READV
(
mtd
, 
¨gs
...Ë(*(mtd->
ªadv
))(mtd,árgs)

	)

250 
	#MTD_WRITEV
(
mtd
, 
¨gs
...Ë(*(mtd->
wrôev
))(mtd,árgs)

	)

251 
	#MTD_READECC
(
mtd
, 
¨gs
...Ë(*(mtd->
ªad_ecc
))(mtd,árgs)

	)

252 
	#MTD_WRITEECC
(
mtd
, 
¨gs
...Ë(*(mtd->
wrôe_ecc
))(mtd,árgs)

	)

253 
	#MTD_READOOB
(
mtd
, 
¨gs
...Ë(*(mtd->
ªad_oob
))(mtd,árgs)

	)

254 
	#MTD_WRITEOOB
(
mtd
, 
¨gs
...Ë(*(mtd->
wrôe_oob
))(mtd,árgs)

	)

255 
	#MTD_SYNC
(
mtd
Ëdÿ{ i‡(mtd->
sync
Ë(*(mtd->sync))(mtd); } 0)

	)

261 
	#MTD_DEBUG_LEVEL0
 (0Ë

	)

262 
	#MTD_DEBUG_LEVEL1
 (1Ë

	)

263 
	#MTD_DEBUG_LEVEL2
 (2Ë

	)

264 
	#MTD_DEBUG_LEVEL3
 (3Ë

	)

266 #ifde‡
CONFIG_MTD_DEBUG


267 
	#DEBUG
(
n
, 
¨gs
...) \

268 i‡(
n
 <
CONFIG_MTD_DEBUG_VERBOSE
) { \

269 
	`¥ötk
(
KERN_INFO
 
¨gs
); \

270 }

	)

272 
	#DEBUG
(
n
, 
¨gs
...)

	)

	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

4 
	~<asm/∑øm.h
>

6 
evít
;

8 
	~<löux/c⁄fig.h
>

9 
	~<löux/böfmts.h
>

10 
	~<löux/thªads.h
>

11 
	~<löux/kî√l.h
>

12 
	~<löux/ty≥s.h
>

13 
	~<löux/times.h
>

14 
	~<löux/timex.h
>

16 
	~<asm/sy°em.h
>

17 
	~<asm/£m≠h‹e.h
>

18 
	~<asm/∑ge.h
>

19 
	~<asm/±ø˚.h
>

20 
	~<asm/mmu.h
>

22 
	~<löux/smp.h
>

23 
	~<löux/ây.h
>

24 
	~<löux/£m.h
>

25 
	~<löux/sig«l.h
>

26 
	~<löux/£cuªbôs.h
>

27 
	~<löux/fs_°ru˘.h
>

29 
	gexec_domaö
;

34 
	#CSIGNAL
 0x000000f‡

	)

35 
	#CLONE_VM
 0x00000100

	)

36 
	#CLONE_FS
 0x00000200

	)

37 
	#CLONE_FILES
 0x00000400

	)

38 
	#CLONE_SIGHAND
 0x00000800

	)

39 
	#CLONE_PID
 0x00001000

	)

40 
	#CLONE_PTRACE
 0x00002000

	)

41 
	#CLONE_VFORK
 0x00004000

	)

42 
	#CLONE_PARENT
 0x00008000

	)

43 
	#CLONE_THREAD
 0x00010000

	)

45 
	#CLONE_SIGNAL
 (
CLONE_SIGHAND
 | 
CLONE_THREAD
)

	)

57 
avírun
[];

59 
	#FSHIFT
 11

	)

60 
	#FIXED_1
 (1<<
FSHIFT
Ë

	)

61 
	#LOAD_FREQ
 (5*
HZ
Ë

	)

62 
	#EXP_1
 1884

	)

63 
	#EXP_5
 2014

	)

64 
	#EXP_15
 2037

	)

66 
	#CALC_LOAD
(
lﬂd
,
exp
,
n
) \

67 
lﬂd
 *
exp
; \

68 
lﬂd
 +
n
*(
FIXED_1
-
exp
); \

69 
lﬂd
 >>
FSHIFT
;

	)

71 
	#CT_TO_SECS
(
x
Ë((xË/ 
HZ
)

	)

72 
	#CT_TO_USECS
(
x
Ë(((xË% 
HZ
Ë* 1000000/HZ)

	)

74 
ƒ_ru¬ög
, 
ƒ_thªads
;

75 
œ°_pid
;

77 
	~<löux/fs.h
>

78 
	~<löux/time.h
>

79 
	~<löux/∑øm.h
>

80 
	~<löux/ªsour˚.h
>

81 
	~<löux/timî.h
>

83 
	~<asm/¥o˚ss‹.h
>

85 
	#TASK_RUNNING
 0

	)

86 
	#TASK_INTERRUPTIBLE
 1

	)

87 
	#TASK_UNINTERRUPTIBLE
 2

	)

88 
	#TASK_ZOMBIE
 4

	)

89 
	#TASK_STOPPED
 8

	)

91 
	#__£t_èsk_°©e
(
tsk
, 
°©e_vÆue
) \

92 dÿ{ (
tsk
)->
°©e
 = (
°©e_vÆue
); } 0)

	)

93 #ifde‡
CONFIG_SMP


94 
	#£t_èsk_°©e
(
tsk
, 
°©e_vÆue
) \

95 
	`£t_mb
((
tsk
)->
°©e
, (
°©e_vÆue
))

	)

97 
	#£t_èsk_°©e
(
tsk
, 
°©e_vÆue
) \

98 
	`__£t_èsk_°©e
((
tsk
), (
°©e_vÆue
))

	)

101 
	#__£t_cuºít_°©e
(
°©e_vÆue
) \

102 dÿ{ 
cuºít
->
°©e
 = (
°©e_vÆue
); } 0)

	)

103 #ifde‡
CONFIG_SMP


104 
	#£t_cuºít_°©e
(
°©e_vÆue
) \

105 
	`£t_mb
(
cuºít
->
°©e
, (
°©e_vÆue
))

	)

107 
	#£t_cuºít_°©e
(
°©e_vÆue
) \

108 
	`__£t_cuºít_°©e
(
°©e_vÆue
)

	)

114 
	#SCHED_OTHER
 0

	)

115 
	#SCHED_FIFO
 1

	)

116 
	#SCHED_RR
 2

	)

122 
	#SCHED_YIELD
 0x10

	)

124 
	ssched_∑øm
 {

125 
	msched_¥i‹ôy
;

128 
	gcom∂ëi⁄
;

	@/usr/include/linux/slab.h

7 #if !
deföed
(
_LINUX_SLAB_H
)

8 
	#_LINUX_SLAB_H


	)

	@/usr/include/linux/spinlock.h

1 #i‚de‡
__LINUX_SPINLOCK_H


2 
	#__LINUX_SPINLOCK_H


	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<löux/posix_ty≥s.h
>

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__KERNEL_STRICT_NAMES


9 
__kî√l_fd_£t
 
	tfd_£t
;

10 
__kî√l_dev_t
 
	tdev_t
;

11 
__kî√l_öo_t
 
	töo_t
;

12 
__kî√l_mode_t
 
	tmode_t
;

13 
__kî√l_∆ök_t
 
	t∆ök_t
;

14 
__kî√l_off_t
 
	toff_t
;

15 
__kî√l_pid_t
 
	tpid_t
;

16 
__kî√l_daddr_t
 
	tdaddr_t
;

17 
__kî√l_key_t
 
	tkey_t
;

18 
__kî√l_su£c⁄ds_t
 
	tsu£c⁄ds_t
;

20 
__kî√l_uid_t
 
	tuid_t
;

21 
__kî√l_gid_t
 
	tgid_t
;

24 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

25 
__kî√l_loff_t
 
	tloff_t
;

32 #i‚de‡
_SIZE_T


33 
	#_SIZE_T


	)

34 
__kî√l_size_t
 
	tsize_t
;

37 #i‚de‡
_SSIZE_T


38 
	#_SSIZE_T


	)

39 
__kî√l_ssize_t
 
	tssize_t
;

42 #i‚de‡
_PTRDIFF_T


43 
	#_PTRDIFF_T


	)

44 
__kî√l_±rdiff_t
 
	t±rdiff_t
;

47 #i‚de‡
_TIME_T


48 
	#_TIME_T


	)

49 
__kî√l_time_t
 
	ttime_t
;

52 #i‚de‡
_CLOCK_T


53 
	#_CLOCK_T


	)

54 
__kî√l_˛ock_t
 
	t˛ock_t
;

57 #i‚de‡
_CADDR_T


58 
	#_CADDR_T


	)

59 
__kî√l_ˇddr_t
 
	tˇddr_t
;

63 
	tu_ch¨
;

64 
	tu_sh‹t
;

65 
	tu_öt
;

66 
	tu_l⁄g
;

69 
	tunch¨
;

70 
	tush‹t
;

71 
	tuöt
;

72 
	tul⁄g
;

74 #i‚de‡
__BIT_TYPES_DEFINED__


75 
	#__BIT_TYPES_DEFINED__


	)

77 
__u8
 
	tu_öt8_t
;

78 
__s8
 
	töt8_t
;

79 
__u16
 
	tu_öt16_t
;

80 
__s16
 
	töt16_t
;

81 
__u32
 
	tu_öt32_t
;

82 
__s32
 
	töt32_t
;

86 
__u8
 
	tuöt8_t
;

87 
__u16
 
	tuöt16_t
;

88 
__u32
 
	tuöt32_t
;

90 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

91 
__u64
 
	tuöt64_t
;

92 
__u64
 
	tu_öt64_t
;

93 
__s64
 
	töt64_t
;

103 
	su°©
 {

104 
__kî√l_daddr_t
 
	mf_t‰ì
;

105 
__kî√l_öo_t
 
	mf_töode
;

106 
	mf_‚ame
[6];

107 
	mf_Âack
[6];

	@/usr/include/linux/version.h

1 
	#UTS_RELEASE
 "2.4.20"

	)

2 
	#LINUX_VERSION_CODE
 132116

	)

3 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/asm/bitops.h

1 #i‚de‡
_I386_BITOPS_H


2 
	#_I386_BITOPS_H


	)

8 
	~<löux/c⁄fig.h
>

18 
	#ADDR
 (*(vﬁ©ûê*Ë
addr
)

	)

30 
__ölöe__
 
	$£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

32 
__asm__
 
	`__vﬁ©ûe__
(

34 :"=m" (
ADDR
)

35 :"Ir" (
ƒ
));

36 
	}
}

47 
__ölöe__
 
	$__£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

49 
	`__asm__
(

51 :"=m" (
ADDR
)

52 :"Ir" (
ƒ
));

53 
	}
}

65 
__ölöe__
 
	$˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

67 
__asm__
 
	`__vﬁ©ûe__
(

69 :"=m" (
ADDR
)

70 :"Ir" (
ƒ
));

71 
	}
}

72 
	#smp_mb__bef‹e_˛ór_bô
(Ë
	`b¨rõr
()

	)

73 
	#smp_mb__a·î_˛ór_bô
(Ë
	`b¨rõr
()

	)

84 
__ölöe__
 
	$__ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

86 
__asm__
 
	`__vﬁ©ûe__
(

88 :"=m" (
ADDR
)

89 :"Ir" (
ƒ
));

90 
	}
}

101 
__ölöe__
 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

103 
__asm__
 
	`__vﬁ©ûe__
(

105 :"=m" (
ADDR
)

106 :"Ir" (
ƒ
));

107 
	}
}

117 
__ölöe__
 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

119 
ﬁdbô
;

121 
__asm__
 
	`__vﬁ©ûe__
(

123 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

124 :"Ir" (
ƒ
) : "memory");

125  
ﬁdbô
;

126 
	}
}

137 
__ölöe__
 
	$__ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

139 
ﬁdbô
;

141 
	`__asm__
(

143 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

144 :"Ir" (
ƒ
));

145  
ﬁdbô
;

146 
	}
}

156 
__ölöe__
 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

158 
ﬁdbô
;

160 
__asm__
 
	`__vﬁ©ûe__
(

162 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

163 :"Ir" (
ƒ
) : "memory");

164  
ﬁdbô
;

165 
	}
}

176 
__ölöe__
 
	$__ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

178 
ﬁdbô
;

180 
	`__asm__
(

182 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

183 :"Ir" (
ƒ
));

184  
ﬁdbô
;

185 
	}
}

188 
__ölöe__
 
	$__ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

190 
ﬁdbô
;

192 
__asm__
 
	`__vﬁ©ûe__
(

194 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

195 :"Ir" (
ƒ
) : "memory");

196  
ﬁdbô
;

197 
	}
}

207 
__ölöe__
 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

209 
ﬁdbô
;

211 
__asm__
 
	`__vﬁ©ûe__
(

213 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

214 :"Ir" (
ƒ
) : "memory");

215  
ﬁdbô
;

216 
	}
}

224 
ã°_bô
(
ƒ
, c⁄° vﬁ©ûê* 
addr
);

227 
__ölöe__
 
	$c⁄°™t_ã°_bô
(
ƒ
, c⁄° vﬁ©ûê* 
addr
)

229  ((1UL << (
ƒ
 & 31)Ë& (((c⁄° vﬁ©ûê*Ë
addr
)[nr >> 5])) != 0;

230 
	}
}

232 
__ölöe__
 
	$v¨übÀ_ã°_bô
(
ƒ
, vﬁ©ûê* 
addr
)

234 
ﬁdbô
;

236 
__asm__
 
	`__vﬁ©ûe__
(

238 :"Ù" (
ﬁdbô
)

239 :"m" (
ADDR
),"Ir" (
ƒ
));

240  
ﬁdbô
;

241 
	}
}

243 
	#ã°_bô
(
ƒ
,
addr
) \

244 (
	`__buûtö_c⁄°™t_p
(
ƒ
) ? \

245 
	`c⁄°™t_ã°_bô
((
ƒ
),(
addr
)) : \

246 
	`v¨übÀ_ã°_bô
((
ƒ
),(
addr
)))

	)

256 
__ölöe__
 
	$föd_fú°_zîo_bô
(* 
addr
, 
size
)

258 
d0
, 
d1
, 
d2
;

259 
ªs
;

261 i‡(!
size
)

264 
__asm__
 
	`__vﬁ©ûe__
(

275 :"=d" (
ªs
), "=&c" (
d0
), "=&D" (
d1
), "=&a" (
d2
)

276 :"1" ((
size
 + 31Ë>> 5), "2" (
addr
), "b" (addr));

277  
ªs
;

278 
	}
}

286 
__ölöe__
 
	$föd_√xt_zîo_bô
 (* 
addr
, 
size
, 
off£t
)

288 * 
p
 = ((*Ë
addr
Ë+ (
off£t
 >> 5);

289 
£t
 = 0, 
bô
 = 
off£t
 & 31, 
ªs
;

291 i‡(
bô
) {

295 
	`__asm__
("bsfl %1,%0\n\t"

299 : "Ù" (
£t
)

300 : "r" (~(*
p
 >> 
bô
)));

301 i‡(
£t
 < (32 - 
bô
))

302  
£t
 + 
off£t
;

303 
£t
 = 32 - 
bô
;

304 
p
++;

309 
ªs
 = 
	`föd_fú°_zîo_bô
 (
p
, 
size
 - 32 * (∞- (*Ë
addr
));

310  (
off£t
 + 
£t
 + 
ªs
);

311 
	}
}

319 
__ölöe__
 
	$ffz
(
w‹d
)

321 
	`__asm__
("bsfl %1,%0"

322 :"Ù" (
w‹d
)

323 :"r" (~
w‹d
));

324  
w‹d
;

325 
	}
}

327 #w¨nög 
This
 
ö˛udefûe
 
is
 
nŸ
 
avaûabÀ
 
⁄
 
Æl
 
¨chôe˘uªs
.

328 #w¨nög 
Usög
 
kî√l
 
hódîs
 
ö
 
u£r•a˚
: 
©omicôy
 
nŸ
 
gu¨™ãed


	@/usr/include/asm/errno.h

1 #i‚de‡
_I386_ERRNO_H


2 
	#_I386_ERRNO_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

38 
	#EDEADLK
 35

	)

39 
	#ENAMETOOLONG
 36

	)

40 
	#ENOLCK
 37

	)

41 
	#ENOSYS
 38

	)

42 
	#ENOTEMPTY
 39

	)

43 
	#ELOOP
 40

	)

44 
	#EWOULDBLOCK
 
EAGAIN


	)

45 
	#ENOMSG
 42

	)

46 
	#EIDRM
 43

	)

47 
	#ECHRNG
 44

	)

48 
	#EL2NSYNC
 45

	)

49 
	#EL3HLT
 46

	)

50 
	#EL3RST
 47

	)

51 
	#ELNRNG
 48

	)

52 
	#EUNATCH
 49

	)

53 
	#ENOCSI
 50

	)

54 
	#EL2HLT
 51

	)

55 
	#EBADE
 52

	)

56 
	#EBADR
 53

	)

57 
	#EXFULL
 54

	)

58 
	#ENOANO
 55

	)

59 
	#EBADRQC
 56

	)

60 
	#EBADSLT
 57

	)

62 
	#EDEADLOCK
 
EDEADLK


	)

64 
	#EBFONT
 59

	)

65 
	#ENOSTR
 60

	)

66 
	#ENODATA
 61

	)

67 
	#ETIME
 62

	)

68 
	#ENOSR
 63

	)

69 
	#ENONET
 64

	)

70 
	#ENOPKG
 65

	)

71 
	#EREMOTE
 66

	)

72 
	#ENOLINK
 67

	)

73 
	#EADV
 68

	)

74 
	#ESRMNT
 69

	)

75 
	#ECOMM
 70

	)

76 
	#EPROTO
 71

	)

77 
	#EMULTIHOP
 72

	)

78 
	#EDOTDOT
 73

	)

79 
	#EBADMSG
 74

	)

80 
	#EOVERFLOW
 75

	)

81 
	#ENOTUNIQ
 76

	)

82 
	#EBADFD
 77

	)

83 
	#EREMCHG
 78

	)

84 
	#ELIBACC
 79

	)

85 
	#ELIBBAD
 80

	)

86 
	#ELIBSCN
 81

	)

87 
	#ELIBMAX
 82

	)

88 
	#ELIBEXEC
 83

	)

89 
	#EILSEQ
 84

	)

90 
	#ERESTART
 85

	)

91 
	#ESTRPIPE
 86

	)

92 
	#EUSERS
 87

	)

93 
	#ENOTSOCK
 88

	)

94 
	#EDESTADDRREQ
 89

	)

95 
	#EMSGSIZE
 90

	)

96 
	#EPROTOTYPE
 91

	)

97 
	#ENOPROTOOPT
 92

	)

98 
	#EPROTONOSUPPORT
 93

	)

99 
	#ESOCKTNOSUPPORT
 94

	)

100 
	#EOPNOTSUPP
 95

	)

101 
	#EPFNOSUPPORT
 96

	)

102 
	#EAFNOSUPPORT
 97

	)

103 
	#EADDRINUSE
 98

	)

104 
	#EADDRNOTAVAIL
 99

	)

105 
	#ENETDOWN
 100

	)

106 
	#ENETUNREACH
 101

	)

107 
	#ENETRESET
 102

	)

108 
	#ECONNABORTED
 103

	)

109 
	#ECONNRESET
 104

	)

110 
	#ENOBUFS
 105

	)

111 
	#EISCONN
 106

	)

112 
	#ENOTCONN
 107

	)

113 
	#ESHUTDOWN
 108

	)

114 
	#ETOOMANYREFS
 109

	)

115 
	#ETIMEDOUT
 110

	)

116 
	#ECONNREFUSED
 111

	)

117 
	#EHOSTDOWN
 112

	)

118 
	#EHOSTUNREACH
 113

	)

119 
	#EALREADY
 114

	)

120 
	#EINPROGRESS
 115

	)

121 
	#ESTALE
 116

	)

122 
	#EUCLEAN
 117

	)

123 
	#ENOTNAM
 118

	)

124 
	#ENAVAIL
 119

	)

125 
	#EISNAM
 120

	)

126 
	#EREMOTEIO
 121

	)

127 
	#EDQUOT
 122

	)

129 
	#ENOMEDIUM
 123

	)

130 
	#EMEDIUMTYPE
 124

	)

	@/usr/include/asm/mmu.h

1 #i‚de‡
__i386_MMU_H


2 
	#__i386_MMU_H


	)

9 *
	m£gmíts
;

10 
	m˝uvÆid
;

11 } 
	tmm_c⁄ãxt_t
;

	@/usr/include/asm/page.h

1 #i‚de‡
_I386_PAGE_H


2 
	#_I386_PAGE_H


	)

5 
	#PAGE_SHIFT
 12

	)

6 
	#PAGE_SIZE
 (1UL << 
PAGE_SHIFT
)

	)

7 
	#PAGE_MASK
 (~(
PAGE_SIZE
-1))

	)

	@/usr/include/asm/param.h

1 #i‚de‡
_ASMi386_PARAM_H


2 
	#_ASMi386_PARAM_H


	)

4 #i‚de‡
HZ


5 
	#HZ
 100

	)

8 
	#EXEC_PAGESIZE
 4096

	)

10 #i‚de‡
NGROUPS


11 
	#NGROUPS
 32

	)

14 #i‚de‡
NOGROUP


15 
	#NOGROUP
 (-1)

	)

18 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm/processor.h

7 #i‚de‡
__ASM_I386_PROCESSOR_H


8 
	#__ASM_I386_PROCESSOR_H


	)

10 
	~<asm/vm86.h
>

11 
	~<asm/m©h_emu.h
>

12 
	~<asm/£gmít.h
>

13 
	~<asm/∑ge.h
>

14 
	~<asm/ty≥s.h
>

15 
	~<asm/sigc⁄ãxt.h
>

16 
	~<asm/˝u„©uª.h
>

17 
	~<löux/c⁄fig.h
>

18 
	~<löux/thªads.h
>

24 
	#cuºít_ãxt_addr
(Ë({ *
pc
; 
	`__asm__
("mov»$1f,%0\n1:":"=g" (pc));Öc; })

	)

32 
	s˝uöfo_x86
 {

33 
__u8
 
	mx86
;

34 
__u8
 
	mx86_víd‹
;

35 
__u8
 
	mx86_modñ
;

36 
__u8
 
	mx86_mask
;

37 
	mwp_w‹ks_ok
;

38 
	mh…_w‹ks_ok
;

39 
	mh¨d_m©h
;

40 
	mrfu
;

41 
	m˝uid_Àvñ
;

42 
__u32
 
	mx86_ˇ∑bûôy
[
NCAPINTS
];

43 
	mx86_víd‹_id
[16];

44 
	mx86_modñ_id
[64];

45 
	mx86_ˇche_size
;

47 
__u16
 
	m˛ockmul
;

48 
	mfdiv_bug
;

49 
	mf00f_bug
;

50 
	mcoma_bug
;

51 
	mlo›s_≥r_jiffy
;

52 *
	mpgd_quick
;

53 *
	mpmd_quick
;

54 *
	m±e_quick
;

55 
	mpgèbÀ_ˇche_sz
;

58 
	#X86_VENDOR_INTEL
 0

	)

59 
	#X86_VENDOR_CYRIX
 1

	)

60 
	#X86_VENDOR_AMD
 2

	)

61 
	#X86_VENDOR_UMC
 3

	)

62 
	#X86_VENDOR_NEXGEN
 4

	)

63 
	#X86_VENDOR_CENTAUR
 5

	)

64 
	#X86_VENDOR_RISE
 6

	)

65 
	#X86_VENDOR_TRANSMETA
 7

	)

66 
	#X86_VENDOR_UNKNOWN
 0xff

	)

72 
˝uöfo_x86
 
boŸ_˝u_d©a
;

73 
tss_°ru˘
 
öô_tss
[
NR_CPUS
];

75 #ifde‡
CONFIG_SMP


76 
˝uöfo_x86
 
˝u_d©a
[];

77 
	#cuºít_˝u_d©a
 
˝u_d©a
[
	`smp_¥o˚ss‹_id
()]

	)

79 
	#˝u_d©a
 &
boŸ_˝u_d©a


	)

80 
	#cuºít_˝u_d©a
 
boŸ_˝u_d©a


	)

83 
	#˝u_has_pge
 (
	`ã°_bô
(
X86_FEATURE_PGE
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

84 
	#˝u_has_p£
 (
	`ã°_bô
(
X86_FEATURE_PSE
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

85 
	#˝u_has_∑e
 (
	`ã°_bô
(
X86_FEATURE_PAE
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

86 
	#˝u_has_tsc
 (
	`ã°_bô
(
X86_FEATURE_TSC
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

87 
	#˝u_has_de
 (
	`ã°_bô
(
X86_FEATURE_DE
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

88 
	#˝u_has_vme
 (
	`ã°_bô
(
X86_FEATURE_VME
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

89 
	#˝u_has_fx§
 (
	`ã°_bô
(
X86_FEATURE_FXSR
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

90 
	#˝u_has_xmm
 (
	`ã°_bô
(
X86_FEATURE_XMM
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

91 
	#˝u_has_Âu
 (
	`ã°_bô
(
X86_FEATURE_FPU
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

92 
	#˝u_has_≠ic
 (
	`ã°_bô
(
X86_FEATURE_APIC
, 
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
))

	)

94 
ign‹e_úq13
;

96 
idítify_˝u
(
˝uöfo_x86
 *);

97 
¥öt_˝u_öfo
(
˝uöfo_x86
 *);

98 
dodgy_tsc
();

103 
	#X86_EFLAGS_CF
 0x00000001

	)

104 
	#X86_EFLAGS_PF
 0x00000004

	)

105 
	#X86_EFLAGS_AF
 0x00000010

	)

106 
	#X86_EFLAGS_ZF
 0x00000040

	)

107 
	#X86_EFLAGS_SF
 0x00000080

	)

108 
	#X86_EFLAGS_TF
 0x00000100

	)

109 
	#X86_EFLAGS_IF
 0x00000200

	)

110 
	#X86_EFLAGS_DF
 0x00000400

	)

111 
	#X86_EFLAGS_OF
 0x00000800

	)

112 
	#X86_EFLAGS_IOPL
 0x00003000

	)

113 
	#X86_EFLAGS_NT
 0x00004000

	)

114 
	#X86_EFLAGS_RF
 0x00010000

	)

115 
	#X86_EFLAGS_VM
 0x00020000

	)

116 
	#X86_EFLAGS_AC
 0x00040000

	)

117 
	#X86_EFLAGS_VIF
 0x00080000

	)

118 
	#X86_EFLAGS_VIP
 0x00100000

	)

119 
	#X86_EFLAGS_ID
 0x00200000

	)

124 
ölöe
 
	$˝uid
(
›
, *
óx
, *
ebx
, *
ecx
, *
edx
)

126 
	`__asm__
("cpuid"

127 : "˜" (*
óx
),

128 "=b" (*
ebx
),

129 "=c" (*
ecx
),

130 "=d" (*
edx
)

131 : "0" (
›
));

132 
	}
}

137 
ölöe
 
	$˝uid_óx
(
›
)

139 
óx
;

141 
	`__asm__
("cpuid"

142 : "˜" (
óx
)

143 : "0" (
›
)

145  
óx
;

146 
	}
}

147 
ölöe
 
	$˝uid_ebx
(
›
)

149 
óx
, 
ebx
;

151 
	`__asm__
("cpuid"

152 : "˜" (
óx
), "=b" (
ebx
)

153 : "0" (
›
)

155  
ebx
;

156 
	}
}

157 
ölöe
 
	$˝uid_ecx
(
›
)

159 
óx
, 
ecx
;

161 
	`__asm__
("cpuid"

162 : "˜" (
óx
), "=c" (
ecx
)

163 : "0" (
›
)

165  
ecx
;

166 
	}
}

167 
ölöe
 
	$˝uid_edx
(
›
)

169 
óx
, 
edx
;

171 
	`__asm__
("cpuid"

172 : "˜" (
óx
), "=d" (
edx
)

173 : "0" (
›
)

175  
edx
;

176 
	}
}

181 
	#X86_CR4_VME
 0x0001

	)

182 
	#X86_CR4_PVI
 0x0002

	)

183 
	#X86_CR4_TSD
 0x0004

	)

184 
	#X86_CR4_DE
 0x0008

	)

185 
	#X86_CR4_PSE
 0x0010

	)

186 
	#X86_CR4_PAE
 0x0020

	)

187 
	#X86_CR4_MCE
 0x0040

	)

188 
	#X86_CR4_PGE
 0x0080

	)

189 
	#X86_CR4_PCE
 0x0100

	)

190 
	#X86_CR4_OSFXSR
 0x0200

	)

191 
	#X86_CR4_OSXMMEXCPT
 0x0400

	)

199 
mmu_¸4_„©uªs
;

201 
ölöe
 
	$£t_ö_¸4
 (
mask
)

203 
mmu_¸4_„©uªs
 |
mask
;

204 
	`__asm__
("movl %%cr4,%%eax\n\t"

207 : : "úg" (
mask
)

209 
	}
}

211 
ölöe
 
	$˛ór_ö_¸4
 (
mask
)

213 
mmu_¸4_„©uªs
 &~
mask
;

214 
	`__asm__
("movl %%cr4,%%eax\n\t"

217 : : "úg" (~
mask
)

219 
	}
}

224 
	#CX86_CCR0
 0xc0

	)

225 
	#CX86_CCR1
 0xc1

	)

226 
	#CX86_CCR2
 0xc2

	)

227 
	#CX86_CCR3
 0xc3

	)

228 
	#CX86_CCR4
 0xe8

	)

229 
	#CX86_CCR5
 0xe9

	)

230 
	#CX86_CCR6
 0xó

	)

231 
	#CX86_CCR7
 0xeb

	)

232 
	#CX86_DIR0
 0x„

	)

233 
	#CX86_DIR1
 0xff

	)

234 
	#CX86_ARR_BASE
 0xc4

	)

235 
	#CX86_RCR_BASE
 0xdc

	)

241 
	#gëCx86
(
ªg
Ë({ 
	`outb
(‘eg), 0x22); 
	`öb
(0x23); })

	)

243 
	#£tCx86
(
ªg
, 
d©a
) do { \

244 
	`outb
((
ªg
), 0x22); \

245 
	`outb
((
d©a
), 0x23); \

246 } 0)

	)

251 #ifde‡
CONFIG_EISA


252 
EISA_bus
;

254 
	#EISA_bus
 (0)

	)

256 
MCA_bus
;

260 
machöe_id
;

261 
machöe_submodñ_id
;

262 
BIOS_ªvisi⁄
;

263 
mˇ_≥¡ium_Êag
;

268 
	#TASK_SIZE
 (
PAGE_OFFSET
)

	)

273 
	#TASK_UNMAPPED_BASE
 (
TASK_SIZE
 / 3)

	)

278 
	#IO_BITMAP_SIZE
 32

	)

279 
	#IO_BITMAP_OFFSET
 
	`off£tof
(
tss_°ru˘
,
io_bôm≠
)

	)

280 
	#INVALID_IO_BITMAP_OFFSET
 0x8000

	)

282 
	si387_fßve_°ru˘
 {

283 
	mcwd
;

284 
	mswd
;

285 
	mtwd
;

286 
	mfù
;

287 
	mfcs
;

288 
	mfoo
;

289 
	mfos
;

290 
	m°_•a˚
[20];

291 
	m°©us
;

294 
	si387_fxßve_°ru˘
 {

295 
	mcwd
;

296 
	mswd
;

297 
	mtwd
;

298 
	mf›
;

299 
	mfù
;

300 
	mfcs
;

301 
	mfoo
;

302 
	mfos
;

303 
	mmxc§
;

304 
	mª£rved
;

305 
	m°_•a˚
[32];

306 
	mxmm_•a˚
[32];

307 
	m∑ddög
[56];

308 } 
__©åibuã__
 ((
Æig√d
 (16)));

310 
	si387_so·_°ru˘
 {

311 
	mcwd
;

312 
	mswd
;

313 
	mtwd
;

314 
	mfù
;

315 
	mfcs
;

316 
	mfoo
;

317 
	mfos
;

318 
	m°_•a˚
[20];

319 
	m·›
, 
	mch™ged
, 
	mlookahód
, 
	mno_upd©e
, 
	mrm
, 
	mÆimô
;

320 
öfo
 *
	möfo
;

321 
	míåy_eù
;

324 
	ui387_uni⁄
 {

325 
i387_fßve_°ru˘
 
	mfßve
;

326 
i387_fxßve_°ru˘
 
	mfxßve
;

327 
i387_so·_°ru˘
 
	mso·
;

331 
	m£g
;

332 } 
	tmm_£gmít_t
;

334 
	stss_°ru˘
 {

335 
	mback_lök
,
	m__blh
;

336 
	me•0
;

337 
	mss0
,
	m__ss0h
;

338 
	me•1
;

339 
	mss1
,
	m__ss1h
;

340 
	me•2
;

341 
	mss2
,
	m__ss2h
;

342 
	m__¸3
;

343 
	meù
;

344 
	meÊags
;

345 
	móx
,
	mecx
,
	medx
,
	mebx
;

346 
	me•
;

347 
	mebp
;

348 
	mesi
;

349 
	medi
;

350 
	mes
, 
	m__esh
;

351 
	mcs
, 
	m__csh
;

352 
	mss
, 
	m__ssh
;

353 
	mds
, 
	m__dsh
;

354 
	mfs
, 
	m__fsh
;

355 
	mgs
, 
	m__gsh
;

356 
	mldt
, 
	m__ldth
;

357 
	måa˚
, 
	mbôm≠
;

358 
	mio_bôm≠
[
IO_BITMAP_SIZE
+1];

362 
	m__ˇchñöe_fûÀr
[5];

365 
	sthªad_°ru˘
 {

366 
	me•0
;

367 
	meù
;

368 
	me•
;

369 
	mfs
;

370 
	mgs
;

372 
	mdebugªg
[8];

374 
	m¸2
, 
	må≠_no
, 
	mîr‹_code
;

376 
i387_uni⁄
 
	mi387
;

378 
vm86_°ru˘
 * 
	mvm86_öfo
;

379 
	ms¸ìn_bôm≠
;

380 
	mv86Êags
, 
	mv86mask
, 
	mv86mode
, 
	mßved_e•0
;

382 
	mi›îm
;

383 
	mio_bôm≠
[
IO_BITMAP_SIZE
+1];

386 
	#INIT_THREAD
 { \

394 }

	)

396 
	#INIT_MMAP
 \

397 { &
öô_mm
, 0, 0, 
NULL
, 
PAGE_SHARED
, 
VM_READ
 | 
VM_WRITE
 | 
VM_EXEC
, 1, NULL, NULL }

	)

399 
	#INIT_TSS
 { \

401 (
öô_°ack
) + () &init_stack, \

402 
__KERNEL_DS
, 0, \

410 
	`__LDT
(0),0, \

411 0, 
INVALID_IO_BITMAP_OFFSET
, \

413 }

	)

415 
	#°¨t_thªad
(
ªgs
, 
√w_eù
, 
√w_e•
) do { \

416 
	`__asm__
("movl %0,%%fs ; movl %0,%%gs": :"r" (0)); \

417 
	`£t_fs
(
USER_DS
); \

418 
ªgs
->
xds
 = 
__USER_DS
; \

419 
ªgs
->
xes
 = 
__USER_DS
; \

420 
ªgs
->
xss
 = 
__USER_DS
; \

421 
ªgs
->
xcs
 = 
__USER_CS
; \

422 
ªgs
->
eù
 = 
√w_eù
; \

423 
ªgs
->
e•
 = 
√w_e•
; \

424 } 0)

	)

427 
	gèsk_°ru˘
;

428 
	gmm_°ru˘
;

431 
ªÀa£_thªad
(
èsk_°ru˘
 *);

435 
kî√l_thªad
((*
‚
)(*), * 
¨g
, 
Êags
);

438 
	`c›y_£gmíts
(
èsk_°ru˘
 *
p
, 
mm_°ru˘
 * 
mm
);

439 
	`ªÀa£_£gmíts
(
mm_°ru˘
 * 
mm
);

444 
ölöe
 
	$thªad_ßved_pc
(
thªad_°ru˘
 *
t
)

446  ((*)
t
->
e•
)[3];

447 
	}
}

449 
gë_wch™
(
èsk_°ru˘
 *
p
);

450 
	#KSTK_EIP
(
tsk
Ë(((*)(4096+()—sk)))[1019])

	)

451 
	#KSTK_ESP
(
tsk
Ë(((*)(4096+()—sk)))[1022])

	)

453 
	#THREAD_SIZE
 (2*
PAGE_SIZE
)

	)

454 
	#Æloc_èsk_°ru˘
(Ë((
èsk_°ru˘
 *Ë
	`__gë_‰ì_∑ges
(
GFP_KERNEL
,1))

	)

455 
	#‰ì_èsk_°ru˘
(
p
Ë
	`‰ì_∑ges
((Ë’), 1)

	)

456 
	#gë_èsk_°ru˘
(
tsk
Ë
	`©omic_öc
(&
	`vút_to_∑ge
—sk)->
cou¡
)

	)

458 
	#öô_èsk
 (
öô_èsk_uni⁄
.
èsk
)

	)

459 
	#öô_°ack
 (
öô_èsk_uni⁄
.
°ack
)

	)

461 
	smi¸ocode
 {

462 
	mhdrvî
;

463 
	mªv
;

464 
	md©e
;

465 
	msig
;

466 
	mcksum
;

467 
	mldrvî
;

468 
	mpf
;

469 
	mª£rved
[5];

470 
	mbôs
[500];

474 
	#MICROCODE_IOCFREE
 
	`_IO
('6',0)

	)

477 
ölöe
 
	$ªp_n›
()

479 
__asm__
 
	`__vﬁ©ûe__
("rep;nop");

480 
	}
}

	@/usr/include/asm/ptrace.h

1 #i‚de‡
_I386_PTRACE_H


2 
	#_I386_PTRACE_H


	)

4 
	#EBX
 0

	)

5 
	#ECX
 1

	)

6 
	#EDX
 2

	)

7 
	#ESI
 3

	)

8 
	#EDI
 4

	)

9 
	#EBP
 5

	)

10 
	#EAX
 6

	)

11 
	#DS
 7

	)

12 
	#ES
 8

	)

13 
	#FS
 9

	)

14 
	#GS
 10

	)

15 
	#ORIG_EAX
 11

	)

16 
	#EIP
 12

	)

17 
	#CS
 13

	)

18 
	#EFL
 14

	)

19 
	#UESP
 15

	)

20 
	#SS
 16

	)

21 
	#FRAME_SIZE
 17

	)

26 
	s±_ªgs
 {

27 
	mebx
;

28 
	mecx
;

29 
	medx
;

30 
	mesi
;

31 
	medi
;

32 
	mebp
;

33 
	móx
;

34 
	mxds
;

35 
	mxes
;

36 
	m‹ig_óx
;

37 
	meù
;

38 
	mxcs
;

39 
	meÊags
;

40 
	me•
;

41 
	mxss
;

45 
	#PTRACE_GETREGS
 12

	)

46 
	#PTRACE_SETREGS
 13

	)

47 
	#PTRACE_GETFPREGS
 14

	)

48 
	#PTRACE_SETFPREGS
 15

	)

49 
	#PTRACE_GETFPXREGS
 18

	)

50 
	#PTRACE_SETFPXREGS
 19

	)

52 
	#PTRACE_SETOPTIONS
 21

	)

55 
	#PTRACE_O_TRACESYSGOOD
 0x00000001

	)

	@/usr/include/asm/semaphore.h

1 #i‚de‡
_I386_SEMAPHORE_H


2 
	#_I386_SEMAPHORE_H


	)

4 
	~<löux/lökage.h
>

	@/usr/include/asm/system.h

1 #i‚de‡
__ASM_SYSTEM_H


2 
	#__ASM_SYSTEM_H


	)

4 
	~<löux/c⁄fig.h
>

5 
	~<löux/kî√l.h
>

6 
	~<asm/£gmít.h
>

7 
	~<löux/bô›s.h
>

10 
	#wbövd
() \

11 
__asm__
 
	`__vﬁ©ûe__
 ("wbövd": : :"mem‹y");

	)

13 
ölöe
 
	$gë_limô
(
£gmít
)

15 
__limô
;

16 
	`__asm__
("lsll %1,%0"

17 :"Ù" (
__limô
):"r" (
£gmít
));

18  
__limô
+1;

19 
	}
}

21 
	#n›
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("n›")

	)

23 
	#xchg
(
±r
,
v
Ë((
	`__ty≥of__
(*’å)))
	`__xchg
(()(v),’å),(*’å))))

	)

25 
	#ès
(
±r
Ë(
	`xchg
(’å),1))

	)

27 
	s__xchg_dummy
 { 
	ma
[100]; };

28 
	#__xg
(
x
Ë((
__xchg_dummy
 *)(x))

	)

40 
ölöe
 
	$__£t_64bô
 (* 
±r
,

41 
low
, 
high
)

43 
__asm__
 
	`__vﬁ©ûe__
 (

50 : "D"(
±r
),

51 "b"(
low
),

52 "c"(
high
)

54 
	}
}

56 
ölöe
 
	$__£t_64bô_c⁄°™t
 (*
±r
,

57 
vÆue
)

59 
	`__£t_64bô
(
±r
,()(
vÆue
), ()((value)>>32ULL));

60 
	}
}

61 
	#Œ_low
(
x
Ë*(((*)&(x))+0)

	)

62 
	#Œ_high
(
x
Ë*(((*)&(x))+1)

	)

64 
ölöe
 
	$__£t_64bô_v¨
 (*
±r
,

65 
vÆue
)

67 
	`__£t_64bô
(
±r
,
	`Œ_low
(
vÆue
), 
	`Œ_high
(value));

68 
	}
}

70 
	#£t_64bô
(
±r
,
vÆue
) \

71 (
	`__buûtö_c⁄°™t_p
(
vÆue
) ? \

72 
	`__£t_64bô_c⁄°™t
(
±r
, 
vÆue
) : \

73 
	`__£t_64bô_v¨
(
±r
, 
vÆue
Ë)

	)

75 
	#_£t_64bô
(
±r
,
vÆue
) \

76 (
	`__buûtö_c⁄°™t_p
(
vÆue
) ? \

77 
	`__£t_64bô
(
±r
, ()(
vÆue
), ()((value)>>32ULL) ) : \

78 
	`__£t_64bô
(
±r
, 
	`Œ_low
(
vÆue
), 
	`Œ_high
(vÆue)Ë)

	)

85 
ölöe
 
	$__xchg
(
x
, vﬁ©ûê* 
±r
, 
size
)

87 
size
) {

89 
__asm__
 
	`__vﬁ©ûe__
("xchgb %b0,%1"

90 :"=q" (
x
)

91 :"m" (*
	`__xg
(
±r
)), "0" (
x
)

95 
__asm__
 
	`__vﬁ©ûe__
("xchgw %w0,%1"

96 :"Ù" (
x
)

97 :"m" (*
	`__xg
(
±r
)), "0" (
x
)

101 
__asm__
 
	`__vﬁ©ûe__
("xchgl %0,%1"

102 :"Ù" (
x
)

103 :"m" (*
	`__xg
(
±r
)), "0" (
x
)

107  
x
;

108 
	}
}

116 #ifde‡
CONFIG_X86_CMPXCHG


117 
	#__HAVE_ARCH_CMPXCHG
 1

	)

119 
ölöe
 
	$__cmpxchg
(vﬁ©ûê*
±r
, 
ﬁd
,

120 
√w
, 
size
)

122 
¥ev
;

123 
size
) {

125 
__asm__
 
	`__vﬁ©ûe__
(
LOCK_PREFIX
 "cmpxchgb %b1,%2"

126 : "˜"(
¥ev
)

127 : "q"(
√w
), "m"(*
	`__xg
(
±r
)), "0"(
ﬁd
)

129  
¥ev
;

131 
__asm__
 
	`__vﬁ©ûe__
(
LOCK_PREFIX
 "cmpxchgw %w1,%2"

132 : "˜"(
¥ev
)

133 : "q"(
√w
), "m"(*
	`__xg
(
±r
)), "0"(
ﬁd
)

135  
¥ev
;

137 
__asm__
 
	`__vﬁ©ûe__
(
LOCK_PREFIX
 "cmpxchgl %1,%2"

138 : "˜"(
¥ev
)

139 : "q"(
√w
), "m"(*
	`__xg
(
±r
)), "0"(
ﬁd
)

141  
¥ev
;

143  
ﬁd
;

144 
	}
}

146 
	#cmpxchg
(
±r
,
o
,
n
)\

147 ((
	`__ty≥of__
(*(
±r
)))
	`__cmpxchg
(’å),()(
o
),\

148 ()(
n
),(*(
±r
))))

	)

172 
	#mb
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("lock;ádd»$0,0(%%e•)": : :"mem‹y")

	)

173 
	#rmb
(Ë
	`mb
()

	)

175 #ifde‡
CONFIG_X86_OOSTORE


176 
	#wmb
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("lock;ádd»$0,0(%%e•)": : :"mem‹y")

	)

178 
	#wmb
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("": : :"mem‹y")

	)

181 #ifde‡
CONFIG_SMP


182 
	#smp_mb
(Ë
	`mb
()

	)

183 
	#smp_rmb
(Ë
	`rmb
()

	)

184 
	#smp_wmb
(Ë
	`wmb
()

	)

186 
	#smp_mb
(Ë
	`b¨rõr
()

	)

187 
	#smp_rmb
(Ë
	`b¨rõr
()

	)

188 
	#smp_wmb
(Ë
	`b¨rõr
()

	)

191 
	#£t_mb
(
v¨
, 
vÆue
Ëdÿ{ 
	`xchg
(&v¨, vÆue); } 0)

	)

192 
	#£t_wmb
(
v¨
, 
vÆue
Ëdÿ{ v¨ = vÆue; 
	`wmb
(); } 0)

	)

195 
	#__ßve_Êags
(
x
Ë
__asm__
 
	`__vﬁ©ûe__
("pushÊ ;Ö›»%0":"=g" (x): )

	)

196 
	#__ª°‹e_Êags
(
x
Ë
__asm__
 
	`__vﬁ©ûe__
("push»%0 ;Ö›Ê": :"g" (x):"mem‹y", "cc")

	)

197 
	#__˛i
(Ë
__asm__
 
	`__vﬁ©ûe__
("˛i": : :"mem‹y")

	)

198 
	#__°i
(Ë
__asm__
 
	`__vﬁ©ûe__
("°i": : :"mem‹y")

	)

200 
	#ß„_hÆt
(Ë
__asm__
 
	`__vﬁ©ûe__
("°i; h…": : :"mem‹y")

	)

203 
	#loˇl_úq_ßve
(
x
Ë
__asm__
 
	`__vﬁ©ûe__
("pushÊ ;Ö›»%0 ; cli":"=g" (x): :"mem‹y")

	)

204 
	#loˇl_úq_ª°‹e
(
x
Ë
	`__ª°‹e_Êags
(x)

	)

205 
	#loˇl_úq_dißbÀ
(Ë
	`__˛i
()

	)

206 
	#loˇl_úq_íabÀ
(Ë
	`__°i
()

	)

208 #ifde‡
CONFIG_SMP


210 
__globÆ_˛i
();

211 
__globÆ_°i
();

212 
__globÆ_ßve_Êags
();

213 
__globÆ_ª°‹e_Êags
();

214 
	#˛i
(Ë
	`__globÆ_˛i
()

	)

215 
	#°i
(Ë
	`__globÆ_°i
()

	)

216 
	#ßve_Êags
(
x
Ë((x)=
	`__globÆ_ßve_Êags
())

	)

217 
	#ª°‹e_Êags
(
x
Ë
	`__globÆ_ª°‹e_Êags
(x)

	)

221 
	#˛i
(Ë
	`__˛i
()

	)

222 
	#°i
(Ë
	`__°i
()

	)

223 
	#ßve_Êags
(
x
Ë
	`__ßve_Êags
(x)

	)

224 
	#ª°‹e_Êags
(
x
Ë
	`__ª°‹e_Êags
(x)

	)

231 
	#HAVE_DISABLE_HLT


	)

232 
dißbÀ_h…
();

233 
íabÀ_h…
();

	@/usr/include/asm/types.h

1 #i‚de‡
_I386_TYPES_H


2 
	#_I386_TYPES_H


	)

4 
	tumode_t
;

11 
__sig√d__
 
	t__s8
;

12 
	t__u8
;

14 
__sig√d__
 
	t__s16
;

15 
	t__u16
;

17 
__sig√d__
 
	t__s32
;

18 
	t__u32
;

20 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

21 
__sig√d__
 
	t__s64
;

22 
	t__u64
;

28 #ifde‡
__KERNEL__


30 
	~<löux/c⁄fig.h
>

32 sig√d 
	ts8
;

33 
	tu8
;

35 sig√d 
	ts16
;

36 
	tu16
;

38 sig√d 
	ts32
;

39 
	tu32
;

41 sig√d 
	ts64
;

42 
	tu64
;

44 
	#BITS_PER_LONG
 32

	)

48 #ifde‡
CONFIG_HIGHMEM


49 
u64
 
	tdma_addr_t
;

51 
u32
 
	tdma_addr_t
;

53 
u64
 
	tdma64_addr_t
;

	@/usr/include/linux/binfmts.h

1 #i‚de‡
_LINUX_BINFMTS_H


2 
	#_LINUX_BINFMTS_H


	)

4 
	~<löux/±ø˚.h
>

5 
	~<löux/ˇ∑bûôy.h
>

12 
	#MAX_ARG_PAGES
 32

	)

15 
	#BINPRM_BUF_SIZE
 128

	)

	@/usr/include/linux/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

11 
	~<löux/byã‹dî/swab.h
>

13 
	#__c⁄°™t_ht⁄l
(
x
Ë
	`___c⁄°™t_swab32
((x))

	)

14 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((x))

	)

15 
	#__c⁄°™t_ht⁄s
(
x
Ë
	`___c⁄°™t_swab16
((x))

	)

16 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((x))

	)

17 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__u64
)(x))

	)

18 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(x))

	)

19 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__u32
)(x))

	)

20 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(x))

	)

21 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__u16
)(x))

	)

22 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(x))

	)

23 
	#__c⁄°™t_˝u_to_be64
(
x
Ë
	`___c⁄°™t_swab64
((x))

	)

24 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((x))

	)

25 
	#__c⁄°™t_˝u_to_be32
(
x
Ë
	`___c⁄°™t_swab32
((x))

	)

26 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((x))

	)

27 
	#__c⁄°™t_˝u_to_be16
(
x
Ë
	`___c⁄°™t_swab16
((x))

	)

28 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((x))

	)

29 
	#__˝u_to_À64
(
x
Ë((
__u64
)(x))

	)

30 
	#__À64_to_˝u
(
x
Ë((
__u64
)(x))

	)

31 
	#__˝u_to_À32
(
x
Ë((
__u32
)(x))

	)

32 
	#__À32_to_˝u
(
x
Ë((
__u32
)(x))

	)

33 
	#__˝u_to_À16
(
x
Ë((
__u16
)(x))

	)

34 
	#__À16_to_˝u
(
x
Ë((
__u16
)(x))

	)

35 
	#__˝u_to_be64
(
x
Ë
	`__swab64
((x))

	)

36 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((x))

	)

37 
	#__˝u_to_be32
(
x
Ë
	`__swab32
((x))

	)

38 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((x))

	)

39 
	#__˝u_to_be16
(
x
Ë
	`__swab16
((x))

	)

40 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((x))

	)

41 
	#__˝u_to_À64p
(
x
Ë(*(
__u64
*)(x))

	)

42 
	#__À64_to_˝up
(
x
Ë(*(
__u64
*)(x))

	)

43 
	#__˝u_to_À32p
(
x
Ë(*(
__u32
*)(x))

	)

44 
	#__À32_to_˝up
(
x
Ë(*(
__u32
*)(x))

	)

45 
	#__˝u_to_À16p
(
x
Ë(*(
__u16
*)(x))

	)

46 
	#__À16_to_˝up
(
x
Ë(*(
__u16
*)(x))

	)

47 
	#__˝u_to_be64p
(
x
Ë
	`__swab64p
((x))

	)

48 
	#__be64_to_˝up
(
x
Ë
	`__swab64p
((x))

	)

49 
	#__˝u_to_be32p
(
x
Ë
	`__swab32p
((x))

	)

50 
	#__be32_to_˝up
(
x
Ë
	`__swab32p
((x))

	)

51 
	#__˝u_to_be16p
(
x
Ë
	`__swab16p
((x))

	)

52 
	#__be16_to_˝up
(
x
Ë
	`__swab16p
((x))

	)

53 
	#__˝u_to_À64s
(
x
Ëdÿ{} 0)

	)

54 
	#__À64_to_˝us
(
x
Ëdÿ{} 0)

	)

55 
	#__˝u_to_À32s
(
x
Ëdÿ{} 0)

	)

56 
	#__À32_to_˝us
(
x
Ëdÿ{} 0)

	)

57 
	#__˝u_to_À16s
(
x
Ëdÿ{} 0)

	)

58 
	#__À16_to_˝us
(
x
Ëdÿ{} 0)

	)

59 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

60 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

61 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

62 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

63 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

64 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

66 
	~<löux/byã‹dî/gíîic.h
>

	@/usr/include/linux/cache.h

1 #i‚de‡
__LINUX_CACHE_H


2 
	#__LINUX_CACHE_H


	)

4 
	~<löux/c⁄fig.h
>

5 
	~<asm/ˇche.h
>

7 #i‚de‡
L1_CACHE_ALIGN


8 
	#L1_CACHE_ALIGN
(
x
Ë(((x)+(
L1_CACHE_BYTES
-1))&~(L1_CACHE_BYTES-1))

	)

11 #i‚de‡
SMP_CACHE_BYTES


12 
	#SMP_CACHE_BYTES
 
L1_CACHE_BYTES


	)

15 #i‚de‡
____ˇchñöe_Æig√d


16 
	#____ˇchñöe_Æig√d
 
	`__©åibuã__
((
	`__Æig√d__
(
SMP_CACHE_BYTES
)))

	)

19 #i‚de‡
____ˇchñöe_Æig√d_ö_smp


20 #ifde‡
CONFIG_SMP


21 
	#____ˇchñöe_Æig√d_ö_smp
 
____ˇchñöe_Æig√d


	)

23 
	#____ˇchñöe_Æig√d_ö_smp


	)

27 #i‚de‡
__ˇchñöe_Æig√d


28 #ifde‡
MODULE


29 
	#__ˇchñöe_Æig√d
 
____ˇchñöe_Æig√d


	)

31 
	#__ˇchñöe_Æig√d
 \

32 
	`__©åibuã__
((
	`__Æig√d__
(
SMP_CACHE_BYTES
), \

33 
	`__£˘i⁄__
(".d©a.ˇchñöe_Æig√d")))

	)

	@/usr/include/linux/compatmac.h

46 #i‚de‡
COMPATMAC_H


47 
	#COMPATMAC_H


	)

49 
	~<löux/vîsi⁄.h
>

51 #i‡
LINUX_VERSION_CODE
 < 0x020100

52 
	#TWO_ZERO


	)

54 #i‡
LINUX_VERSION_CODE
 < 0x020200

57 #i‡
LINUX_VERSION_CODE
 < 0x020300

58 
	#TWO_TWO


	)

60 
	#TWO_THREE


	)

65 #ifde‡
TWO_ZERO


72 
	#MAX_SCHEDULE_TIMEOUT
 (()(~0UL>>1))

	)

74 
	~<löux/bios32.h
>

76 
	#Gë_u£r
(
a
,
b
Ë®
	`gë_u£r
(b)

	)

77 
	#Put_u£r
(
a
,
b
Ë0,
	`put_u£r
◊,b)

	)

78 
	#c›y_to_u£r
(
a
,
b
,
c
Ë
	`mem˝y_tofs
◊,b,c)

	)

80 
ölöe
 
	$c›y_‰om_u£r
(*
to
,c⁄° *
‰om
, 
c
)

82 
	`mem˝y_‰omfs
(
to
, 
‰om
, 
c
);

84 
	}
}

86 
	#pci_¥e£¡
 
pcibios_¥e£¡


	)

87 
	#pci_ªad_c⁄fig_w‹d
 
pcibios_ªad_c⁄fig_w‹d


	)

88 
	#pci_ªad_c⁄fig_dw‹d
 
pcibios_ªad_c⁄fig_dw‹d


	)

90 
ölöe
 
	$gë_úq
 (
bus
, 
‚
)

92 
t
;

93 
	`pcibios_ªad_c⁄fig_byã
 (
bus
, 
‚
, 
PCI_INTERRUPT_LINE
, &
t
);

94  
t
;

95 
	}
}

97 
ölöe
 *
	$i‹em≠
(
ba£
, 
Àngth
)

99 i‡(
ba£
 < 0x100000)  (*)base;

100  
	`vªm≠
 (
ba£
, 
Àngth
);

101 
	}
}

103 
	#my_iounm≠
(
x
, 
b
Ë((()x<0x100000)?0:
	`v‰ì
 ((*)x))

	)

105 
	#ˇ∑bÀ
(
x
Ë
	`su£r
()

	)

107 
	#ây_Êù_buf„r_push
(
ây
Ë
	`queue_èsk
(&ây->
Êù
.
tqueue
, &
tq_timî
)

	)

108 
	#sig«l_≥ndög
(
cuºít
Ë(cuºít->
sig«l
 & ~cuºít->
blocked
)

	)

109 
	#scheduÀ_timeout
(
to
Ëdÿ{
cuºít
->
timeout
 = 
jiffõs
 + (to);
	`scheduÀ
 ();} 0)

	)

110 
	#time_a·î
(
t1
,
t2
Ë(((È1-t2Ë> 0)

	)

113 
	#ã°_™d_£t_bô
(
ƒ
, 
addr
Ë
	`£t_bô
“r,áddr)

	)

114 
	#ã°_™d_˛ór_bô
(
ƒ
, 
addr
Ë
	`˛ór_bô
“r,áddr)

	)

117 
	#ASYNC_SPD_SHI
 -1

	)

118 
	#ASYNC_SPD_WARP
 -1

	)

124 
	#drivî_«me
 
«me


	)

127 
	#TTY_HW_COOK_OUT
 14

	)

128 
	#TTY_HW_COOK_IN
 15

	)

131 
	#INT
 

	)

132 
	#NO_ERROR


	)

137 
	~<asm/uac˚ss.h
>

140 
	#Gë_u£r
(
a
,
b
Ë
	`gë_u£r
◊,b)

	)

141 
	#Put_u£r
(
a
,
b
Ë
	`put_u£r
◊,b)

	)

142 
	#gë_úq
(
pdev
Ëpdev->
úq


	)

144 
	#INT
 

	)

145 
	#NO_ERROR
 0

	)

147 
	#my_iounm≠
(
x
,
b
Ë(
	`iounm≠
((*)(b)))

	)

151 #i‚de‡
TWO_THREE


154 
	#waô_queue_hód_t
 
waô_queue
 *

	)

155 
	#DECLARE_MUTEX
(
«me
Ë
£m≠h‹e
Çamê
MUTEX


	)

156 
	#DECLARE_WAITQUEUE
(
waô
, 
cuºít
) \

157 
waô_queue
 
waô
 = { 
cuºít
, 
NULL
 }

	)

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/c⁄fig.h
>

10 
	~<löux/lökage.h
>

11 
	~<löux/limôs.h
>

12 
	~<löux/waô.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<löux/vfs.h
>

15 
	~<löux/√t.h
>

16 
	~<löux/kdev_t.h
>

17 
	~<löux/io˘l.h
>

18 
	~<löux/li°.h
>

19 
	~<löux/dˇche.h
>

20 
	~<löux/°©.h
>

21 
	~<löux/ˇche.h
>

22 
	~<löux/°ddef.h
>

23 
	~<löux/°rög.h
>

26 
	gpﬁl_èbÀ_°ru˘
;

40 #unde‡
NR_OPEN


41 
	#NR_OPEN
 (1024*1024Ë

	)

42 
	#INR_OPEN
 1024

	)

44 
	#BLOCK_SIZE_BITS
 10

	)

45 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

48 
	sfûes_°©_°ru˘
 {

49 
	mƒ_fûes
;

50 
	mƒ_‰ì_fûes
;

51 
	mmax_fûes
;

53 
fûes_°©_°ru˘
 
fûes_°©
;

55 
	söodes_°©_t
 {

56 
	mƒ_öodes
;

57 
	mƒ_unu£d
;

58 
	mdummy
[5];

60 
öodes_°©_t
 
öodes_°©
;

62 
Àa£s_íabÀ
, 
dú_nŸify_íabÀ
, 
Àa£_bªak_time
;

64 
	#NR_FILE
 8192

	)

65 
	#NR_RESERVED_FILES
 10

	)

66 
	#NR_SUPER
 256

	)

68 
	#MAY_EXEC
 1

	)

69 
	#MAY_WRITE
 2

	)

70 
	#MAY_READ
 4

	)

72 
	#FMODE_READ
 1

	)

73 
	#FMODE_WRITE
 2

	)

75 
	#READ
 0

	)

76 
	#WRITE
 1

	)

77 
	#READA
 2

	)

78 
	#SPECIAL
 4

	)

80 
	#SEL_IN
 1

	)

81 
	#SEL_OUT
 2

	)

82 
	#SEL_EX
 4

	)

85 
	#FS_REQUIRES_DEV
 1

	)

86 
	#FS_NO_DCACHE
 2

	)

87 
	#FS_NO_PRELIM
 4

	)

90 
	#FS_SINGLE
 8

	)

91 
	#FS_NOMOUNT
 16

	)

92 
	#FS_LITTER
 32

	)

93 
	#FS_ODD_RENAME
 32768

	)

99 
	#MS_RDONLY
 1

	)

100 
	#MS_NOSUID
 2

	)

101 
	#MS_NODEV
 4

	)

102 
	#MS_NOEXEC
 8

	)

103 
	#MS_SYNCHRONOUS
 16

	)

104 
	#MS_REMOUNT
 32

	)

105 
	#MS_MANDLOCK
 64

	)

106 
	#MS_NOATIME
 1024

	)

107 
	#MS_NODIRATIME
 2048

	)

108 
	#MS_BIND
 4096

	)

109 
	#MS_NOUSER
 (1<<31)

	)

114 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_NOATIME
|\

115 
MS_NODIRATIME
)

	)

120 
	#MS_MGC_VAL
 0xC0ED0000

	)

121 
	#MS_MGC_MSK
 0xffff0000

	)

125 
	#S_SYNC
 1

	)

126 
	#S_NOATIME
 2

	)

127 
	#S_QUOTA
 4

	)

128 
	#S_APPEND
 8

	)

129 
	#S_IMMUTABLE
 16

	)

130 
	#S_DEAD
 32

	)

131 
	#S_NOQUOTA
 64

	)

146 
	#__IS_FLG
(
öode
,
Êg
Ë((öode)->
i_sb
->
s_Êags
 & (Êg))

	)

148 
	#IS_RDONLY
(
öode
Ë((öode)->
i_sb
->
s_Êags
 & 
MS_RDONLY
)

	)

149 
	#IS_SYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
Ë|| ((öode)->
i_Êags
 & 
S_SYNC
))

	)

150 
	#IS_MANDLOCK
(
öode
Ë
	`__IS_FLG
(öode, 
MS_MANDLOCK
)

	)

152 
	#IS_QUOTAINIT
(
öode
Ë((öode)->
i_Êags
 & 
S_QUOTA
)

	)

153 
	#IS_NOQUOTA
(
öode
Ë((öode)->
i_Êags
 & 
S_NOQUOTA
)

	)

154 
	#IS_APPEND
(
öode
Ë((öode)->
i_Êags
 & 
S_APPEND
)

	)

155 
	#IS_IMMUTABLE
(
öode
Ë((öode)->
i_Êags
 & 
S_IMMUTABLE
)

	)

156 
	#IS_NOATIME
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_NOATIME
Ë|| ((öode)->
i_Êags
 & 
S_NOATIME
))

	)

157 
	#IS_NODIRATIME
(
öode
Ë
	`__IS_FLG
(öode, 
MS_NODIRATIME
)

	)

159 
	#IS_DEADDIR
(
öode
Ë((öode)->
i_Êags
 & 
S_DEAD
)

	)

164 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

165 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

166 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

167 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

168 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

169 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

170 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

171 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

172 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

173 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

174 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

175 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

177 
	#BLKPG
 
	`_IO
(0x12,105)

	)

178 
	#BLKELVGET
 
	`_IOR
(0x12,106,(
blkñv_io˘l_¨g_t
))

	)

179 
	#BLKELVSET
 
	`_IOW
(0x12,107,(
blkñv_io˘l_¨g_t
))

	)

183 
	#BLKGETLASTSECT
 
	`_IO
(0x12,108Ë

	)

184 
	#BLKSETLASTSECT
 
	`_IO
(0x12,109Ë

	)

186 
	#BLKBSZGET
 
	`_IOR
(0x12,112,())

	)

187 
	#BLKBSZSET
 
	`_IOW
(0x12,113,())

	)

189 
	#BMAP_IOCTL
 1

	)

190 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

191 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

	@/usr/include/linux/fs_struct.h

1 #i‚de‡
_LINUX_FS_STRUCT_H


2 
	#_LINUX_FS_STRUCT_H


	)

	@/usr/include/linux/init.h

1 #i‚de‡
_LINUX_INIT_H


2 
	#_LINUX_INIT_H


	)

4 
	~<löux/c⁄fig.h
>

41 #i‚de‡
MODULE


43 #i‚de‡
__ASSEMBLY__


48 (*
	töôˇŒ_t
)();

49 (*
	texôˇŒ_t
)();

51 
öôˇŒ_t
 
__öôˇŒ_°¨t
, 
__öôˇŒ_íd
;

53 
	#__öôˇŒ
(
‚
) \

54 
öôˇŒ_t
 
__öôˇŒ_
##
‚
 
__öô_ˇŒ
 = 
	)
fn

55 
	#__exôˇŒ
(
‚
) \

56 
exôˇŒ_t
 
__exôˇŒ_
##
‚
 
__exô_ˇŒ
 = 
	)
fn

61 
	skî√l_∑øm
 {

62 c⁄° *
°r
;

63 (*
£tup_func
)(*);

66 
kî√l_∑øm
 
__£tup_°¨t
, 
__£tup_íd
;

68 
	#__£tup
(
°r
, 
‚
) \

69 
__£tup_°r_
##
‚
[] 
__öôd©a
 = 
°r
; \

70 
kî√l_∑øm
 
__£tup_
##
‚
 
	`__©åibuã__
((
unu£d
)Ë
__öô£tup
 = { 
__£tup_°r_
##‚, f¿
	}

	)
}

78 
	#__öô
 
	`__©åibuã__
 ((
	`__£˘i⁄__
 (".ãxt.öô")))

	)

79 
	#__exô
 
	`__©åibuã__
 ((
unu£d
, 
	`__£˘i⁄__
(".ãxt.exô")))

	)

80 
	#__öôd©a
 
	`__©åibuã__
 ((
	`__£˘i⁄__
 (".d©a.öô")))

	)

81 
	#__exôd©a
 
	`__©åibuã__
 ((
unu£d
, 
	`__£˘i⁄__
 (".d©a.exô")))

	)

82 
	#__öô£tup
 
	`__©åibuã__
 ((
unu£d
,
	`__£˘i⁄__
 (".£tup.öô")))

	)

83 
	#__öô_ˇŒ
 
	`__©åibuã__
 ((
unu£d
,
	`__£˘i⁄__
 (".öôˇŒ.öô")))

	)

84 
	#__exô_ˇŒ
 
	`__©åibuã__
 ((
unu£d
,
	`__£˘i⁄__
 (".exôˇŒ.exô")))

	)

87 
	#__INIT
 .
£˘i⁄
 ".ãxt.öô","ax"

	)

88 
	#__FINIT
 .
¥evious


	)

89 
	#__INITDATA
 .
£˘i⁄
 ".d©a.öô","aw"

	)

101 
	#moduÀ_öô
(
x
Ë
	`__öôˇŒ
(x);

	)

112 
	#moduÀ_exô
(
x
Ë
	`__exôˇŒ
(x);

	)

116 
	#__öô


	)

117 
	#__exô


	)

118 
	#__öôd©a


	)

119 
	#__exôd©a


	)

120 
	#__öôˇŒ
(
‚
)

	)

122 
	#__INIT


	)

123 
	#__FINIT


	)

124 
	#__INITDATA


	)

131 (*
	t__öô_moduÀ_func_t
)();

132 (*
	t__˛ónup_moduÀ_func_t
)();

133 
	#moduÀ_öô
(
x
) \

134 
	`öô_moduÀ
(Ë
	`__©åibuã__
((
	`Æüs
(#x))); \

135 
ölöe
 
__öô_moduÀ_func_t
 
	`__öô_moduÀ_ölöe
() \

136 {  
x
; 
	}

	)
}

137 
	#moduÀ_exô
(
x
) \

138 
	`˛ónup_moduÀ
(Ë
	`__©åibuã__
((
	`Æüs
(#x))); \

139 
ölöe
 
__˛ónup_moduÀ_func_t
 
	`__˛ónup_moduÀ_ölöe
() \

140 {  
x
; }

	)

142 
	#__£tup
(
°r
,
func
Ë

	)

146 #ifde‡
CONFIG_HOTPLUG


147 
	#__devöô


	)

148 
	#__devöôd©a


	)

149 
	#__devexô


	)

150 
	#__devexôd©a


	)

152 
	#__devöô
 
__öô


	)

153 
	#__devöôd©a
 
__öôd©a


	)

154 
	#__devexô
 
__exô


	)

155 
	#__devexôd©a
 
__exôd©a


	)

	@/usr/include/linux/list.h

1 #i‚de‡
_LINUX_LIST_H


2 
	#_LINUX_LIST_H


	)

4 #i‡
deföed
(
__KERNEL__
Ë|| deföed(
_LVM_H_INCLUDE
)

6 
	~<löux/¥e„tch.h
>

18 
	sli°_hód
 {

19 
li°_hód
 *
	m√xt
, *
	m¥ev
;

22 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

24 
	#LIST_HEAD
(
«me
) \

25 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

27 
	#INIT_LIST_HEAD
(
±r
) do { \

28 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

29 } 0)

	)

37 
__ölöe__
 
	$__li°_add
(
li°_hód
 * 
√w
,

38 
li°_hód
 * 
¥ev
,

39 
li°_hód
 * 
√xt
)

41 
√xt
->
¥ev
 = 
√w
;

42 
√w
->
√xt
 =Çext;

43 
√w
->
¥ev
 =Örev;

44 
¥ev
->
√xt
 = 
√w
;

45 
	}
}

55 
__ölöe__
 
	$li°_add
(
li°_hód
 *
√w
, li°_hód *
hód
)

57 
	`__li°_add
(
√w
, 
hód
, hód->
√xt
);

58 
	}
}

68 
__ölöe__
 
	$li°_add_èû
(
li°_hód
 *
√w
, li°_hód *
hód
)

70 
	`__li°_add
(
√w
, 
hód
->
¥ev
, head);

71 
	}
}

80 
__ölöe__
 
	$__li°_dñ
(
li°_hód
 * 
¥ev
,

81 
li°_hód
 * 
√xt
)

83 
√xt
->
¥ev
 =Örev;

84 
¥ev
->
√xt
 =Çext;

85 
	}
}

92 
__ölöe__
 
	$li°_dñ
(
li°_hód
 *
íåy
)

94 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

95 
íåy
->
√xt
 =É¡ry->
¥ev
 = 0;

96 
	}
}

102 
__ölöe__
 
	$li°_dñ_öô
(
li°_hód
 *
íåy
)

104 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

105 
	`INIT_LIST_HEAD
(
íåy
);

106 
	}
}

112 
__ölöe__
 
	$li°_em±y
(
li°_hód
 *
hód
)

114  
hód
->
√xt
 == head;

115 
	}
}

122 
__ölöe__
 
	$li°_•li˚
(
li°_hód
 *
li°
, li°_hód *
hód
)

124 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

126 i‡(
fú°
 !
li°
) {

127 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

128 
li°_hód
 *
©
 = 
hód
->
√xt
;

130 
fú°
->
¥ev
 = 
hód
;

131 
hód
->
√xt
 = 
fú°
;

133 
œ°
->
√xt
 = 
©
;

134 
©
->
¥ev
 = 
œ°
;

136 
	}
}

144 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

145 ((
ty≥
 *)((*)(
±r
)-()(&(—y≥ *)0)->
membî
)))

	)

152 
	#li°_f‹_óch
(
pos
, 
hód
) \

153 
pos
 = (
hód
)->
√xt
, 
	`¥e„tch
(pos->next);Öos != (head); \

154 
pos
 =Öos->
√xt
, 
	`¥e„tch
’os->√xt))

	)

162 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

163 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

164 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

	@/usr/include/linux/modversions.h

1 #îr‹ 
ModuÀs
 
should
 
√vî
 
u£
 
kî√l
-
hódîs
 
sy°em
 headers,

2 #îr‹ 
but
 
øthî
 
hódîs
 
‰om
 
™
 
≠¥›rüã
 
kî√l
-
sour˚
 
∑ckage
.

3 #îr‹ 
Ch™ge
 -
I
/
u§
/
§c
/
löux
/
ö˛ude
 (
‹
 
simû¨
Ë
to


4 #îr‹ -
I
/
lib
/
moduÀs
/
$
(
u«me
 -
r
)/
buûd
/
ö˛ude


5 #îr‹ 
to
 
buûd
 
agaö°
 
the
 
cuºíéy
-
ru¬ög
 
kî√l
.

	@/usr/include/linux/mtd/cfi_endian.h

17 
	~<asm/byã‹dî.h
>

19 #i‚de‡
CONFIG_MTD_CFI_ADV_OPTIONS


21 
	#CFI_HOST_ENDIAN


	)

25 #ifde‡
CONFIG_MTD_CFI_NOSWAP


26 
	#CFI_HOST_ENDIAN


	)

29 #ifde‡
CONFIG_MTD_CFI_LE_BYTE_SWAP


30 
	#CFI_LITTLE_ENDIAN


	)

33 #ifde‡
CONFIG_MTD_CFI_BE_BYTE_SWAP


34 
	#CFI_BIG_ENDIAN


	)

37 #ifde‡
CONFIG_MTD_CFI_LART_BIT_SWAP


38 
	#CFI_LART_ENDIAN


	)

43 #i‡
deföed
(
CFI_LITTLE_ENDIAN
)

44 
	#˝u_to_cfi8
(
x
Ë(x)

	)

45 
	#cfi8_to_˝u
(
x
Ë(x)

	)

46 
	#˝u_to_cfi16
(
x
Ë
	`˝u_to_À16
(x)

	)

47 
	#˝u_to_cfi32
(
x
Ë
	`˝u_to_À32
(x)

	)

48 
	#cfi16_to_˝u
(
x
Ë
	`À16_to_˝u
(x)

	)

49 
	#cfi32_to_˝u
(
x
Ë
	`À32_to_˝u
(x)

	)

50 #ñi‡
deföed
 (
CFI_BIG_ENDIAN
)

51 
	#˝u_to_cfi8
(
x
Ë(x)

	)

52 
	#cfi8_to_˝u
(
x
Ë(x)

	)

53 
	#˝u_to_cfi16
(
x
Ë
	`˝u_to_be16
(x)

	)

54 
	#˝u_to_cfi32
(
x
Ë
	`˝u_to_be32
(x)

	)

55 
	#cfi16_to_˝u
(
x
Ë
	`be16_to_˝u
(x)

	)

56 
	#cfi32_to_˝u
(
x
Ë
	`be32_to_˝u
(x)

	)

57 #ñi‡
deföed
 (
CFI_HOST_ENDIAN
)

58 
	#˝u_to_cfi8
(
x
Ë(x)

	)

59 
	#cfi8_to_˝u
(
x
Ë(x)

	)

60 
	#˝u_to_cfi16
(
x
Ë(x)

	)

61 
	#˝u_to_cfi32
(
x
Ë(x)

	)

62 
	#cfi16_to_˝u
(
x
Ë(x)

	)

63 
	#cfi32_to_˝u
(
x
Ë(x)

	)

64 #ñi‡
deföed
 (
CFI_LART_ENDIAN
)

95 
	#˝u_to_cfi16
(
x
Ë(x)

	)

96 
	#cfi16_to_˝u
(
x
Ë(x)

	)

97 
ölöe
 
__u32
 
	$cfi32_to_˝u
(
__u32
 
x
)

99 
__u32
 
ªt
;

101 
ªt
 = (
x
 & 0x08009000) >> 11;

102 
ªt
 |(
x
 & 0x00002000) >> 10;

103 
ªt
 |(
x
 & 0x04004000) >> 8;

104 
ªt
 |(
x
 & 0x00000010) >> 4;

105 
ªt
 |(
x
 & 0x91000820) >> 3;

106 
ªt
 |(
x
 & 0x22080080) >> 2;

107 
ªt
 |(
x
 & 0x40000400);

108 
ªt
 |(
x
 & 0x00040040) << 1;

109 
ªt
 |(
x
 & 0x00110000) << 4;

110 
ªt
 |(
x
 & 0x00220100) << 5;

111 
ªt
 |(
x
 & 0x00800208) << 6;

112 
ªt
 |(
x
 & 0x00400004) << 9;

113 
ªt
 |(
x
 & 0x00000001) << 12;

114 
ªt
 |(
x
 & 0x00000002) << 13;

116  
ªt
;

117 
	}
}

118 
ölöe
 
__u32
 
	$˝u_to_cfi32
(
__u32
 
x
)

120 
__u32
 
ªt
;

122 
ªt
 = (
x
 & 0x00010012) << 11;

123 
ªt
 |(
x
 & 0x00000008) << 10;

124 
ªt
 |(
x
 & 0x00040040) << 8;

125 
ªt
 |(
x
 & 0x00000001) << 4;

126 
ªt
 |(
x
 & 0x12200104) << 3;

127 
ªt
 |(
x
 & 0x08820020) << 2;

128 
ªt
 |(
x
 & 0x40000400);

129 
ªt
 |(
x
 & 0x00080080) >> 1;

130 
ªt
 |(
x
 & 0x01100000) >> 4;

131 
ªt
 |(
x
 & 0x04402000) >> 5;

132 
ªt
 |(
x
 & 0x20008200) >> 6;

133 
ªt
 |(
x
 & 0x80000800) >> 9;

134 
ªt
 |(
x
 & 0x00001000) >> 12;

135 
ªt
 |(
x
 & 0x00004000) >> 13;

137  
ªt
;

138 
	}
}

140 #îr‹ 
No
 
CFI
 
ídü¬ess
 
deföed


	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/poll.h

1 #i‚de‡
_LINUX_POLL_H


2 
	#_LINUX_POLL_H


	)

4 
	~<asm/pﬁl.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

46 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/resource.h

1 #i‚de‡
_LINUX_RESOURCE_H


2 
	#_LINUX_RESOURCE_H


	)

4 
	~<löux/time.h
>

17 
	#RUSAGE_SELF
 0

	)

18 
	#RUSAGE_CHILDREN
 (-1)

	)

19 
	#RUSAGE_BOTH
 (-2Ë

	)

21 
	srußge
 {

22 
timevÆ
 
	mru_utime
;

23 
timevÆ
 
	mru_°ime
;

24 
	mru_maxrss
;

25 
	mru_ixrss
;

26 
	mru_idrss
;

27 
	mru_i§ss
;

28 
	mru_möÊt
;

29 
	mru_majÊt
;

30 
	mru_nsw≠
;

31 
	mru_öblock
;

32 
	mru_oublock
;

33 
	mru_msg¢d
;

34 
	mru_msgrcv
;

35 
	mru_nsig«ls
;

36 
	mru_nvcsw
;

37 
	mru_nivcsw
;

40 
	sæimô
 {

41 
	mæim_cur
;

42 
	mæim_max
;

45 
	#PRIO_MIN
 (-20)

	)

46 
	#PRIO_MAX
 20

	)

48 
	#PRIO_PROCESS
 0

	)

49 
	#PRIO_PGRP
 1

	)

50 
	#PRIO_USER
 2

	)

56 
	~<asm/ªsour˚.h
>

	@/usr/include/linux/securebits.h

1 #i‚de‡
_LINUX_SECUREBITS_H


2 
	#_LINUX_SECUREBITS_H
 1

	)

4 
	#SECUREBITS_DEFAULT
 0x00000000

	)

6 
£cuªbôs
;

14 
	#SECURE_NOROOT
 0

	)

19 
	#SECURE_NO_SETUID_FIXUP
 2

	)

26 
	#is£cuª
(
X
Ë–(1 << (X+1)Ë& 
SECUREBITS_DEFAULT
 ? \

27 (1 << (
X
)Ë& 
SECUREBITS_DEFAULT
 : \

28 (1 << (
X
)Ë& 
£cuªbôs
 )

	)

	@/usr/include/linux/sem.h

1 #i‚de‡
_LINUX_SEM_H


2 
	#_LINUX_SEM_H


	)

4 
	~<löux/ùc.h
>

7 
	#SEM_UNDO
 0x1000

	)

10 
	#GETPID
 11

	)

11 
	#GETVAL
 12

	)

12 
	#GETALL
 13

	)

13 
	#GETNCNT
 14

	)

14 
	#GETZCNT
 15

	)

15 
	#SETVAL
 16

	)

16 
	#SETALL
 17

	)

19 
	#SEM_STAT
 18

	)

20 
	#SEM_INFO
 19

	)

23 
	s£mid_ds
 {

24 
ùc_≥rm
 
	m£m_≥rm
;

25 
__kî√l_time_t
 
	m£m_Ÿime
;

26 
__kî√l_time_t
 
	m£m_˘ime
;

27 
£m
 *
	m£m_ba£
;

28 
£m_queue
 *
	m£m_≥ndög
;

29 
£m_queue
 **
	m£m_≥ndög_œ°
;

30 
£m_undo
 *
	mundo
;

31 
	m£m_n£ms
;

35 
	~<asm/£mbuf.h
>

38 
	s£mbuf
 {

39 
	m£m_num
;

40 
	m£m_›
;

41 
	m£m_Êg
;

45 
	u£mun
 {

46 
	mvÆ
;

47 
£mid_ds
 *
	mbuf
;

48 *
	m¨øy
;

49 
£möfo
 *
	m__buf
;

50 *
	m__∑d
;

53 
	s£möfo
 {

54 
	m£mm≠
;

55 
	m£mmni
;

56 
	m£mmns
;

57 
	m£mmnu
;

58 
	m£mm¶
;

59 
	m£m›m
;

60 
	m£mume
;

61 
	m£musz
;

62 
	m£mvmx
;

63 
	m£m´m
;

66 
	#SEMMNI
 128

	)

67 
	#SEMMSL
 250

	)

68 
	#SEMMNS
 (
SEMMNI
*
SEMMSL
Ë

	)

69 
	#SEMOPM
 32

	)

70 
	#SEMVMX
 32767

	)

73 
	#SEMUME
 
SEMOPM


	)

74 
	#SEMMNU
 
SEMMNS


	)

75 
	#SEMAEM
 (
SEMVMX
 >> 1Ë

	)

76 
	#SEMMAP
 
SEMMNS


	)

77 
	#SEMUSZ
 20

	)

	@/usr/include/linux/signal.h

1 #i‚de‡
_LINUX_SIGNAL_H


2 
	#_LINUX_SIGNAL_H


	)

4 
	~<asm/sig«l.h
>

5 
	~<asm/sigöfo.h
>

	@/usr/include/linux/smp.h

1 #i‚de‡
__LINUX_SMP_H


2 
	#__LINUX_SMP_H


	)

9 
	~<löux/c⁄fig.h
>

11 #ifde‡
CONFIG_SMP


13 
	~<löux/kî√l.h
>

14 
	~<asm/smp.h
>

24 
smp_£nd_°›
();

29 
FASTCALL
(
smp_£nd_ªscheduÀ
(
˝u
));

35 
smp_boŸ_˝us
();

40 
smp_ˇŒö
();

45 
smp_commí˚
();

50 
smp_ˇŒ_fun˘i⁄
 ((*
func
Ë(*
öfo
), *info,

51 
ªåy
, 
waô
);

56 
smp_thªads_ªady
;

58 
smp_num_˝us
;

60 vﬁ©ûê
smp_msg_d©a
;

61 vﬁ©ûê
smp_§c_˝u
;

62 vﬁ©ûê
smp_msg_id
;

64 
	#MSG_ALL_BUT_SELF
 0x8000

	)

65 
	#MSG_ALL
 0x8001

	)

67 
	#MSG_INVALIDATE_TLB
 0x0001

	)

68 
	#MSG_STOP_CPU
 0x0002

	)

71 
	#MSG_RESCHEDULE
 0x0003

	)

72 
	#MSG_CALL_FUNCTION
 0x0004

	)

80 
	#NR_CPUS
 1

	)

81 
	#smp_num_˝us
 1

	)

82 
	#smp_¥o˚ss‹_id
(Ë0

	)

83 
	#h¨d_smp_¥o˚ss‹_id
(Ë0

	)

84 
	#smp_thªads_ªady
 1

	)

85 
	#kî√l_lock
()

	)

86 
	#˝u_logiˇl_m≠
(
˝u
Ë0

	)

87 
	#˝u_numbî_m≠
(
˝u
Ë0

	)

88 
	#smp_ˇŒ_fun˘i⁄
(
func
,
öfo
,
ªåy
,
waô
Ë({ 0; 
	}
})

	)

89 
	#˝u_⁄löe_m≠
 1

	)

	@/usr/include/linux/threads.h

1 #i‚de‡
_LINUX_THREADS_H


2 
	#_LINUX_THREADS_H


	)

4 
	~<löux/c⁄fig.h
>

11 #ifde‡
CONFIG_SMP


12 
	#NR_CPUS
 32

	)

14 
	#NR_CPUS
 1

	)

17 
	#MIN_THREADS_LEFT_FOR_ROOT
 4

	)

22 
	#PID_MAX
 0x8000

	)

	@/usr/include/linux/time.h

1 #i‚de‡
_LINUX_TIME_H


2 
	#_LINUX_TIME_H


	)

4 
	~<asm/∑øm.h
>

5 
	~<löux/ty≥s.h
>

7 #i‚de‡
_STRUCT_TIMESPEC


8 
	#_STRUCT_TIMESPEC


	)

9 
	stime•ec
 {

10 
time_t
 
	mtv_£c
;

11 
	mtv_n£c
;

17 
	stimevÆ
 {

18 
time_t
 
	mtv_£c
;

19 
su£c⁄ds_t
 
	mtv_u£c
;

22 
	stimez⁄e
 {

23 
	mtz_möuãswe°
;

24 
	mtz_d°time
;

27 
	#NFDBITS
 
__NFDBITS


	)

29 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

30 
	#FD_SET
(
fd
,
fd£ç
Ë
	`__FD_SET
(fd,fd£ç)

	)

31 
	#FD_CLR
(
fd
,
fd£ç
Ë
	`__FD_CLR
(fd,fd£ç)

	)

32 
	#FD_ISSET
(
fd
,
fd£ç
Ë
	`__FD_ISSET
(fd,fd£ç)

	)

33 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
(fd£ç)

	)

39 
	#ITIMER_REAL
 0

	)

40 
	#ITIMER_VIRTUAL
 1

	)

41 
	#ITIMER_PROF
 2

	)

43 
	sôimî•ec
 {

44 
time•ec
 
	mô_öãrvÆ
;

45 
time•ec
 
	mô_vÆue
;

48 
	sôimîvÆ
 {

49 
timevÆ
 
	mô_öãrvÆ
;

50 
timevÆ
 
	mô_vÆue
;

	@/usr/include/linux/timer.h

1 #i‚de‡
_LINUX_TIMER_H


2 
	#_LINUX_TIMER_H


	)

14 
	~<löux/c⁄fig.h
>

15 
	~<löux/smp.h
>

16 
	~<löux/thªads.h
>

17 
	~<löux/li°.h
>

18 
	~<löux/•ölock.h
>

23 
	#TVN_BITS
 6

	)

24 
	#TVR_BITS
 8

	)

25 
	#TVN_SIZE
 (1 << 
TVN_BITS
)

	)

26 
	#TVR_SIZE
 (1 << 
TVR_BITS
)

	)

27 
	#TVN_MASK
 (
TVN_SIZE
 - 1)

	)

28 
	#TVR_MASK
 (
TVR_SIZE
 - 1)

	)

30 
	stvec_s
 {

31 
	mödex
;

32 
li°_hód
 
	mvec
[
TVN_SIZE
];

33 } 
	ttvec_t
;

35 
	stvec_roŸ_s
 {

36 
	mödex
;

37 
li°_hód
 
	mvec
[
TVR_SIZE
];

38 } 
	ttvec_roŸ_t
;

40 
	#NOOF_TVECS
 5

	)

42 
timî_li°
 
	ttimî_t
;

44 
	stvec_t_ba£_s
 {

45 
•ölock_t
 
	mlock
;

46 
	mtimî_jiffõs
;

47 vﬁ©ûê
timî_t
 * vﬁ©ûê
	mru¬ög_timî
;

48 
tvec_roŸ_t
 
	mtv1
;

49 
tvec_t
 
	mtv2
;

50 
tvec_t
 
	mtv3
;

51 
tvec_t
 
	mtv4
;

52 
tvec_t
 
	mtv5
;

53 } 
	ttvec_ba£_t
;

62 
	stimî_li°
 {

63 
li°_hód
 
	mli°
;

64 
	mexpúes
;

65 
	md©a
;

66 (*
	mfun˘i⁄
)();

67 
tvec_ba£_t
 *
	mba£
;

70 
add_timî
(
timî_t
 * 
timî
);

71 
dñ_timî
(
timî_t
 * 
timî
);

73 #ifde‡
CONFIG_SMP


74 
dñ_timî_sync
(
timî_t
 * 
timî
);

75 
sync_timîs
();

76 
	#timî_íãr
(
ba£
, 
t
Ëdÿ{ ba£->
ru¬ög_timî
 =Å; 
	`mb
(); } 0)

	)

77 
	#timî_exô
(
ba£
Ëdÿ{ ba£->
ru¬ög_timî
 = 
NULL
; } 0)

	)

78 
	#timî_is_ru¬ög
(
ba£
,
t
Ë(ba£->
ru¬ög_timî
 =t)

	)

79 
	#timî_synchr⁄ize
(
ba£
,
t
Ë
	`timî_is_ru¬ög
(ba£,t)Ë
	`b¨rõr
()

	)

81 
	#dñ_timî_sync
(
t
Ë
	`dñ_timî
—)

	)

82 
	#sync_timîs
(Ëdÿ{ } 0)

	)

83 
	#timî_íãr
(
ba£
,
t
Ëdÿ{ } 0)

	)

84 
	#timî_exô
(
ba£
Ëdÿ{ } 0)

	)

94 
mod_timî
(
timî_t
 *
timî
, 
expúes
);

96 
ô_ªÆ_‚
();

98 
öô_timîs
();

99 
run_loˇl_timîs
();

101 
tvec_ba£_t
 
tvec_ba£s
[
NR_CPUS
];

103 
ölöe
 
	$öô_timî
(
timî_t
 * 
timî
)

105 
timî
->
li°
.
√xt
 =Åimî->li°.
¥ev
 = 
NULL
;

106 
timî
->
ba£
 = 
tvec_ba£s
 + 0;

107 
	}
}

109 
	#TIMER_DEBUG
 0

	)

110 #i‡
TIMER_DEBUG


111 
	#CHECK_BASE
(
ba£
) \

112 i‡(
ba£
 && ((ba£ < 
tvec_ba£s
Ë|| (ba£ >tvec_ba£†+ 
NR_CPUS
))) \

113 
	`BUG
()

	)

115 
	#CHECK_BASE
(
ba£
)

	)

118 
ölöe
 
	$timî_≥ndög
(c⁄° 
timî_t
 * 
timî
)

120 
	`CHECK_BASE
(
timî
->
ba£
);

121  
timî
->
li°
.
√xt
 !
NULL
;

122 
	}
}

135 
	#time_a·î
(
a
,
b
Ë(()(bË- ()◊Ë< 0)

	)

136 
	#time_bef‹e
(
a
,
b
Ë
	`time_a·î
(b,a)

	)

138 
	#time_a·î_eq
(
a
,
b
Ë(()◊Ë- ()(bË>0)

	)

139 
	#time_bef‹e_eq
(
a
,
b
Ë
	`time_a·î_eq
(b,a)

	)

	@/usr/include/linux/times.h

1 #i‚de‡
_LINUX_TIMES_H


2 
	#_LINUX_TIMES_H


	)

4 
	stms
 {

5 
˛ock_t
 
	mtms_utime
;

6 
˛ock_t
 
	mtms_°ime
;

7 
˛ock_t
 
	mtms_cutime
;

8 
˛ock_t
 
	mtms_c°ime
;

	@/usr/include/linux/timex.h

51 #i‚de‡
_LINUX_TIMEX_H


52 
	#_LINUX_TIMEX_H


	)

54 
	~<asm/∑øm.h
>

63 #i‡
HZ
 >= 12 && HZ < 24

64 
	#SHIFT_HZ
 4

	)

65 #ñi‡
HZ
 >= 24 && HZ < 48

66 
	#SHIFT_HZ
 5

	)

67 #ñi‡
HZ
 >= 48 && HZ < 96

68 
	#SHIFT_HZ
 6

	)

69 #ñi‡
HZ
 >= 96 && HZ < 192

70 
	#SHIFT_HZ
 7

	)

71 #ñi‡
HZ
 >= 192 && HZ < 384

72 
	#SHIFT_HZ
 8

	)

73 #ñi‡
HZ
 >= 384 && HZ < 768

74 
	#SHIFT_HZ
 9

	)

75 #ñi‡
HZ
 >= 768 && HZ < 1536

76 
	#SHIFT_HZ
 10

	)

78 #îr‹ 
You
 
lo£
.

92 
	#SHIFT_KG
 6

	)

93 
	#SHIFT_KF
 16

	)

94 
	#SHIFT_KH
 2

	)

95 
	#MAXTC
 6

	)

111 
	#SHIFT_SCALE
 22

	)

112 
	#SHIFT_UPDATE
 (
SHIFT_KG
 + 
MAXTC
Ë

	)

113 
	#SHIFT_USEC
 16

	)

114 
	#FINEUSEC
 (1L << 
SHIFT_SCALE
Ë

	)

116 
	#MAXPHASE
 512000L

	)

117 
	#MAXFREQ
 (512L << 
SHIFT_USEC
Ë

	)

118 
	#MAXTIME
 (200L << 
PPS_AVG
Ë

	)

119 
	#MINSEC
 16L

	)

120 
	#MAXSEC
 1200L

	)

121 
	#NTP_PHASE_LIMIT
 (
MAXPHASE
 << 5Ë

	)

143 
	#PPS_AVG
 2

	)

144 
	#PPS_SHIFT
 2

	)

145 
	#PPS_SHIFTMAX
 8

	)

146 
	#PPS_VALID
 120

	)

147 
	#MAXGLITCH
 30

	)

152 
	~<asm/timex.h
>

155 
	#LATCH
 ((
CLOCK_TICK_RATE
 + 
HZ
/2Ë/ HZË

	)

161 
	stimex
 {

162 
	mmodes
;

163 
	moff£t
;

164 
	m‰eq
;

165 
	mmaxîr‹
;

166 
	me°îr‹
;

167 
	m°©us
;

168 
	mc⁄°™t
;

169 
	m¥ecisi⁄
;

170 
	mtﬁî™˚
;

173 
timevÆ
 
	mtime
;

174 
	mtick
;

176 
	mµs‰eq
;

177 
	mjôãr
;

178 
	mshi·
;

179 
	m°abû
;

180 
	mjô˙t
;

181 
	mˇl˙t
;

182 
	mîr˙t
;

183 
	m°b˙t
;

193 
	#ADJ_OFFSET
 0x0001

	)

194 
	#ADJ_FREQUENCY
 0x0002

	)

195 
	#ADJ_MAXERROR
 0x0004

	)

196 
	#ADJ_ESTERROR
 0x0008

	)

197 
	#ADJ_STATUS
 0x0010

	)

198 
	#ADJ_TIMECONST
 0x0020

	)

199 
	#ADJ_TICK
 0x4000

	)

200 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

203 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

204 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

205 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

206 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

207 
	#MOD_STATUS
 
ADJ_STATUS


	)

208 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

209 
	#MOD_CLKB
 
ADJ_TICK


	)

210 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

216 
	#STA_PLL
 0x0001

	)

217 
	#STA_PPSFREQ
 0x0002

	)

218 
	#STA_PPSTIME
 0x0004

	)

219 
	#STA_FLL
 0x0008

	)

221 
	#STA_INS
 0x0010

	)

222 
	#STA_DEL
 0x0020

	)

223 
	#STA_UNSYNC
 0x0040

	)

224 
	#STA_FREQHOLD
 0x0080

	)

226 
	#STA_PPSSIGNAL
 0x0100

	)

227 
	#STA_PPSJITTER
 0x0200

	)

228 
	#STA_PPSWANDER
 0x0400

	)

229 
	#STA_PPSERROR
 0x0800

	)

231 
	#STA_CLOCKERR
 0x1000

	)

233 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

234 
STA_PPSERROR
 | 
STA_CLOCKERR
Ë

	)

239 
	#TIME_OK
 0

	)

240 
	#TIME_INS
 1

	)

241 
	#TIME_DEL
 2

	)

242 
	#TIME_OOP
 3

	)

243 
	#TIME_WAIT
 4

	)

244 
	#TIME_ERROR
 5

	)

245 
	#TIME_BAD
 
TIME_ERROR


	)

	@/usr/include/linux/tty.h

1 #i‚de‡
_LINUX_TTY_H


2 
	#_LINUX_TTY_H


	)

12 
	#MIN_NR_CONSOLES
 1

	)

13 
	#MAX_NR_CONSOLES
 63

	)

14 
	#MAX_NR_USER_CONSOLES
 63

	)

	@/usr/include/linux/uio.h

1 #i‚de‡
__LINUX_UIO_H


2 
	#__LINUX_UIO_H


	)

4 
	~<löux/ty≥s.h
>

19 
	siovec


21 *
	miov_ba£
;

22 
__kî√l_size_t
 
	miov_Àn
;

29 
	#UIO_FASTIOV
 8

	)

30 
	#UIO_MAXIOV
 1024

	)

32 
	#UIO_MAXIOV
 16

	)

	@/usr/include/asm/cache.h

4 #i‚de‡
__ARCH_I386_CACHE_H


5 
	#__ARCH_I386_CACHE_H


	)

7 
	~<löux/c⁄fig.h
>

10 
	#L1_CACHE_SHIFT
 (
CONFIG_X86_L1_CACHE_SHIFT
)

	)

11 
	#L1_CACHE_BYTES
 (1 << 
L1_CACHE_SHIFT
)

	)

	@/usr/include/asm/cpufeature.h

7 #i‚de‡
__ASM_I386_CPUFEATURE_H


8 
	#__ASM_I386_CPUFEATURE_H


	)

11 
	#CPU_FEATURE_P
(
CAP
, 
FEATURE
Ë
	`ã°_bô
(CAP, 
X86_FEATURE_
##FEATURE ##
_BIT
)

	)

13 
	#NCAPINTS
 4

	)

16 
	#X86_FEATURE_FPU
 (0*32+ 0Ë

	)

17 
	#X86_FEATURE_VME
 (0*32+ 1Ë

	)

18 
	#X86_FEATURE_DE
 (0*32+ 2Ë

	)

19 
	#X86_FEATURE_PSE
 (0*32+ 3Ë

	)

20 
	#X86_FEATURE_TSC
 (0*32+ 4Ë

	)

21 
	#X86_FEATURE_MSR
 (0*32+ 5Ë

	)

22 
	#X86_FEATURE_PAE
 (0*32+ 6Ë

	)

23 
	#X86_FEATURE_MCE
 (0*32+ 7Ë

	)

24 
	#X86_FEATURE_CX8
 (0*32+ 8Ë

	)

25 
	#X86_FEATURE_APIC
 (0*32+ 9Ë

	)

26 
	#X86_FEATURE_SEP
 (0*32+11Ë

	)

27 
	#X86_FEATURE_MTRR
 (0*32+12Ë

	)

28 
	#X86_FEATURE_PGE
 (0*32+13Ë

	)

29 
	#X86_FEATURE_MCA
 (0*32+14Ë

	)

30 
	#X86_FEATURE_CMOV
 (0*32+15Ë

	)

31 
	#X86_FEATURE_PAT
 (0*32+16Ë

	)

32 
	#X86_FEATURE_PSE36
 (0*32+17Ë

	)

33 
	#X86_FEATURE_PN
 (0*32+18Ë

	)

34 
	#X86_FEATURE_CLFLSH
 (0*32+19Ë

	)

35 
	#X86_FEATURE_DTES
 (0*32+21Ë

	)

36 
	#X86_FEATURE_ACPI
 (0*32+22Ë

	)

37 
	#X86_FEATURE_MMX
 (0*32+23Ë

	)

38 
	#X86_FEATURE_FXSR
 (0*32+24Ë

	)

40 
	#X86_FEATURE_XMM
 (0*32+25Ë

	)

41 
	#X86_FEATURE_XMM2
 (0*32+26Ë

	)

42 
	#X86_FEATURE_SELFSNOOP
 (0*32+27Ë

	)

43 
	#X86_FEATURE_ACC
 (0*32+29Ë

	)

44 
	#X86_FEATURE_IA64
 (0*32+30Ë

	)

48 
	#X86_FEATURE_SYSCALL
 (1*32+11Ë

	)

49 
	#X86_FEATURE_MMXEXT
 (1*32+22Ë

	)

50 
	#X86_FEATURE_LM
 (1*32+29Ë

	)

51 
	#X86_FEATURE_3DNOWEXT
 (1*32+30Ë

	)

52 
	#X86_FEATURE_3DNOW
 (1*32+31Ë

	)

55 
	#X86_FEATURE_RECOVERY
 (2*32+ 0Ë

	)

56 
	#X86_FEATURE_LONGRUN
 (2*32+ 1Ë

	)

57 
	#X86_FEATURE_LRTI
 (2*32+ 3Ë

	)

61 
	#X86_FEATURE_CXMMX
 (3*32+ 0Ë

	)

62 
	#X86_FEATURE_K6_MTRR
 (3*32+ 1Ë

	)

63 
	#X86_FEATURE_CYRIX_ARR
 (3*32+ 2Ë

	)

64 
	#X86_FEATURE_CENTAUR_MCR
 (3*32+ 3Ë

	)

	@/usr/include/asm/math_emu.h

1 #i‚de‡
_I386_MATH_EMU_H


2 
	#_I386_MATH_EMU_H


	)

4 
	~<asm/sigc⁄ãxt.h
>

6 
ª°‹e_i387_so·
(*
s387
, 
_Â°©e
 *
buf
);

7 
ßve_i387_so·
(*
s387
, 
_Â°©e
 * 
buf
);

13 
	söfo
 {

14 
	m___‹ig_eù
;

15 
	m___ebx
;

16 
	m___ecx
;

17 
	m___edx
;

18 
	m___esi
;

19 
	m___edi
;

20 
	m___ebp
;

21 
	m___óx
;

22 
	m___ds
;

23 
	m___es
;

24 
	m___‹ig_óx
;

25 
	m___eù
;

26 
	m___cs
;

27 
	m___eÊags
;

28 
	m___e•
;

29 
	m___ss
;

30 
	m___vm86_es
;

31 
	m___vm86_ds
;

32 
	m___vm86_fs
;

33 
	m___vm86_gs
;

	@/usr/include/asm/poll.h

1 #i‚de‡
__i386_POLL_H


2 
	#__i386_POLL_H


	)

5 
	#POLLIN
 0x0001

	)

6 
	#POLLPRI
 0x0002

	)

7 
	#POLLOUT
 0x0004

	)

8 
	#POLLERR
 0x0008

	)

9 
	#POLLHUP
 0x0010

	)

10 
	#POLLNVAL
 0x0020

	)

13 
	#POLLRDNORM
 0x0040

	)

14 
	#POLLRDBAND
 0x0080

	)

15 
	#POLLWRNORM
 0x0100

	)

16 
	#POLLWRBAND
 0x0200

	)

17 
	#POLLMSG
 0x0400

	)

19 
	spﬁlfd
 {

20 
	mfd
;

21 
	mevíts
;

22 
	mªvíts
;

	@/usr/include/asm/posix_types.h

1 #i‚de‡
__ARCH_I386_POSIX_TYPES_H


2 
	#__ARCH_I386_POSIX_TYPES_H


	)

10 
	t__kî√l_dev_t
;

11 
	t__kî√l_öo_t
;

12 
	t__kî√l_mode_t
;

13 
	t__kî√l_∆ök_t
;

14 
	t__kî√l_off_t
;

15 
	t__kî√l_pid_t
;

16 
	t__kî√l_ùc_pid_t
;

17 
	t__kî√l_uid_t
;

18 
	t__kî√l_gid_t
;

19 
	t__kî√l_size_t
;

20 
	t__kî√l_ssize_t
;

21 
	t__kî√l_±rdiff_t
;

22 
	t__kî√l_time_t
;

23 
	t__kî√l_su£c⁄ds_t
;

24 
	t__kî√l_˛ock_t
;

25 
	t__kî√l_daddr_t
;

26 * 
	t__kî√l_ˇddr_t
;

27 
	t__kî√l_uid16_t
;

28 
	t__kî√l_gid16_t
;

29 
	t__kî√l_uid32_t
;

30 
	t__kî√l_gid32_t
;

32 
	t__kî√l_ﬁd_uid_t
;

33 
	t__kî√l_ﬁd_gid_t
;

35 #ifde‡
__GNUC__


36 
	t__kî√l_loff_t
;

40 #i‡
deföed
(
__KERNEL__
Ë|| deföed(
__USE_ALL
)

41 
	mvÆ
[2];

43 
	m__vÆ
[2];

45 } 
	t__kî√l_fsid_t
;

47 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

49 #unde‡
__FD_SET


50 
	#__FD_SET
(
fd
,
fd£ç
) \

51 
__asm__
 
	`__vﬁ©ûe__
("btsl %1,%0": \

52 "=m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
)):"r" ((Ë(
fd
)))

	)

54 #unde‡
__FD_CLR


55 
	#__FD_CLR
(
fd
,
fd£ç
) \

56 
__asm__
 
	`__vﬁ©ûe__
("btrl %1,%0": \

57 "=m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
)):"r" ((Ë(
fd
)))

	)

59 #unde‡
__FD_ISSET


60 
	#__FD_ISSET
(
fd
,
fd£ç
Ë(
	`__exãnsi⁄__
 ({ \

61 
__ªsu…
; \

62 
__asm__
 
	`__vﬁ©ûe__
("btl %1,%2 ; setb %0" \

63 :"=q" (
__ªsu…
Ë:"r" ((Ë(
fd
)), \

64 "m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
))); \

65 
__ªsu…
; }))

	)

67 #unde‡
__FD_ZERO


68 
	#__FD_ZERO
(
fd£ç
) \

70 
__d0
, 
__d1
; \

71 
__asm__
 
	`__vﬁ©ûe__
("cld ;Ñep ; stosl" \

72 :"=m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
)), \

73 "=&c" (
__d0
), "=&D" (
__d1
) \

74 :"a" (0), "1" (
__FDSET_LONGS
), \

75 "2" ((
__kî√l_fd_£t
 *Ë(
fd£ç
)) : "memory"); \

76 } 0)

	)

	@/usr/include/asm/resource.h

1 #i‚de‡
_I386_RESOURCE_H


2 
	#_I386_RESOURCE_H


	)

8 
	#RLIMIT_CPU
 0

	)

9 
	#RLIMIT_FSIZE
 1

	)

10 
	#RLIMIT_DATA
 2

	)

11 
	#RLIMIT_STACK
 3

	)

12 
	#RLIMIT_CORE
 4

	)

13 
	#RLIMIT_RSS
 5

	)

14 
	#RLIMIT_NPROC
 6

	)

15 
	#RLIMIT_NOFILE
 7

	)

16 
	#RLIMIT_MEMLOCK
 8

	)

17 
	#RLIMIT_AS
 9

	)

18 
	#RLIMIT_LOCKS
 10

	)

20 
	#RLIM_NLIMITS
 11

	)

26 
	#RLIM_INFINITY
 (~0UL)

	)

	@/usr/include/asm/segment.h

1 #i‚de‡
_ASM_SEGMENT_H


2 
	#_ASM_SEGMENT_H


	)

4 
	#__KERNEL_CS
 0x10

	)

5 
	#__KERNEL_DS
 0x18

	)

7 
	#__USER_CS
 0x23

	)

8 
	#__USER_DS
 0x2B

	)

	@/usr/include/asm/sembuf.h

1 #i‚de‡
_I386_SEMBUF_H


2 
	#_I386_SEMBUF_H


	)

14 
	s£mid64_ds
 {

15 
ùc64_≥rm
 
	m£m_≥rm
;

16 
__kî√l_time_t
 
	m£m_Ÿime
;

17 
	m__unu£d1
;

18 
__kî√l_time_t
 
	m£m_˘ime
;

19 
	m__unu£d2
;

20 
	m£m_n£ms
;

21 
	m__unu£d3
;

22 
	m__unu£d4
;

	@/usr/include/asm/sigcontext.h

1 #i‚de‡
_ASMi386_SIGCONTEXT_H


2 
	#_ASMi386_SIGCONTEXT_H


	)

18 
	s_Âªg
 {

19 
	msignifiˇnd
[4];

20 
	mexp⁄ít
;

23 
	s_Âxªg
 {

24 
	msignifiˇnd
[4];

25 
	mexp⁄ít
;

26 
	m∑ddög
[3];

29 
	s_xmmªg
 {

30 
	mñemít
[4];

33 
	s_Â°©e
 {

35 
	mcw
;

36 
	msw
;

37 
	mèg
;

38 
	mùoff
;

39 
	mcs£l
;

40 
	md©aoff
;

41 
	md©a£l
;

42 
_Âªg
 
	m_°
[8];

43 
	m°©us
;

44 
	mmagic
;

47 
	m_fx§_ív
[6];

48 
	mmxc§
;

49 
	mª£rved
;

50 
_Âxªg
 
	m_fx§_°
[8];

51 
_xmmªg
 
	m_xmm
[8];

52 
	m∑ddög
[56];

55 
	#X86_FXSR_MAGIC
 0x0000

	)

57 
	ssigc⁄ãxt
 {

58 
	mgs
, 
	m__gsh
;

59 
	mfs
, 
	m__fsh
;

60 
	mes
, 
	m__esh
;

61 
	mds
, 
	m__dsh
;

62 
	medi
;

63 
	mesi
;

64 
	mebp
;

65 
	me•
;

66 
	mebx
;

67 
	medx
;

68 
	mecx
;

69 
	móx
;

70 
	må≠no
;

71 
	mîr
;

72 
	meù
;

73 
	mcs
, 
	m__csh
;

74 
	meÊags
;

75 
	me•_©_sig«l
;

76 
	mss
, 
	m__ssh
;

77 
_Â°©e
 * 
	mÂ°©e
;

78 
	mﬁdmask
;

79 
	m¸2
;

	@/usr/include/asm/siginfo.h

1 #i‚de‡
_I386_SIGINFO_H


2 
	#_I386_SIGINFO_H


	)

4 
	~<löux/ty≥s.h
>

8 
	usigvÆ
 {

9 
	msivÆ_öt
;

10 *
	msivÆ_±r
;

11 } 
	tsigvÆ_t
;

13 
	#SI_MAX_SIZE
 128

	)

14 
	#SI_PAD_SIZE
 ((
SI_MAX_SIZE
/()Ë- 3)

	)

16 
	ssigöfo
 {

17 
	msi_signo
;

18 
	msi_î∫o
;

19 
	msi_code
;

22 
	m_∑d
[
SI_PAD_SIZE
];

26 
pid_t
 
	m_pid
;

27 
uid_t
 
	m_uid
;

28 } 
	m_kûl
;

32 
	m_timî1
;

33 
	m_timî2
;

34 } 
	m_timî
;

38 
pid_t
 
	m_pid
;

39 
uid_t
 
	m_uid
;

40 
sigvÆ_t
 
	m_sigvÆ
;

41 } 
	m_π
;

45 
pid_t
 
	m_pid
;

46 
uid_t
 
	m_uid
;

47 
	m_°©us
;

48 
˛ock_t
 
	m_utime
;

49 
˛ock_t
 
	m_°ime
;

50 } 
	m_sigchld
;

54 *
	m_addr
;

55 } 
	m_sigÁu…
;

59 
	m_b™d
;

60 
	m_fd
;

61 } 
	m_sigpﬁl
;

62 } 
	m_sifõlds
;

63 } 
	tsigöfo_t
;

68 
	#si_pid
 
_sifõlds
.
_kûl
.
_pid


	)

69 
	#si_uid
 
_sifõlds
.
_kûl
.
_uid


	)

70 
	#si_°©us
 
_sifõlds
.
_sigchld
.
_°©us


	)

71 
	#si_utime
 
_sifõlds
.
_sigchld
.
_utime


	)

72 
	#si_°ime
 
_sifõlds
.
_sigchld
.
_°ime


	)

73 
	#si_vÆue
 
_sifõlds
.
_π
.
_sigvÆ


	)

74 
	#si_öt
 
_sifõlds
.
_π
.
_sigvÆ
.
sivÆ_öt


	)

75 
	#si_±r
 
_sifõlds
.
_π
.
_sigvÆ
.
sivÆ_±r


	)

76 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
_addr


	)

77 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
_b™d


	)

78 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
_fd


	)

80 #ifde‡
__KERNEL__


81 
	#__SI_MASK
 0xffff0000

	)

82 
	#__SI_KILL
 (0 << 16)

	)

83 
	#__SI_TIMER
 (1 << 16)

	)

84 
	#__SI_POLL
 (2 << 16)

	)

85 
	#__SI_FAULT
 (3 << 16)

	)

86 
	#__SI_CHLD
 (4 << 16)

	)

87 
	#__SI_RT
 (5 << 16)

	)

88 
	#__SI_CODE
(
T
,
N
Ë((TË<< 16 | ((NË& 0xffff))

	)

90 
	#__SI_KILL
 0

	)

91 
	#__SI_TIMER
 0

	)

92 
	#__SI_POLL
 0

	)

93 
	#__SI_FAULT
 0

	)

94 
	#__SI_CHLD
 0

	)

95 
	#__SI_RT
 0

	)

96 
	#__SI_CODE
(
T
,
N
Ë(N)

	)

103 
	#SI_USER
 0

	)

104 
	#SI_KERNEL
 0x80

	)

105 
	#SI_QUEUE
 -1

	)

106 
	#SI_TIMER
 
	`__SI_CODE
(
__SI_TIMER
,-2Ë

	)

107 
	#SI_MESGQ
 -3

	)

108 
	#SI_ASYNCIO
 -4

	)

109 
	#SI_SIGIO
 -5

	)

111 
	#SI_FROMUSER
(
sùå
Ë((sùå)->
si_code
 <0)

	)

112 
	#SI_FROMKERNEL
(
sùå
Ë((sùå)->
si_code
 > 0)

	)

117 
	#ILL_ILLOPC
 (
__SI_FAULT
|1Ë

	)

118 
	#ILL_ILLOPN
 (
__SI_FAULT
|2Ë

	)

119 
	#ILL_ILLADR
 (
__SI_FAULT
|3Ë

	)

120 
	#ILL_ILLTRP
 (
__SI_FAULT
|4Ë

	)

121 
	#ILL_PRVOPC
 (
__SI_FAULT
|5Ë

	)

122 
	#ILL_PRVREG
 (
__SI_FAULT
|6Ë

	)

123 
	#ILL_COPROC
 (
__SI_FAULT
|7Ë

	)

124 
	#ILL_BADSTK
 (
__SI_FAULT
|8Ë

	)

125 
	#NSIGILL
 8

	)

130 
	#FPE_INTDIV
 (
__SI_FAULT
|1Ë

	)

131 
	#FPE_INTOVF
 (
__SI_FAULT
|2Ë

	)

132 
	#FPE_FLTDIV
 (
__SI_FAULT
|3Ë

	)

133 
	#FPE_FLTOVF
 (
__SI_FAULT
|4Ë

	)

134 
	#FPE_FLTUND
 (
__SI_FAULT
|5Ë

	)

135 
	#FPE_FLTRES
 (
__SI_FAULT
|6Ë

	)

136 
	#FPE_FLTINV
 (
__SI_FAULT
|7Ë

	)

137 
	#FPE_FLTSUB
 (
__SI_FAULT
|8Ë

	)

138 
	#NSIGFPE
 8

	)

143 
	#SEGV_MAPERR
 (
__SI_FAULT
|1Ë

	)

144 
	#SEGV_ACCERR
 (
__SI_FAULT
|2Ë

	)

145 
	#NSIGSEGV
 2

	)

150 
	#BUS_ADRALN
 (
__SI_FAULT
|1Ë

	)

151 
	#BUS_ADRERR
 (
__SI_FAULT
|2Ë

	)

152 
	#BUS_OBJERR
 (
__SI_FAULT
|3Ë

	)

153 
	#NSIGBUS
 3

	)

158 
	#TRAP_BRKPT
 (
__SI_FAULT
|1Ë

	)

159 
	#TRAP_TRACE
 (
__SI_FAULT
|2Ë

	)

160 
	#NSIGTRAP
 2

	)

165 
	#CLD_EXITED
 (
__SI_CHLD
|1Ë

	)

166 
	#CLD_KILLED
 (
__SI_CHLD
|2Ë

	)

167 
	#CLD_DUMPED
 (
__SI_CHLD
|3Ë

	)

168 
	#CLD_TRAPPED
 (
__SI_CHLD
|4Ë

	)

169 
	#CLD_STOPPED
 (
__SI_CHLD
|5Ë

	)

170 
	#CLD_CONTINUED
 (
__SI_CHLD
|6Ë

	)

171 
	#NSIGCHLD
 6

	)

176 
	#POLL_IN
 (
__SI_POLL
|1Ë

	)

177 
	#POLL_OUT
 (
__SI_POLL
|2Ë

	)

178 
	#POLL_MSG
 (
__SI_POLL
|3Ë

	)

179 
	#POLL_ERR
 (
__SI_POLL
|4Ë

	)

180 
	#POLL_PRI
 (
__SI_POLL
|5Ë

	)

181 
	#POLL_HUP
 (
__SI_POLL
|6Ë

	)

182 
	#NSIGPOLL
 6

	)

192 
	#SIGEV_SIGNAL
 0

	)

193 
	#SIGEV_NONE
 1

	)

194 
	#SIGEV_THREAD
 2

	)

196 
	#SIGEV_MAX_SIZE
 64

	)

197 
	#SIGEV_PAD_SIZE
 ((
SIGEV_MAX_SIZE
/()Ë- 3)

	)

199 
	ssigevít
 {

200 
sigvÆ_t
 
	msigev_vÆue
;

201 
	msigev_signo
;

202 
	msigev_nŸify
;

204 
	m_∑d
[
SIGEV_PAD_SIZE
];

207 (*
	m_fun˘i⁄
)(
	msigvÆ_t
);

208 *
	m_©åibuã
;

209 } 
	m_sigev_thªad
;

210 } 
	m_sigev_un
;

211 } 
	tsigevít_t
;

213 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

214 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

	@/usr/include/asm/signal.h

1 #i‚de‡
_ASMi386_SIGNAL_H


2 
	#_ASMi386_SIGNAL_H


	)

4 
	~<löux/ty≥s.h
>

7 
	gsigöfo
;

9 
	#SIGHUP
 1

	)

10 
	#SIGINT
 2

	)

11 
	#SIGQUIT
 3

	)

12 
	#SIGILL
 4

	)

13 
	#SIGTRAP
 5

	)

14 
	#SIGABRT
 6

	)

15 
	#SIGIOT
 6

	)

16 
	#SIGBUS
 7

	)

17 
	#SIGFPE
 8

	)

18 
	#SIGKILL
 9

	)

19 
	#SIGUSR1
 10

	)

20 
	#SIGSEGV
 11

	)

21 
	#SIGUSR2
 12

	)

22 
	#SIGPIPE
 13

	)

23 
	#SIGALRM
 14

	)

24 
	#SIGTERM
 15

	)

25 
	#SIGSTKFLT
 16

	)

26 
	#SIGCHLD
 17

	)

27 
	#SIGCONT
 18

	)

28 
	#SIGSTOP
 19

	)

29 
	#SIGTSTP
 20

	)

30 
	#SIGTTIN
 21

	)

31 
	#SIGTTOU
 22

	)

32 
	#SIGURG
 23

	)

33 
	#SIGXCPU
 24

	)

34 
	#SIGXFSZ
 25

	)

35 
	#SIGVTALRM
 26

	)

36 
	#SIGPROF
 27

	)

37 
	#SIGWINCH
 28

	)

38 
	#SIGIO
 29

	)

39 
	#SIGPOLL
 
SIGIO


	)

43 
	#SIGPWR
 30

	)

44 
	#SIGSYS
 31

	)

45 
	#SIGUNUSED
 31

	)

48 
	#SIGRTMIN
 32

	)

49 
	#SIGRTMAX
 (
_NSIG
-1)

	)

65 
	#SA_NOCLDSTOP
 0x00000001

	)

66 
	#SA_NOCLDWAIT
 0x00000002

	)

67 
	#SA_SIGINFO
 0x00000004

	)

68 
	#SA_ONSTACK
 0x08000000

	)

69 
	#SA_RESTART
 0x10000000

	)

70 
	#SA_NODEFER
 0x40000000

	)

71 
	#SA_RESETHAND
 0x80000000

	)

73 
	#SA_NOMASK
 
SA_NODEFER


	)

74 
	#SA_ONESHOT
 
SA_RESETHAND


	)

75 
	#SA_INTERRUPT
 0x20000000

	)

77 
	#SA_RESTORER
 0x04000000

	)

82 
	#SS_ONSTACK
 1

	)

83 
	#SS_DISABLE
 2

	)

85 
	#MINSIGSTKSZ
 2048

	)

86 
	#SIGSTKSZ
 8192

	)

89 
	#SIG_BLOCK
 0

	)

90 
	#SIG_UNBLOCK
 1

	)

91 
	#SIG_SETMASK
 2

	)

94 (*
	t__sigh™dÀr_t
)();

96 
	#SIG_DFL
 ((
__sigh™dÀr_t
)0Ë

	)

97 
	#SIG_IGN
 ((
__sigh™dÀr_t
)1Ë

	)

98 
	#SIG_ERR
 ((
__sigh™dÀr_t
)-1Ë

	)

102 
	ssiga˘i⁄
 {

104 
__sigh™dÀr_t
 
_ß_h™dÀr
;

105 (*
_ß_siga˘i⁄
)(, 
sigöfo
 *, *);

106 } 
_u
;

107 
sig£t_t
 
ß_mask
;

108 
ß_Êags
;

109 (*
ß_ª°‹î
)();

112 
	#ß_h™dÀr
 
_u
.
_ß_h™dÀr


	)

113 
	#ß_siga˘i⁄
 
_u
.
_ß_siga˘i⁄


	)

116 
	ssigÆt°ack
 {

117 *
ss_•
;

118 
ss_Êags
;

119 
size_t
 
ss_size
;

120 } 
	t°ack_t
;

	@/usr/include/asm/smp.h

1 #i‚de‡
__ASM_SMP_H


2 
	#__ASM_SMP_H


	)

7 #i‚de‡
ASSEMBLY


8 
	~<löux/c⁄fig.h
>

9 
	~<löux/thªads.h
>

10 
	~<löux/±ø˚.h
>

13 #ifde‡
CONFIG_X86_LOCAL_APIC


14 #i‚de‡
ASSEMBLY


15 
	~<asm/fixm≠.h
>

16 
	~<asm/bô›s.h
>

17 
	~<asm/mp•ec.h
>

18 #ifde‡
CONFIG_X86_IO_APIC


19 
	~<asm/io_≠ic.h
>

21 
	~<asm/≠ic.h
>

25 #ifde‡
CONFIG_SMP


26 #i‚de‡
ASSEMBLY


32 
smp_Æloc_mem‹y
();

33 
phys_˝u_¥e£¡_m≠
;

34 
˝u_⁄löe_m≠
;

35 vﬁ©ûê
smp_övÆid©e_√eded
;

36 
pic_mode
;

37 
smp_Êush_éb
();

38 
smp_mesßge_úq
(
˝l
, *
dev_id
, 
±_ªgs
 *
ªgs
);

39 
smp_£nd_ªscheduÀ
(
˝u
);

40 
smp_övÆid©e_rcv
();

41 (*
mår_hook
) ();

42 
	`z≠_low_m≠pögs
 ();

49 
ölöe
 
	$˝u_logiˇl_m≠
(
˝u
)

51  
˝u
;

52 
	}
}

53 
ölöe
 
	$˝u_numbî_m≠
(
˝u
)

55  
˝u
;

56 
	}
}

62 vﬁ©ûê
x86_≠icid_to_˝u
[
NR_CPUS
];

63 vﬁ©ûê
x86_˝u_to_≠icid
[
NR_CPUS
];

69 
smp_boŸ_˝us
();

70 
smp_°‹e_˝u_öfo
(
id
);

78 
	#smp_¥o˚ss‹_id
(Ë(
cuºít
->
¥o˚ss‹
)

	)

80 
__ölöe
 
	$h¨d_smp_¥o˚ss‹_id
()

83  
	`GET_APIC_ID
(*(*)(
APIC_BASE
+
APIC_ID
));

84 
	}
}

88 
	#NO_PROC_ID
 0xFF

	)

100 
	#PROC_CHANGE_PENALTY
 15

	)

	@/usr/include/asm/timex.h

6 #i‚de‡
_ASMi386_TIMEX_H


7 
	#_ASMi386_TIMEX_H


	)

9 
	~<löux/c⁄fig.h
>

11 
	#CLOCK_TICK_RATE
 1193180

	)

12 
	#CLOCK_TICK_FACTOR
 20

	)

13 
	#FINETUNE
 (((((()
LATCH
 * 
HZ
 - 
CLOCK_TICK_RATE
Ë<< 
SHIFT_HZ
) * \

14 (1000000/
CLOCK_TICK_FACTOR
Ë/ (
CLOCK_TICK_RATE
/CLOCK_TICK_FACTOR)) \

15 << (
SHIFT_SCALE
-
SHIFT_HZ
)Ë/ 
HZ
)

	)

31 
	tcy˛es_t
;

33 
cy˛es_t
 
ˇcheÊush_time
;

35 
ölöe
 
cy˛es_t
 
	$gë_cy˛es
 ()

37 #i‚de‡
CONFIG_X86_TSC


40 
ªt
;

42 
	`rdts˛l
(
ªt
);

43  
ªt
;

45 
	}
}

47 
˝u_khz
;

	@/usr/include/asm/vm86.h

1 #i‚de‡
_LINUX_VM86_H


2 
	#_LINUX_VM86_H


	)

15 
	#TF_MASK
 0x00000100

	)

16 
	#IF_MASK
 0x00000200

	)

17 
	#IOPL_MASK
 0x00003000

	)

18 
	#NT_MASK
 0x00004000

	)

19 
	#VM_MASK
 0x00020000

	)

20 
	#AC_MASK
 0x00040000

	)

21 
	#VIF_MASK
 0x00080000

	)

22 
	#VIP_MASK
 0x00100000

	)

23 
	#ID_MASK
 0x00200000

	)

25 
	#BIOSSEG
 0x0f000

	)

27 
	#CPU_086
 0

	)

28 
	#CPU_186
 1

	)

29 
	#CPU_286
 2

	)

30 
	#CPU_386
 3

	)

31 
	#CPU_486
 4

	)

32 
	#CPU_586
 5

	)

37 
	#VM86_TYPE
(
ªtvÆ
Ë(‘ëvÆË& 0xff)

	)

38 
	#VM86_ARG
(
ªtvÆ
Ë(‘ëvÆË>> 8)

	)

40 
	#VM86_SIGNAL
 0

	)

41 
	#VM86_UNKNOWN
 1

	)

42 
	#VM86_INTx
 2

	)

43 
	#VM86_STI
 3

	)

48 
	#VM86_PICRETURN
 4

	)

49 
	#VM86_TRAP
 6

	)

54 
	#VM86_PLUS_INSTALL_CHECK
 0

	)

55 
	#VM86_ENTER
 1

	)

56 
	#VM86_ENTER_NO_BYPASS
 2

	)

57 
	#VM86_REQUEST_IRQ
 3

	)

58 
	#VM86_FREE_IRQ
 4

	)

59 
	#VM86_GET_IRQ_BITS
 5

	)

60 
	#VM86_GET_AND_RESET_IRQ
 6

	)

68 
	svm86_ªgs
 {

72 
	mebx
;

73 
	mecx
;

74 
	medx
;

75 
	mesi
;

76 
	medi
;

77 
	mebp
;

78 
	móx
;

79 
	m__nuŒ_ds
;

80 
	m__nuŒ_es
;

81 
	m__nuŒ_fs
;

82 
	m__nuŒ_gs
;

83 
	m‹ig_óx
;

84 
	meù
;

85 
	mcs
, 
	m__csh
;

86 
	meÊags
;

87 
	me•
;

88 
	mss
, 
	m__ssh
;

92 
	mes
, 
	m__esh
;

93 
	mds
, 
	m__dsh
;

94 
	mfs
, 
	m__fsh
;

95 
	mgs
, 
	m__gsh
;

98 
	sªve˘‹ed_°ru˘
 {

99 
	m__m≠
[8];

102 
	svm86_°ru˘
 {

103 
vm86_ªgs
 
	mªgs
;

104 
	mÊags
;

105 
	ms¸ìn_bôm≠
;

106 
	m˝u_ty≥
;

107 
ªve˘‹ed_°ru˘
 
	möt_ªve˘‹ed
;

108 
ªve˘‹ed_°ru˘
 
	möt21_ªve˘‹ed
;

114 
	#VM86_SCREEN_BITMAP
 0x0001

	)

116 
	svm86∂us_öfo_°ru˘
 {

117 
	mf‹˚_ªtu∫_f‹_pic
:1;

118 
	mvm86dbg_a˘ive
:1;

119 
	mvm86dbg_TF≥ndig
:1;

120 
	munu£d
:28;

121 
	mis_vm86pus
:1;

122 
	mvm86dbg_ötxxèb
[32];

125 
	svm86∂us_°ru˘
 {

126 
vm86_ªgs
 
	mªgs
;

127 
	mÊags
;

128 
	ms¸ìn_bôm≠
;

129 
	m˝u_ty≥
;

130 
ªve˘‹ed_°ru˘
 
	möt_ªve˘‹ed
;

131 
ªve˘‹ed_°ru˘
 
	möt21_ªve˘‹ed
;

132 
vm86∂us_öfo_°ru˘
 
	mvm86∂us
;

	@/usr/include/linux/bitops.h

1 #i‚de‡
_LINUX_BITOPS_H


2 
	#_LINUX_BITOPS_H


	)

11 
ölöe
 
	$gíîic_ffs
(
x
)

13 
r
 = 1;

15 i‡(!
x
)

17 i‡(!(
x
 & 0xffff)) {

18 
x
 >>= 16;

19 
r
 += 16;

21 i‡(!(
x
 & 0xff)) {

22 
x
 >>= 8;

23 
r
 += 8;

25 i‡(!(
x
 & 0xf)) {

26 
x
 >>= 4;

27 
r
 += 4;

29 i‡(!(
x
 & 3)) {

30 
x
 >>= 2;

31 
r
 += 2;

33 i‡(!(
x
 & 1)) {

34 
x
 >>= 1;

35 
r
 += 1;

37  
r
;

38 
	}
}

45 
ölöe
 
	$gíîic_hweight32
(
w
)

47 
ªs
 = (
w
 & 0x55555555) + ((w >> 1) & 0x55555555);

48 
ªs
 = (res & 0x33333333) + ((res >> 2) & 0x33333333);

49 
ªs
 = (res & 0x0F0F0F0F) + ((res >> 4) & 0x0F0F0F0F);

50 
ªs
 = (res & 0x00FF00FF) + ((res >> 8) & 0x00FF00FF);

51  (
ªs
 & 0x0000FFFF) + ((res >> 16) & 0x0000FFFF);

52 
	}
}

54 
ölöe
 
	$gíîic_hweight16
(
w
)

56 
ªs
 = (
w
 & 0x5555) + ((w >> 1) & 0x5555);

57 
ªs
 = (res & 0x3333) + ((res >> 2) & 0x3333);

58 
ªs
 = (res & 0x0F0F) + ((res >> 4) & 0x0F0F);

59  (
ªs
 & 0x00FF) + ((res >> 8) & 0x00FF);

60 
	}
}

62 
ölöe
 
	$gíîic_hweight8
(
w
)

64 
ªs
 = (
w
 & 0x55) + ((w >> 1) & 0x55);

65 
ªs
 = (res & 0x33) + ((res >> 2) & 0x33);

66  (
ªs
 & 0x0F) + ((res >> 4) & 0x0F);

67 
	}
}

69 
	~<asm/bô›s.h
>

	@/usr/include/linux/byteorder/generic.h

1 #i‚de‡
_LINUX_BYTEORDER_GENERIC_H


2 
	#_LINUX_BYTEORDER_GENERIC_H


	)

82 #i‡
deföed
(
__KERNEL__
)

87 
	#˝u_to_À64
 
__˝u_to_À64


	)

88 
	#À64_to_˝u
 
__À64_to_˝u


	)

89 
	#˝u_to_À32
 
__˝u_to_À32


	)

90 
	#À32_to_˝u
 
__À32_to_˝u


	)

91 
	#˝u_to_À16
 
__˝u_to_À16


	)

92 
	#À16_to_˝u
 
__À16_to_˝u


	)

93 
	#˝u_to_be64
 
__˝u_to_be64


	)

94 
	#be64_to_˝u
 
__be64_to_˝u


	)

95 
	#˝u_to_be32
 
__˝u_to_be32


	)

96 
	#be32_to_˝u
 
__be32_to_˝u


	)

97 
	#˝u_to_be16
 
__˝u_to_be16


	)

98 
	#be16_to_˝u
 
__be16_to_˝u


	)

99 
	#˝u_to_À64p
 
__˝u_to_À64p


	)

100 
	#À64_to_˝up
 
__À64_to_˝up


	)

101 
	#˝u_to_À32p
 
__˝u_to_À32p


	)

102 
	#À32_to_˝up
 
__À32_to_˝up


	)

103 
	#˝u_to_À16p
 
__˝u_to_À16p


	)

104 
	#À16_to_˝up
 
__À16_to_˝up


	)

105 
	#˝u_to_be64p
 
__˝u_to_be64p


	)

106 
	#be64_to_˝up
 
__be64_to_˝up


	)

107 
	#˝u_to_be32p
 
__˝u_to_be32p


	)

108 
	#be32_to_˝up
 
__be32_to_˝up


	)

109 
	#˝u_to_be16p
 
__˝u_to_be16p


	)

110 
	#be16_to_˝up
 
__be16_to_˝up


	)

111 
	#˝u_to_À64s
 
__˝u_to_À64s


	)

112 
	#À64_to_˝us
 
__À64_to_˝us


	)

113 
	#˝u_to_À32s
 
__˝u_to_À32s


	)

114 
	#À32_to_˝us
 
__À32_to_˝us


	)

115 
	#˝u_to_À16s
 
__˝u_to_À16s


	)

116 
	#À16_to_˝us
 
__À16_to_˝us


	)

117 
	#˝u_to_be64s
 
__˝u_to_be64s


	)

118 
	#be64_to_˝us
 
__be64_to_˝us


	)

119 
	#˝u_to_be32s
 
__˝u_to_be32s


	)

120 
	#be32_to_˝us
 
__be32_to_˝us


	)

121 
	#˝u_to_be16s
 
__˝u_to_be16s


	)

122 
	#be16_to_˝us
 
__be16_to_˝us


	)

140 #unde‡
¡ohl


141 #unde‡
¡ohs


142 #unde‡
ht⁄l


143 #unde‡
ht⁄s


149 #i‡
deföed
(
__KERNEL__
Ë|| (deföed (
__GLIBC__
) && __GLIBC__ >= 2)

150 
__u32
 
¡ohl
(__u32);

151 
__u32
 
ht⁄l
(__u32);

153 
¡ohl
();

154 
ht⁄l
();

156 
¡ohs
();

157 
ht⁄s
();

160 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ >2Ë&& deföed(
__OPTIMIZE__
)

162 
	#___ht⁄l
(
x
Ë
	`__˝u_to_be32
(x)

	)

163 
	#___ht⁄s
(
x
Ë
	`__˝u_to_be16
(x)

	)

164 
	#___¡ohl
(
x
Ë
	`__be32_to_˝u
(x)

	)

165 
	#___¡ohs
(
x
Ë
	`__be16_to_˝u
(x)

	)

167 #i‡
deföed
(
__KERNEL__
Ë|| (deföed (
__GLIBC__
) && __GLIBC__ >= 2)

168 
	#ht⁄l
(
x
Ë
	`___ht⁄l
(x)

	)

169 
	#¡ohl
(
x
Ë
	`___¡ohl
(x)

	)

171 
	#ht⁄l
(
x
Ë(()
	`___ht⁄l
(x))

	)

172 
	#¡ohl
(
x
Ë(()
	`___¡ohl
(x))

	)

174 
	#ht⁄s
(
x
Ë
	`___ht⁄s
(x)

	)

175 
	#¡ohs
(
x
Ë
	`___¡ohs
(x)

	)

	@/usr/include/linux/byteorder/swab.h

1 #i‚de‡
_LINUX_BYTEORDER_SWAB_H


2 
	#_LINUX_BYTEORDER_SWAB_H


	)

21 
	#___swab16
(
x
) \

23 
__u16
 
__x
 = (
x
); \

24 ((
__u16
)( \

25 (((
__u16
)(
__x
) & (__u16)0x00ffU) << 8) | \

26 (((
__u16
)(
__x
) & (__u16)0xff00U) >> 8) )); \

27 })

	)

29 
	#___swab32
(
x
) \

31 
__u32
 
__x
 = (
x
); \

32 ((
__u32
)( \

33 (((
__u32
)(
__x
) & (__u32)0x000000ffUL) << 24) | \

34 (((
__u32
)(
__x
) & (__u32)0x0000ff00UL) << 8) | \

35 (((
__u32
)(
__x
) & (__u32)0x00ff0000UL) >> 8) | \

36 (((
__u32
)(
__x
) & (__u32)0xff000000UL) >> 24) )); \

37 })

	)

39 
	#___swab64
(
x
) \

41 
__u64
 
__x
 = (
x
); \

42 ((
__u64
)( \

43 (
__u64
)(((__u64)(
__x
) & (__u64)0x00000000000000ffULL) << 56) | \

44 (
__u64
)(((__u64)(
__x
) & (__u64)0x000000000000ff00ULL) << 40) | \

45 (
__u64
)(((__u64)(
__x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

46 (
__u64
)(((__u64)(
__x
) & (__u64)0x00000000ff000000ULL) << 8) | \

47 (
__u64
)(((__u64)(
__x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

48 (
__u64
)(((__u64)(
__x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

49 (
__u64
)(((__u64)(
__x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

50 (
__u64
)(((__u64)(
__x
) & (__u64)0xff00000000000000ULL) >> 56) )); \

51 })

	)

53 
	#___c⁄°™t_swab16
(
x
) \

54 ((
__u16
)( \

55 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

56 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8Ë))

	)

57 
	#___c⁄°™t_swab32
(
x
) \

58 ((
__u32
)( \

59 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

60 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

61 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

62 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24Ë))

	)

63 
	#___c⁄°™t_swab64
(
x
) \

64 ((
__u64
)( \

65 (
__u64
)(((__u64)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

66 (
__u64
)(((__u64)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

67 (
__u64
)(((__u64)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

68 (
__u64
)(((__u64)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

69 (
__u64
)(((__u64)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

70 (
__u64
)(((__u64)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

71 (
__u64
)(((__u64)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

72 (
__u64
)(((__u64)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56Ë))

	)

77 #i‚de‡
__¨ch__swab16


78 
	#__¨ch__swab16
(
x
Ë({ 
__u16
 
__tmp
 = (xË; 
	`___swab16
(__tmp); })

	)

80 #i‚de‡
__¨ch__swab32


81 
	#__¨ch__swab32
(
x
Ë({ 
__u32
 
__tmp
 = (xË; 
	`___swab32
(__tmp); })

	)

83 #i‚de‡
__¨ch__swab64


84 
	#__¨ch__swab64
(
x
Ë({ 
__u64
 
__tmp
 = (xË; 
	`___swab64
(__tmp); })

	)

87 #i‚de‡
__¨ch__swab16p


88 
	#__¨ch__swab16p
(
x
Ë
	`__¨ch__swab16
(*(x))

	)

90 #i‚de‡
__¨ch__swab32p


91 
	#__¨ch__swab32p
(
x
Ë
	`__¨ch__swab32
(*(x))

	)

93 #i‚de‡
__¨ch__swab64p


94 
	#__¨ch__swab64p
(
x
Ë
	`__¨ch__swab64
(*(x))

	)

97 #i‚de‡
__¨ch__swab16s


98 
	#__¨ch__swab16s
(
x
Ëdÿ{ *(xË
	`__¨ch__swab16p
((x)); } 0)

	)

100 #i‚de‡
__¨ch__swab32s


101 
	#__¨ch__swab32s
(
x
Ëdÿ{ *(xË
	`__¨ch__swab32p
((x)); } 0)

	)

103 #i‚de‡
__¨ch__swab64s


104 
	#__¨ch__swab64s
(
x
Ëdÿ{ *(xË
	`__¨ch__swab64p
((x)); } 0)

	)

111 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ >2Ë&& deföed(
__OPTIMIZE__
)

112 
	#__swab16
(
x
) \

113 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

114 
	`___swab16
((
x
)) : \

115 
	`__fswab16
((
x
)))

	)

116 
	#__swab32
(
x
) \

117 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

118 
	`___swab32
((
x
)) : \

119 
	`__fswab32
((
x
)))

	)

120 
	#__swab64
(
x
) \

121 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

122 
	`___swab64
((
x
)) : \

123 
	`__fswab64
((
x
)))

	)

125 
	#__swab16
(
x
Ë
	`__fswab16
(x)

	)

126 
	#__swab32
(
x
Ë
	`__fswab32
(x)

	)

127 
	#__swab64
(
x
Ë
	`__fswab64
(x)

	)

131 
__ölöe__
 
__c⁄°__
 
__u16
 
	$__fswab16
(
__u16
 
x
)

133  
	`__¨ch__swab16
(
x
);

134 
	}
}

135 
__ölöe__
 
__u16
 
	$__swab16p
(
__u16
 *
x
)

137  
	`__¨ch__swab16p
(
x
);

138 
	}
}

139 
__ölöe__
 
	$__swab16s
(
__u16
 *
addr
)

141 
	`__¨ch__swab16s
(
addr
);

142 
	}
}

144 
__ölöe__
 
__c⁄°__
 
__u32
 
	$__fswab32
(
__u32
 
x
)

146  
	`__¨ch__swab32
(
x
);

147 
	}
}

148 
__ölöe__
 
__u32
 
	$__swab32p
(
__u32
 *
x
)

150  
	`__¨ch__swab32p
(
x
);

151 
	}
}

152 
__ölöe__
 
	$__swab32s
(
__u32
 *
addr
)

154 
	`__¨ch__swab32s
(
addr
);

155 
	}
}

157 #ifde‡
__BYTEORDER_HAS_U64__


158 
__ölöe__
 
__c⁄°__
 
__u64
 
	$__fswab64
(
__u64
 
x
)

160 #ifde‡
__SWAB_64_THRU_32__


161 
__u32
 
h
 = 
x
 >> 32;

162 
__u32
 
l
 = 
x
 & ((1ULL<<32)-1);

163  (((
__u64
)
	`__swab32
(
l
)Ë<< 32Ë| ((__u64)(__swab32(
h
)));

165  
	`__¨ch__swab64
(
x
);

167 
	}
}

168 
__ölöe__
 
__u64
 
	$__swab64p
(
__u64
 *
x
)

170  
	`__¨ch__swab64p
(
x
);

171 
	}
}

172 
__ölöe__
 
	$__swab64s
(
__u64
 *
addr
)

174 
	`__¨ch__swab64s
(
addr
);

175 
	}
}

178 #i‡
deföed
(
__KERNEL__
)

179 
	#swab16
 
__swab16


	)

180 
	#swab32
 
__swab32


	)

181 
	#swab64
 
__swab64


	)

182 
	#swab16p
 
__swab16p


	)

183 
	#swab32p
 
__swab32p


	)

184 
	#swab64p
 
__swab64p


	)

185 
	#swab16s
 
__swab16s


	)

186 
	#swab32s
 
__swab32s


	)

187 
	#swab64s
 
__swab64s


	)

	@/usr/include/linux/capability.h

13 #i‚de‡
_LINUX_CAPABILITY_H


14 
	#_LINUX_CAPABILITY_H


	)

16 
	~<löux/ty≥s.h
>

17 
	~<löux/fs.h
>

30 
	#_LINUX_CAPABILITY_VERSION
 0x19980330

	)

32 
	s__u£r_ˇp_hódî_°ru˘
 {

33 
__u32
 
	mvîsi⁄
;

34 
	mpid
;

35 } *
	tˇp_u£r_hódî_t
;

37 
	s__u£r_ˇp_d©a_°ru˘
 {

38 
__u32
 
	mef„˘ive
;

39 
__u32
 
	m≥rmôãd
;

40 
__u32
 
	möhîôabÀ
;

41 } *
	tˇp_u£r_d©a_t
;

51 
	#CAP_CHOWN
 0

	)

57 
	#CAP_DAC_OVERRIDE
 1

	)

63 
	#CAP_DAC_READ_SEARCH
 2

	)

69 
	#CAP_FOWNER
 3

	)

78 
	#CAP_FSETID
 4

	)

82 
	#CAP_FS_MASK
 0x1f

	)

88 
	#CAP_KILL
 5

	)

94 
	#CAP_SETGID
 6

	)

99 
	#CAP_SETUID
 7

	)

109 
	#CAP_SETPCAP
 8

	)

113 
	#CAP_LINUX_IMMUTABLE
 9

	)

118 
	#CAP_NET_BIND_SERVICE
 10

	)

122 
	#CAP_NET_BROADCAST
 11

	)

138 
	#CAP_NET_ADMIN
 12

	)

143 
	#CAP_NET_RAW
 13

	)

149 
	#CAP_IPC_LOCK
 14

	)

153 
	#CAP_IPC_OWNER
 15

	)

157 
	#CAP_SYS_MODULE
 16

	)

162 
	#CAP_SYS_RAWIO
 17

	)

166 
	#CAP_SYS_CHROOT
 18

	)

170 
	#CAP_SYS_PTRACE
 19

	)

174 
	#CAP_SYS_PACCT
 20

	)

213 
	#CAP_SYS_ADMIN
 21

	)

217 
	#CAP_SYS_BOOT
 22

	)

225 
	#CAP_SYS_NICE
 23

	)

239 
	#CAP_SYS_RESOURCE
 24

	)

245 
	#CAP_SYS_TIME
 25

	)

250 
	#CAP_SYS_TTY_CONFIG
 26

	)

254 
	#CAP_MKNOD
 27

	)

258 
	#CAP_LEASE
 28

	)

	@/usr/include/linux/dcache.h

1 #i‚de‡
__LINUX_DCACHE_H


2 
	#__LINUX_DCACHE_H


	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/ipc.h

1 #i‚de‡
_LINUX_IPC_H


2 
	#_LINUX_IPC_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#IPC_PRIVATE
 ((
__kî√l_key_t
Ë0)

	)

9 
	sùc_≥rm


11 
__kî√l_key_t
 
	mkey
;

12 
__kî√l_uid_t
 
	muid
;

13 
__kî√l_gid_t
 
	mgid
;

14 
__kî√l_uid_t
 
	mcuid
;

15 
__kî√l_gid_t
 
	mcgid
;

16 
__kî√l_mode_t
 
	mmode
;

17 
	m£q
;

21 
	~<asm/ùcbuf.h
>

24 
	#IPC_CREAT
 00001000

	)

25 
	#IPC_EXCL
 00002000

	)

26 
	#IPC_NOWAIT
 00004000

	)

31 
	#IPC_DIPC
 00010000

	)

32 
	#IPC_OWN
 00020000

	)

38 
	#IPC_RMID
 0

	)

39 
	#IPC_SET
 1

	)

40 
	#IPC_STAT
 2

	)

41 
	#IPC_INFO
 3

	)

47 
	#IPC_OLD
 0

	)

49 
	#IPC_64
 0x0100

	)

	@/usr/include/linux/kdev_t.h

1 #i‚de‡
_LINUX_KDEV_T_H


2 
	#_LINUX_KDEV_T_H


	)

3 #i‡
deföed
(
__KERNEL__
Ë|| deföed(
_LVM_H_INCLUDE
)

64 
	#MINORBITS
 8

	)

65 
	#MINORMASK
 ((1U << 
MINORBITS
Ë- 1)

	)

67 
	tkdev_t
;

69 
	#MAJOR
(
dev
Ë((Ë((devË>> 
MINORBITS
))

	)

70 
	#MINOR
(
dev
Ë((Ë((devË& 
MINORMASK
))

	)

71 
	#HASHDEV
(
dev
Ë((Ë(dev))

	)

72 
	#NODEV
 0

	)

73 
	#MKDEV
(
ma
,
mi
Ë(((maË<< 
MINORBITS
Ë| (mi))

	)

74 
	#B_FREE
 0xfff‡

	)

76 c⁄° * 
kdev«me
(
kdev_t
);

83 
ölöe
 
	$kdev_t_to_ƒ
(
kdev_t
 
dev
) {

84  (
	`MAJOR
(
dev
)<<8Ë| 
	`MINOR
(dev);

85 
	}
}

87 
ölöe
 
kdev_t
 
	$to_kdev_t
(
dev
)

89 
maj‹
, 
mö‹
;

91 
maj‹
 = (
dev
 >> 16);

92 i‡(!
maj‹
) {

93 
maj‹
 = (
dev
 >> 8);

94 
mö‹
 = (
dev
 & 0xff);

96 
mö‹
 = (
dev
 & 0xffff);

98 
maj‹
 = (
dev
 >> 8);

99 
mö‹
 = (
dev
 & 0xff);

101  
	`MKDEV
(
maj‹
, 
mö‹
);

102 
	}
}

110 
	#MAJOR
(
dev
Ë((dev)>>8)

	)

111 
	#MINOR
(
dev
Ë((devË& 0xff)

	)

112 
	#MKDEV
(
ma
,
mi
Ë((ma)<<8 | (mi))

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 32

	)

7 
	#ARG_MAX
 131072

	)

8 
	#CHILD_MAX
 999

	)

9 
	#OPEN_MAX
 256

	)

10 
	#LINK_MAX
 127

	)

11 
	#MAX_CANON
 255

	)

12 
	#MAX_INPUT
 255

	)

13 
	#NAME_MAX
 255

	)

14 
	#PATH_MAX
 4096

	)

15 
	#PIPE_BUF
 4096

	)

17 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/linkage.h

1 #i‚de‡
_LINUX_LINKAGE_H


2 
	#_LINUX_LINKAGE_H


	)

4 
	~<löux/c⁄fig.h
>

6 #ifde‡
__˝lu•lus


7 
	#CPP_ASMLINKAGE
 "C"

	)

9 
	#CPP_ASMLINKAGE


	)

12 #i‡
deföed
 
__i386__


13 
	#asmlökage
 
CPP_ASMLINKAGE
 
	`__©åibuã__
((
	`ªg∑rm
(0)))

	)

14 #ñi‡
deföed
 
__ü64__


15 
	#asmlökage
 
CPP_ASMLINKAGE
 
	`__©åibuã__
((
sysˇŒ_lökage
))

	)

17 
	#asmlökage
 
CPP_ASMLINKAGE


	)

20 
	#SYMBOL_NAME_STR
(
X
Ë#X

	)

21 
	#SYMBOL_NAME
(
X
Ë
	)
X

22 #ifde‡
__STDC__


23 
	#SYMBOL_NAME_LABEL
(
X
ËX##:

	)

25 
	#SYMBOL_NAME_LABEL
(
X
ËX :

	)

28 #ifde‡
__¨m__


29 
	#__ALIGN
 .
Æign
 0

	)

30 
	#__ALIGN_STR
 ".Æig¿0"

	)

32 #ifde‡
__mc68000__


33 
	#__ALIGN
 .
Æign
 4

	)

34 
	#__ALIGN_STR
 ".Æig¿4"

	)

36 #ifde‡
__sh__


37 
	#__ALIGN
 .
bÆign
 4

	)

38 
	#__ALIGN_STR
 ".bÆig¿4"

	)

40 #i‡
deföed
(
__i386__
Ë&& deföed(
CONFIG_X86_ALIGNMENT_16
)

41 
	#__ALIGN
 .
Æign
 16,0x90

	)

42 
	#__ALIGN_STR
 ".Æig¿16,0x90"

	)

44 
	#__ALIGN
 .
Æign
 4,0x90

	)

45 
	#__ALIGN_STR
 ".Æig¿4,0x90"

	)

51 #ifde‡
__ASSEMBLY__


53 
	#ALIGN
 
__ALIGN


	)

54 
	#ALIGN_STR
 
__ALIGN_STR


	)

56 
	#ENTRY
(
«me
) \

57 .
globl
 
	`SYMBOL_NAME
(
«me
); \

58 
ALIGN
; \

59 
	`SYMBOL_NAME_LABEL
(
«me
)

	)

	@/usr/include/linux/net.h

18 #i‚de‡
_LINUX_NET_H


19 
	#_LINUX_NET_H


	)

21 
	~<löux/c⁄fig.h
>

22 
	~<löux/sockë.h
>

23 
	~<löux/waô.h
>

25 
	gpﬁl_èbÀ_°ru˘
;

27 
	#NPROTO
 32

	)

30 
	#SYS_SOCKET
 1

	)

31 
	#SYS_BIND
 2

	)

32 
	#SYS_CONNECT
 3

	)

33 
	#SYS_LISTEN
 4

	)

34 
	#SYS_ACCEPT
 5

	)

35 
	#SYS_GETSOCKNAME
 6

	)

36 
	#SYS_GETPEERNAME
 7

	)

37 
	#SYS_SOCKETPAIR
 8

	)

38 
	#SYS_SEND
 9

	)

39 
	#SYS_RECV
 10

	)

40 
	#SYS_SENDTO
 11

	)

41 
	#SYS_RECVFROM
 12

	)

42 
	#SYS_SHUTDOWN
 13

	)

43 
	#SYS_SETSOCKOPT
 14

	)

44 
	#SYS_GETSOCKOPT
 15

	)

45 
	#SYS_SENDMSG
 16

	)

46 
	#SYS_RECVMSG
 17

	)

50 
	mSS_FREE
 = 0,

51 
	mSS_UNCONNECTED
,

52 
	mSS_CONNECTING
,

53 
	mSS_CONNECTED
,

54 
	mSS_DISCONNECTING


55 } 
	tsockë_°©e
;

57 
	#__SO_ACCEPTCON
 (1<<16Ë

	)

	@/usr/include/linux/prefetch.h

10 #i‚de‡
_LINUX_PREFETCH_H


11 
	#_LINUX_PREFETCH_H


	)

13 
	~<asm/¥o˚ss‹.h
>

14 
	~<asm/ˇche.h
>

41 #i‚de‡
ARCH_HAS_PREFETCH


42 
	#ARCH_HAS_PREFETCH


	)

43 
ölöe
 
	$¥e„tch
(c⁄° *
x
Ë{;
	}
}

46 #i‚de‡
ARCH_HAS_PREFETCHW


47 
	#ARCH_HAS_PREFETCHW


	)

48 
ölöe
 
	$¥e„tchw
(c⁄° *
x
Ë{;
	}
}

51 #i‚de‡
ARCH_HAS_SPINLOCK_PREFETCH


52 
	#ARCH_HAS_SPINLOCK_PREFETCH


	)

53 
	#•ö_lock_¥e„tch
(
x
Ë
	`¥e„tchw
(x)

	)

56 #i‚de‡
PREFETCH_STRIDE


57 
	#PREFETCH_STRIDE
 (4*
L1_CACHE_BYTES
)

	)

	@/usr/include/linux/ptrace.h

1 #i‚de‡
_LINUX_PTRACE_H


2 
	#_LINUX_PTRACE_H


	)

8 
	#PTRACE_TRACEME
 0

	)

9 
	#PTRACE_PEEKTEXT
 1

	)

10 
	#PTRACE_PEEKDATA
 2

	)

11 
	#PTRACE_PEEKUSR
 3

	)

12 
	#PTRACE_POKETEXT
 4

	)

13 
	#PTRACE_POKEDATA
 5

	)

14 
	#PTRACE_POKEUSR
 6

	)

15 
	#PTRACE_CONT
 7

	)

16 
	#PTRACE_KILL
 8

	)

17 
	#PTRACE_SINGLESTEP
 9

	)

19 
	#PTRACE_ATTACH
 0x10

	)

20 
	#PTRACE_DETACH
 0x11

	)

22 
	#PTRACE_SYSCALL
 24

	)

24 
	~<asm/±ø˚.h
>

	@/usr/include/linux/stat.h

1 #i‚de‡
_LINUX_STAT_H


2 
	#_LINUX_STAT_H


	)

4 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

6 
	#S_IFMT
 00170000

	)

7 
	#S_IFSOCK
 0140000

	)

8 
	#S_IFLNK
 0120000

	)

9 
	#S_IFREG
 0100000

	)

10 
	#S_IFBLK
 0060000

	)

11 
	#S_IFDIR
 0040000

	)

12 
	#S_IFCHR
 0020000

	)

13 
	#S_IFIFO
 0010000

	)

14 
	#S_ISUID
 0004000

	)

15 
	#S_ISGID
 0002000

	)

16 
	#S_ISVTX
 0001000

	)

18 
	#S_ISLNK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFLNK
)

	)

19 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
)

	)

20 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
)

	)

21 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
)

	)

22 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
)

	)

23 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
)

	)

24 
	#S_ISSOCK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFSOCK
)

	)

26 
	#S_IRWXU
 00700

	)

27 
	#S_IRUSR
 00400

	)

28 
	#S_IWUSR
 00200

	)

29 
	#S_IXUSR
 00100

	)

31 
	#S_IRWXG
 00070

	)

32 
	#S_IRGRP
 00040

	)

33 
	#S_IWGRP
 00020

	)

34 
	#S_IXGRP
 00010

	)

36 
	#S_IRWXO
 00007

	)

37 
	#S_IROTH
 00004

	)

38 
	#S_IWOTH
 00002

	)

39 
	#S_IXOTH
 00001

	)

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

4 #unde‡
NULL


5 #i‡
deföed
(
__˝lu•lus
)

6 
	#NULL
 0

	)

8 
	#NULL
 ((*)0)

	)

11 #unde‡
off£tof


12 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

	@/usr/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

6 #ifde‡
__KERNEL__


8 #w¨nög 
Usög
 
kî√l
 
hódî
 
ö
 
u£æ™d
!

10 
	~<löux/ty≥s.h
>

11 
	~<löux/°ddef.h
>

13 #ifde‡
__KERNEL__


15 #ifde‡
__˝lu•lus


19 * 
___°πok
;

20 * 
°Ωbrk
(const *,const *);

21 * 
°πok
(*,const *);

22 * 
°r£p
(**,const *);

23 
__kî√l_size_t
 
°r•n
(const *,const *);

29 
	~<asm/°rög.h
>

31 #i‚de‡
__HAVE_ARCH_STRCPY


32 * 
°r˝y
(*,const *);

34 #i‚de‡
__HAVE_ARCH_STRNCPY


35 * 
°∫˝y
(*,c⁄° *, 
__kî√l_size_t
);

37 #i‚de‡
__HAVE_ARCH_STRCAT


38 * 
°rˇt
(*, const *);

40 #i‚de‡
__HAVE_ARCH_STRNCAT


41 * 
°∫ˇt
(*, c⁄° *, 
__kî√l_size_t
);

43 #i‚de‡
__HAVE_ARCH_STRCMP


44 
°rcmp
(const *,const *);

46 #i‚de‡
__HAVE_ARCH_STRNCMP


47 
°∫cmp
(c⁄° *,c⁄° *,
__kî√l_size_t
);

49 #i‚de‡
__HAVE_ARCH_STRNICMP


50 
°∫icmp
(c⁄° *, c⁄° *, 
__kî√l_size_t
);

52 #i‚de‡
__HAVE_ARCH_STRCHR


53 * 
°rchr
(const *,);

55 #i‚de‡
__HAVE_ARCH_STRRCHR


56 * 
°ºchr
(const *,);

58 #i‚de‡
__HAVE_ARCH_STRSTR


59 * 
°r°r
(const *,const *);

61 #i‚de‡
__HAVE_ARCH_STRLEN


62 
__kî√l_size_t
 
°æí
(const *);

64 #i‚de‡
__HAVE_ARCH_STRNLEN


65 
__kî√l_size_t
 
°∫Àn
(const *,__kernel_size_t);

68 #i‚de‡
__HAVE_ARCH_MEMSET


69 * 
mem£t
(*,,
__kî√l_size_t
);

71 #i‚de‡
__HAVE_ARCH_MEMCPY


72 * 
mem˝y
(*,c⁄° *,
__kî√l_size_t
);

74 #i‚de‡
__HAVE_ARCH_MEMMOVE


75 * 
memmove
(*,c⁄° *,
__kî√l_size_t
);

77 #i‚de‡
__HAVE_ARCH_MEMSCAN


78 * 
memsˇn
(*,,
__kî√l_size_t
);

80 #i‚de‡
__HAVE_ARCH_MEMCMP


81 
memcmp
(c⁄° *,c⁄° *,
__kî√l_size_t
);

83 #i‚de‡
__HAVE_ARCH_MEMCHR


84 * 
memchr
(c⁄° *,,
__kî√l_size_t
);

87 #ifde‡
__˝lu•lus


	@/usr/include/linux/vfs.h

1 #i‚de‡
_LINUX_VFS_H


2 
	#_LINUX_VFS_H


	)

4 
	~<asm/°©fs.h
>

	@/usr/include/linux/wait.h

1 #i‚de‡
_LINUX_WAIT_H


2 
	#_LINUX_WAIT_H


	)

4 
	#WNOHANG
 0x00000001

	)

5 
	#WUNTRACED
 0x00000002

	)

7 
	#__WNOTHREAD
 0x20000000

	)

8 
	#__WALL
 0x40000000

	)

9 
	#__WCLONE
 0x80000000

	)

	@/usr/include/asm/ioctl.h

6 #i‚de‡
_ASMI386_IOCTL_H


7 
	#_ASMI386_IOCTL_H


	)

27 
	#_IOC_NRBITS
 8

	)

28 
	#_IOC_TYPEBITS
 8

	)

29 
	#_IOC_SIZEBITS
 14

	)

30 
	#_IOC_DIRBITS
 2

	)

32 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

33 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

34 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

35 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

37 
	#_IOC_NRSHIFT
 0

	)

38 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

39 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

40 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

45 
	#_IOC_NONE
 0U

	)

46 
	#_IOC_WRITE
 1U

	)

47 
	#_IOC_READ
 2U

	)

49 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

50 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

51 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

52 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

53 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

56 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

57 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

58 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

59 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

62 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

63 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

64 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

65 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

69 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

70 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

71 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

72 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

73 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm/ipcbuf.h

1 #i‚de‡
__i386_IPCBUF_H__


2 
	#__i386_IPCBUF_H__


	)

14 
	sùc64_≥rm


16 
__kî√l_key_t
 
	mkey
;

17 
__kî√l_uid32_t
 
	muid
;

18 
__kî√l_gid32_t
 
	mgid
;

19 
__kî√l_uid32_t
 
	mcuid
;

20 
__kî√l_gid32_t
 
	mcgid
;

21 
__kî√l_mode_t
 
	mmode
;

22 
	m__∑d1
;

23 
	m£q
;

24 
	m__∑d2
;

25 
	m__unu£d1
;

26 
	m__unu£d2
;

	@/usr/include/asm/statfs.h

1 #i‚de‡
_I386_STATFS_H


2 
	#_I386_STATFS_H


	)

4 #i‚de‡
__KERNEL_STRICT_NAMES


6 
	~<löux/ty≥s.h
>

8 
__kî√l_fsid_t
 
	tfsid_t
;

12 
	s°©fs
 {

13 
	mf_ty≥
;

14 
	mf_bsize
;

15 
	mf_blocks
;

16 
	mf_b‰ì
;

17 
	mf_bavaû
;

18 
	mf_fûes
;

19 
	mf_f‰ì
;

20 
__kî√l_fsid_t
 
	mf_fsid
;

21 
	mf_«mñí
;

22 
	mf_•¨e
[6];

	@/usr/include/asm/string.h

1 #i‚de‡
_I386_STRING_H_


2 
	#_I386_STRING_H_


	)

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

4 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

6 
	~<asm/sockë.h
>

7 
	~<löux/sockios.h
>

8 
	~<löux/uio.h
>

9 
	~<löux/ty≥s.h
>

11 
	tß_Ámûy_t
;

17 
	ssockaddr
 {

18 
ß_Ámûy_t
 
	mß_Ámûy
;

19 
	mß_d©a
[14];

22 
	slögî
 {

23 
	ml_⁄off
;

24 
	ml_lögî
;

33 
	smsghdr
 {

34 * 
	mmsg_«me
;

35 
	mmsg_«mñí
;

36 
iovec
 * 
	mmsg_iov
;

37 
__kî√l_size_t
 
	mmsg_iovÀn
;

38 * 
	mmsg_c⁄åﬁ
;

39 
__kî√l_size_t
 
	mmsg_c⁄åﬁÀn
;

40 
	mmsg_Êags
;

49 
	scmsghdr
 {

50 
__kî√l_size_t
 
	mcmsg_Àn
;

51 
	mcmsg_Àvñ
;

52 
	mcmsg_ty≥
;

60 
	#__CMSG_NXTHDR
(
˘l
, 
Àn
, 
cmsg
Ë
	`__cmsg_nxthdr
((˘l),÷í),(cmsg))

	)

61 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`cmsg_nxthdr
((mhdr), (cmsg))

	)

63 
	#CMSG_ALIGN
(
Àn
Ë–(÷í)+()-1Ë& ~(()-1Ë)

	)

65 
	#CMSG_DATA
(
cmsg
Ë((*)((*)(cmsgË+ 
	`CMSG_ALIGN
((
cmsghdr
))))

	)

66 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
((
cmsghdr
)Ë+ CMSG_ALIGN÷í))

	)

67 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
((
cmsghdr
)Ë+ (Àn))

	)

69 
	#__CMSG_FIRSTHDR
(
˘l
,
Àn
Ë(÷íË>(
cmsghdr
) ? \

70 (
cmsghdr
 *)(
˘l
) : \

71 (
cmsghdr
 *)
NULL
)

	)

72 
	#CMSG_FIRSTHDR
(
msg
Ë
	`__CMSG_FIRSTHDR
((msg)->
msg_c⁄åﬁ
, (msg)->
msg_c⁄åﬁÀn
)

	)

78 #i‡ 
deföed
(
__GNUC__
)

79 
	#__KINLINE
 
__ölöe__


	)

80 #ñi‡
deföed
(
__˝lu•lus
)

81 
	#__KINLINE
 
ölöe


	)

97 
__KINLINE
 
cmsghdr
 * 
	$__cmsg_nxthdr
(*
__˘l
, 
__kî√l_size_t
 
__size
,

98 
cmsghdr
 *
__cmsg
)

100 
cmsghdr
 * 
__±r
;

102 
__±r
 = (
cmsghdr
*)(((*Ë
__cmsg
Ë+ 
	`CMSG_ALIGN
(__cmsg->
cmsg_Àn
));

103 i‡(()((*)(
__±r
+1Ë- (*Ë
__˘l
Ë> 
__size
)

104  (
cmsghdr
 *)0;

106  
__±r
;

107 
	}
}

109 
__KINLINE
 
cmsghdr
 * 
	$cmsg_nxthdr
 (
msghdr
 *
__msg
, 
cmsghdr
 *
__cmsg
)

111  
	`__cmsg_nxthdr
(
__msg
->
msg_c⁄åﬁ
, __msg->
msg_c⁄åﬁÀn
, 
__cmsg
);

112 
	}
}

116 
	#SCM_RIGHTS
 0x01

	)

117 
	#SCM_CREDENTIALS
 0x02

	)

118 
	#SCM_CONNECT
 0x03

	)

120 
	su¸ed
 {

121 
__u32
 
	mpid
;

122 
__u32
 
	muid
;

123 
__u32
 
	mgid
;

127 
	#AF_UNSPEC
 0

	)

128 
	#AF_UNIX
 1

	)

129 
	#AF_LOCAL
 1

	)

130 
	#AF_INET
 2

	)

131 
	#AF_AX25
 3

	)

132 
	#AF_IPX
 4

	)

133 
	#AF_APPLETALK
 5

	)

134 
	#AF_NETROM
 6

	)

135 
	#AF_BRIDGE
 7

	)

136 
	#AF_ATMPVC
 8

	)

137 
	#AF_X25
 9

	)

138 
	#AF_INET6
 10

	)

139 
	#AF_ROSE
 11

	)

140 
	#AF_DEC√t
 12

	)

141 
	#AF_NETBEUI
 13

	)

142 
	#AF_SECURITY
 14

	)

143 
	#AF_KEY
 15

	)

144 
	#AF_NETLINK
 16

	)

145 
	#AF_ROUTE
 
AF_NETLINK


	)

146 
	#AF_PACKET
 17

	)

147 
	#AF_ASH
 18

	)

148 
	#AF_ECONET
 19

	)

149 
	#AF_ATMSVC
 20

	)

150 
	#AF_SNA
 22

	)

151 
	#AF_IRDA
 23

	)

152 
	#AF_PPPOX
 24

	)

153 
	#AF_WANPIPE
 25

	)

154 
	#AF_BLUETOOTH
 31

	)

155 
	#AF_MAX
 32

	)

158 
	#PF_UNSPEC
 
AF_UNSPEC


	)

159 
	#PF_UNIX
 
AF_UNIX


	)

160 
	#PF_LOCAL
 
AF_LOCAL


	)

161 
	#PF_INET
 
AF_INET


	)

162 
	#PF_AX25
 
AF_AX25


	)

163 
	#PF_IPX
 
AF_IPX


	)

164 
	#PF_APPLETALK
 
AF_APPLETALK


	)

165 
	#PF_NETROM
 
AF_NETROM


	)

166 
	#PF_BRIDGE
 
AF_BRIDGE


	)

167 
	#PF_ATMPVC
 
AF_ATMPVC


	)

168 
	#PF_X25
 
AF_X25


	)

169 
	#PF_INET6
 
AF_INET6


	)

170 
	#PF_ROSE
 
AF_ROSE


	)

171 
	#PF_DEC√t
 
AF_DEC√t


	)

172 
	#PF_NETBEUI
 
AF_NETBEUI


	)

173 
	#PF_SECURITY
 
AF_SECURITY


	)

174 
	#PF_KEY
 
AF_KEY


	)

175 
	#PF_NETLINK
 
AF_NETLINK


	)

176 
	#PF_ROUTE
 
AF_ROUTE


	)

177 
	#PF_PACKET
 
AF_PACKET


	)

178 
	#PF_ASH
 
AF_ASH


	)

179 
	#PF_ECONET
 
AF_ECONET


	)

180 
	#PF_ATMSVC
 
AF_ATMSVC


	)

181 
	#PF_SNA
 
AF_SNA


	)

182 
	#PF_IRDA
 
AF_IRDA


	)

183 
	#PF_PPPOX
 
AF_PPPOX


	)

184 
	#PF_WANPIPE
 
AF_WANPIPE


	)

185 
	#PF_BLUETOOTH
 
AF_BLUETOOTH


	)

186 
	#PF_MAX
 
AF_MAX


	)

189 
	#SOMAXCONN
 128

	)

195 
	#MSG_OOB
 1

	)

196 
	#MSG_PEEK
 2

	)

197 
	#MSG_DONTROUTE
 4

	)

198 
	#MSG_TRYHARD
 4

	)

199 
	#MSG_CTRUNC
 8

	)

200 
	#MSG_PROBE
 0x10

	)

201 
	#MSG_TRUNC
 0x20

	)

202 
	#MSG_DONTWAIT
 0x40

	)

203 
	#MSG_EOR
 0x80

	)

204 
	#MSG_WAITALL
 0x100

	)

205 
	#MSG_FIN
 0x200

	)

206 
	#MSG_SYN
 0x400

	)

207 
	#MSG_CONFIRM
 0x800

	)

208 
	#MSG_RST
 0x1000

	)

209 
	#MSG_ERRQUEUE
 0x2000

	)

210 
	#MSG_NOSIGNAL
 0x4000

	)

211 
	#MSG_MORE
 0x8000

	)

213 
	#MSG_EOF
 
MSG_FIN


	)

217 
	#SOL_IP
 0

	)

219 
	#SOL_TCP
 6

	)

220 
	#SOL_UDP
 17

	)

221 
	#SOL_IPV6
 41

	)

222 
	#SOL_ICMPV6
 58

	)

223 
	#SOL_RAW
 255

	)

224 
	#SOL_IPX
 256

	)

225 
	#SOL_AX25
 257

	)

226 
	#SOL_ATALK
 258

	)

227 
	#SOL_NETROM
 259

	)

228 
	#SOL_ROSE
 260

	)

229 
	#SOL_DECNET
 261

	)

230 
	#SOL_X25
 262

	)

231 
	#SOL_PACKET
 263

	)

232 
	#SOL_ATM
 264

	)

233 
	#SOL_AAL
 265

	)

234 
	#SOL_IRDA
 266

	)

237 
	#IPX_TYPE
 1

	)

	@/usr/include/asm/socket.h

1 #i‚de‡
_ASM_SOCKET_H


2 
	#_ASM_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_KEEPALIVE
 9

	)

18 
	#SO_OOBINLINE
 10

	)

19 
	#SO_NO_CHECK
 11

	)

20 
	#SO_PRIORITY
 12

	)

21 
	#SO_LINGER
 13

	)

22 
	#SO_BSDCOMPAT
 14

	)

24 
	#SO_PASSCRED
 16

	)

25 
	#SO_PEERCRED
 17

	)

26 
	#SO_RCVLOWAT
 18

	)

27 
	#SO_SNDLOWAT
 19

	)

28 
	#SO_RCVTIMEO
 20

	)

29 
	#SO_SNDTIMEO
 21

	)

32 
	#SO_SECURITY_AUTHENTICATION
 22

	)

33 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

34 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

36 
	#SO_BINDTODEVICE
 25

	)

39 
	#SO_ATTACH_FILTER
 26

	)

40 
	#SO_DETACH_FILTER
 27

	)

42 
	#SO_PEERNAME
 28

	)

43 
	#SO_TIMESTAMP
 29

	)

44 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

46 
	#SO_ACCEPTCONN
 30

	)

49 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

51 
	#SOCK_STREAM
 1

	)

52 
	#SOCK_DGRAM
 2

	)

53 
	#SOCK_RAW
 3

	)

54 
	#SOCK_RDM
 4

	)

55 
	#SOCK_SEQPACKET
 5

	)

56 
	#SOCK_PACKET
 10

	)

61 
	#SOCK_MAX
 (
SOCK_PACKET
+1)

	)

	@/usr/include/linux/sockios.h

18 #i‚de‡
_LINUX_SOCKIOS_H


19 
	#_LINUX_SOCKIOS_H


	)

21 
	~<asm/sockios.h
>

24 
	#SIOCINQ
 
FIONREAD


	)

25 
	#SIOCOUTQ
 
TIOCOUTQ


	)

28 
	#SIOCADDRT
 0x890B

	)

29 
	#SIOCDELRT
 0x890C

	)

30 
	#SIOCRTMSG
 0x890D

	)

33 
	#SIOCGIFNAME
 0x8910

	)

34 
	#SIOCSIFLINK
 0x8911

	)

35 
	#SIOCGIFCONF
 0x8912

	)

36 
	#SIOCGIFFLAGS
 0x8913

	)

37 
	#SIOCSIFFLAGS
 0x8914

	)

38 
	#SIOCGIFADDR
 0x8915

	)

39 
	#SIOCSIFADDR
 0x8916

	)

40 
	#SIOCGIFDSTADDR
 0x8917

	)

41 
	#SIOCSIFDSTADDR
 0x8918

	)

42 
	#SIOCGIFBRDADDR
 0x8919

	)

43 
	#SIOCSIFBRDADDR
 0x891®

	)

44 
	#SIOCGIFNETMASK
 0x891b

	)

45 
	#SIOCSIFNETMASK
 0x891¯

	)

46 
	#SIOCGIFMETRIC
 0x891d

	)

47 
	#SIOCSIFMETRIC
 0x891ê

	)

48 
	#SIOCGIFMEM
 0x891‡

	)

49 
	#SIOCSIFMEM
 0x8920

	)

50 
	#SIOCGIFMTU
 0x8921

	)

51 
	#SIOCSIFMTU
 0x8922

	)

52 
	#SIOCSIFNAME
 0x8923

	)

53 
	#SIOCSIFHWADDR
 0x8924

	)

54 
	#SIOCGIFENCAP
 0x8925

	)

55 
	#SIOCSIFENCAP
 0x8926

	)

56 
	#SIOCGIFHWADDR
 0x8927

	)

57 
	#SIOCGIFSLAVE
 0x8929

	)

58 
	#SIOCSIFSLAVE
 0x8930

	)

59 
	#SIOCADDMULTI
 0x8931

	)

60 
	#SIOCDELMULTI
 0x8932

	)

61 
	#SIOCGIFINDEX
 0x8933

	)

62 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

63 
	#SIOCSIFPFLAGS
 0x8934

	)

64 
	#SIOCGIFPFLAGS
 0x8935

	)

65 
	#SIOCDIFADDR
 0x8936

	)

66 
	#SIOCSIFHWBROADCAST
 0x8937

	)

67 
	#SIOCGIFCOUNT
 0x8938

	)

69 
	#SIOCGIFBR
 0x8940

	)

70 
	#SIOCSIFBR
 0x8941

	)

72 
	#SIOCGIFTXQLEN
 0x8942

	)

73 
	#SIOCSIFTXQLEN
 0x8943

	)

75 
	#SIOCGIFDIVERT
 0x8944

	)

76 
	#SIOCSIFDIVERT
 0x8945

	)

78 
	#SIOCETHTOOL
 0x8946

	)

80 
	#SIOCGMIIPHY
 0x8947

	)

81 
	#SIOCGMIIREG
 0x8948

	)

82 
	#SIOCSMIIREG
 0x8949

	)

86 
	#SIOCDARP
 0x8953

	)

87 
	#SIOCGARP
 0x8954

	)

88 
	#SIOCSARP
 0x8955

	)

91 
	#SIOCDRARP
 0x8960

	)

92 
	#SIOCGRARP
 0x8961

	)

93 
	#SIOCSRARP
 0x8962

	)

97 
	#SIOCGIFMAP
 0x8970

	)

98 
	#SIOCSIFMAP
 0x8971

	)

102 
	#SIOCADDDLCI
 0x8980

	)

103 
	#SIOCDELDLCI
 0x8981

	)

105 
	#SIOCGIFVLAN
 0x8982

	)

106 
	#SIOCSIFVLAN
 0x8983

	)

110 
	#SIOCBONDENSLAVE
 0x8990

	)

111 
	#SIOCBONDRELEASE
 0x8991

	)

112 
	#SIOCBONDSETHWADDR
 0x8992

	)

113 
	#SIOCBONDSLAVEINFOQUERY
 0x8993

	)

114 
	#SIOCBONDINFOQUERY
 0x8994

	)

115 
	#SIOCBONDCHANGEACTIVE
 0x8995

	)

128 
	#SIOCDEVPRIVATE
 0x89F0

	)

134 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/asm/sockios.h

1 #i‚de‡
__ARCH_I386_SOCKIOS__


2 
	#__ARCH_I386_SOCKIOS__


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

	@
1
.
1
/usr/include
108
2817
amd_flash.c
cfi_cmdset_0001.c
cfi_cmdset_0002.c
cfi_cmdset_0020.c
cfi_probe.c
chipreg.c
gen_probe.c
jedec.c
jedec_probe.c
map_absent.c
map_ram.c
map_rom.c
sharp.c
/usr/include/asm/byteorder.h
/usr/include/asm/io.h
/usr/include/linux/config.h
/usr/include/linux/delay.h
/usr/include/linux/errno.h
/usr/include/linux/interrupt.h
/usr/include/linux/kernel.h
/usr/include/linux/kmod.h
/usr/include/linux/module.h
/usr/include/linux/mtd/cfi.h
/usr/include/linux/mtd/compatmac.h
/usr/include/linux/mtd/flashchip.h
/usr/include/linux/mtd/jedec.h
/usr/include/linux/mtd/map.h
/usr/include/linux/mtd/mtd.h
/usr/include/linux/sched.h
/usr/include/linux/slab.h
/usr/include/linux/spinlock.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/asm/bitops.h
/usr/include/asm/errno.h
/usr/include/asm/mmu.h
/usr/include/asm/page.h
/usr/include/asm/param.h
/usr/include/asm/processor.h
/usr/include/asm/ptrace.h
/usr/include/asm/semaphore.h
/usr/include/asm/system.h
/usr/include/asm/types.h
/usr/include/linux/binfmts.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/cache.h
/usr/include/linux/compatmac.h
/usr/include/linux/fs.h
/usr/include/linux/fs_struct.h
/usr/include/linux/init.h
/usr/include/linux/list.h
/usr/include/linux/modversions.h
/usr/include/linux/mtd/cfi_endian.h
/usr/include/linux/param.h
/usr/include/linux/poll.h
/usr/include/linux/posix_types.h
/usr/include/linux/resource.h
/usr/include/linux/securebits.h
/usr/include/linux/sem.h
/usr/include/linux/signal.h
/usr/include/linux/smp.h
/usr/include/linux/threads.h
/usr/include/linux/time.h
/usr/include/linux/timer.h
/usr/include/linux/times.h
/usr/include/linux/timex.h
/usr/include/linux/tty.h
/usr/include/linux/uio.h
/usr/include/asm/cache.h
/usr/include/asm/cpufeature.h
/usr/include/asm/math_emu.h
/usr/include/asm/poll.h
/usr/include/asm/posix_types.h
/usr/include/asm/resource.h
/usr/include/asm/segment.h
/usr/include/asm/sembuf.h
/usr/include/asm/sigcontext.h
/usr/include/asm/siginfo.h
/usr/include/asm/signal.h
/usr/include/asm/smp.h
/usr/include/asm/timex.h
/usr/include/asm/vm86.h
/usr/include/linux/bitops.h
/usr/include/linux/byteorder/generic.h
/usr/include/linux/byteorder/swab.h
/usr/include/linux/capability.h
/usr/include/linux/dcache.h
/usr/include/linux/ioctl.h
/usr/include/linux/ipc.h
/usr/include/linux/kdev_t.h
/usr/include/linux/limits.h
/usr/include/linux/linkage.h
/usr/include/linux/net.h
/usr/include/linux/prefetch.h
/usr/include/linux/ptrace.h
/usr/include/linux/stat.h
/usr/include/linux/stddef.h
/usr/include/linux/string.h
/usr/include/linux/vfs.h
/usr/include/linux/wait.h
/usr/include/asm/ioctl.h
/usr/include/asm/ipcbuf.h
/usr/include/asm/statfs.h
/usr/include/asm/string.h
/usr/include/linux/socket.h
/usr/include/asm/socket.h
/usr/include/linux/sockios.h
/usr/include/asm/sockios.h
